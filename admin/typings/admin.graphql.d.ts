/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

export { };

declare global {
  /*******************************
   *                             *
   *          TYPE DEFS          *
   *                             *
   *******************************/
  export interface FileInfoInput {
    name?: string;
    alternativeText?: string;
    caption?: string;
  }
  
  export interface UsersPermissionsMe {
    id: string;
    username: string;
    email: string;
    confirmed?: boolean;
    blocked?: boolean;
    role?: UsersPermissionsMeRole;
  }
  
  export interface UsersPermissionsMeRole {
    id: string;
    name: string;
    description?: string;
    type?: string;
  }
  
  export interface UsersPermissionsRegisterInput {
    username: string;
    email: string;
    password: string;
  }
  
  export interface UsersPermissionsLoginInput {
    identifier: string;
    password: string;
    provider?: string;
  }
  
  export interface UsersPermissionsLoginPayload {
    jwt?: string;
    user: UsersPermissionsMe;
  }
  
  export interface UserPermissionsPasswordPayload {
    ok: boolean;
  }
  
  export interface CategoryWithChild {
    label?: ComponentAtomsTranslateableLabel;
    id: string;
    order: number;
    icon?: string;
    region?: Region;
    parent?: Category;
    children?: Array<CategoryWithChild | null>;
  }
  
  export interface DealTypeLabelTranslation {
    language: string;
    label?: string;
  }
  
  export interface DealTypeNavIcon {
    type: string;
    icon: string;
  }
  
  export interface DealType {
    name?: string;
    label?: Array<DealTypeLabelTranslation | null>;
    nav_label?: Array<DealTypeLabelTranslation | null>;
    nav_icon?: DealTypeNavIcon;
    source?: Source;
    last_run?: string;
    site?: string;
    id?: string;
  }
  
  export interface ProductsByDeal {
    deal_type?: DealType;
    products?: Array<Product | null>;
    total_products?: number;
  }
  
  export const enum TASK_STATUS {
    START = 'START',
    STOP = 'STOP',
    ERROR = 'ERROR'
  }
  
  export const enum SCHEDULED_TASK_NAME {
    product_validator = 'product_validator'
  }
  
  export const enum SCHEDULED_TASK_STATUS {
    stopped = 'stopped',
    running = 'running'
  }
  
  export interface TaskLogEntry {
    timestamp?: string;
    date_time?: string;
    type?: string;
    message?: string;
  }
  
  export interface Task {
    name: string;
    status?: TASK_STATUS;
    logs?: Array<TaskLogEntry | null>;
    canRun?: boolean;
  }
  
  export interface ScheduledTask {
    id?: string;
    name?: string;
    status?: SCHEDULED_TASK_STATUS;
    frequency?: string;
    next_run?: number;
    countdown?: string;
    last_run?: number;
    priority?: number;
    isReady?: boolean;
    running?: boolean;
    requestedForRun?: boolean;
    
    /**
     * Computed values
     */
    hasModule?: boolean;
    canQueue?: boolean;
  }
  
  export const enum SCHEDULED_TASK_ACTION {
    start = 'start',
    stop = 'stop'
  }
  
  export interface ScheduledTaskPayload {
    error?: string;
    data?: Array<ScheduledTask | null>;
  }
  
  export interface ScheduledTaskListPayload {
    serverTimeUnix?: string;
    serverTimeFormatted?: string;
    tasks?: Array<ScheduledTask | null>;
    logs?: Array<TaskLogEntry | null>;
  }
  
  export interface OffersCategoryLabelTranslation {
    language: string;
    label?: string;
  }
  
  export interface OffersCategory {
    id: string;
    label?: Array<OffersCategoryLabelTranslation | null>;
    dealTypes?: Array<string | null>;
    isDefault?: boolean;
  }
  
  export interface EnvType {
    HOST?: string;
    PORT?: string;
    BROWSER?: string;
    DATABASE_HOST?: string;
    DATABASE_PORT?: string;
    DATABASE_NAME?: string;
    DATABASE_USERNAME?: string;
    DATABASE_PASSWORD?: string;
    SCRIPTS_SERVER_URL?: string;
    AIRTABLE_API_KEY?: string;
    AIRTABLE_BASE_SCHEDULED_TASKS?: string;
    ENV?: string;
  }
  
  export interface PageData {
    slug: string;
    data?: ComponentEntryFieldsPageFields;
  }
  
  export interface ProductCategory {
    label?: string;
    id: string;
    order?: number;
    created_at?: DateTime;
  }
  
  export interface ProductsListWhereParamInput {
    search?: string;
    category?: string;
    status?: string;
    website_tab?: string;
    deal_type?: string;
    deal_category?: string;
  }
  
  export interface ProductsListPayload {
    count?: number;
    products?: Array<Product | null>;
  }
  
  export interface NaturalList {
    category?: ProductCategory;
    products?: Array<Product | null>;
  }
  
  export interface ProductClicksDetails {
    id?: string;
    clicks_count?: number;
  }
  
  export interface FixedProductsPayload {
    count?: number;
    products?: Array<Product | null>;
  }
  
  export interface GiftIdeasPayload {
    products?: Array<Product | null>;
    total?: number;
  }
  
  export const enum ENUM_CATEGORY_ICON {
    adults_dress = 'adults_dress',
    aircon2 = 'aircon2',
    alarm = 'alarm',
    avr = 'avr',
    baby_arms_up = 'baby_arms_up',
    baby_crawling = 'baby_crawling',
    baby = 'baby',
    badminton = 'badminton',
    ball_sports = 'ball_sports',
    balloons = 'balloons',
    basketball = 'basketball',
    bed = 'bed',
    beer_can = 'beer_can',
    bicycle = 'bicycle',
    binary_display = 'binary_display',
    binary_headset = 'binary_headset',
    blender = 'blender',
    book_open = 'book_open',
    book_stack = 'book_stack',
    bottle_2 = 'bottle_2',
    bottle_3 = 'bottle_3',
    bottle_4 = 'bottle_4',
    bottle_5 = 'bottle_5',
    bottle_6 = 'bottle_6',
    bottle_beer_cans = 'bottle_beer_cans',
    bottle_crown = 'bottle_crown',
    bottle_wine_glass = 'bottle_wine_glass',
    bottle = 'bottle',
    bulb_plug = 'bulb_plug',
    camera = 'camera',
    camping_night = 'camping_night',
    camping_tent = 'camping_tent',
    car_cog = 'car_cog',
    chair = 'chair',
    cheese_chips = 'cheese_chips',
    chicken_leg_pack = 'chicken_leg_pack',
    chip = 'chip',
    closet = 'closet',
    coat = 'coat',
    console = 'console',
    controller = 'controller',
    cookers = 'cookers',
    couch_drawers = 'couch_drawers',
    couch = 'couch',
    countdown = 'countdown',
    cpu = 'cpu',
    crown = 'crown',
    deer_crosshair = 'deer_crosshair',
    dine_house = 'dine_house',
    dining_set = 'dining_set',
    dj_equipment = 'dj_equipment',
    doctor = 'doctor',
    drawers = 'drawers',
    dress = 'dress',
    duck = 'duck',
    ebook = 'ebook',
    facial_cream = 'facial_cream',
    factory_cog = 'factory_cog',
    fan_bulb = 'fan_bulb',
    female = 'female',
    fingernail = 'fingernail',
    fish_hook = 'fish_hook',
    flower_shovel = 'flower_shovel',
    football = 'football',
    foreign_books = 'foreign_books',
    freezer = 'freezer',
    fruits_vegetables = 'fruits_vegetables',
    function = 'function',
    gas_range_oven = 'gas_range_oven',
    gift_cards = 'gift_cards',
    graphics_card = 'graphics_card',
    griller = 'griller',
    hair_care = 'hair_care',
    hands_twirl = 'hands_twirl',
    hard_drisk = 'hard_drisk',
    headphones = 'headphones',
    helium_tank = 'helium_tank',
    herbal_pills = 'herbal_pills',
    herbal_soap_shampoo = 'herbal_soap_shampoo',
    home_appliances = 'home_appliances',
    home_build = 'home_build',
    infant_carrier_helmet = 'infant_carrier_helmet',
    infant = 'infant',
    infinity_dots = 'infinity_dots',
    kettle = 'kettle',
    keyboard = 'keyboard',
    kids_clothes = 'kids_clothes',
    kids_smiling = 'kids_smiling',
    ladies_bag = 'ladies_bag',
    ladies_shoe = 'ladies_shoe',
    laptop_2 = 'laptop_2',
    laptop = 'laptop',
    long_hair = 'long_hair',
    makeup_kit = 'makeup_kit',
    aliexpress = 'aliexpress',
    amazon = 'amazon',
    arlt = 'arlt',
    bonprix = 'bonprix',
    ebay = 'ebay',
    mindfactory = 'mindfactory',
    mmse = 'mmse',
    notebooksbilliger = 'notebooksbilliger',
    otto = 'otto',
    shop_apotheke = 'shop_apotheke',
    takko_fashion = 'takko_fashion',
    tom_tailor = 'tom_tailor',
    microphone = 'microphone',
    monitor_screen = 'monitor_screen',
    motherboard = 'motherboard',
    mouse = 'mouse',
    music_instruments = 'music_instruments',
    necklace_display = 'necklace_display',
    non_alcoholic_drink = 'non_alcoholic_drink',
    note = 'note',
    outdoor_activities = 'outdoor_activities',
    oven = 'oven',
    ovens = 'ovens',
    paint_roller = 'paint_roller',
    party_props = 'party_props',
    paw_circle = 'paw_circle',
    pc_accessories = 'pc_accessories',
    pc_fan = 'pc_fan',
    pc_monitor = 'pc_monitor',
    pc_parts = 'pc_parts',
    pc = 'pc',
    pen_ruler = 'pen_ruler',
    perfume_spray = 'perfume_spray',
    phone = 'phone',
    pillars = 'pillars',
    pizza_with_drink = 'pizza_with_drink',
    play_tv = 'play_tv',
    play = 'play',
    pressure_cooker = 'pressure_cooker',
    ram_stick = 'ram_stick',
    refrigerator = 'refrigerator',
    rice_cooker = 'rice_cooker',
    rope_loop = 'rope_loop',
    rum = 'rum',
    running = 'running',
    sale_tag = 'sale_tag',
    security = 'security',
    shirt = 'shirt',
    shoes = 'shoes',
    showbiz_mask = 'showbiz_mask',
    sink = 'sink',
    soccer_ball = 'soccer_ball',
    social_icons = 'social_icons',
    speakers = 'speakers',
    spray_bucket = 'spray_bucket',
    swimming = 'swimming',
    table_tennis_racket = 'table_tennis_racket',
    table_with_chair = 'table_with_chair',
    table = 'table',
    tablet = 'tablet',
    tennis = 'tennis',
    tent_soccer = 'tent_soccer',
    tv = 'tv',
    unknown = 'unknown',
    vacumm_cleaner = 'vacumm_cleaner',
    volleyball = 'volleyball',
    vr = 'vr',
    warp = 'warp',
    washer = 'washer',
    washing_machine = 'washing_machine',
    watch = 'watch',
    well_chair = 'well_chair',
    xbox = 'xbox'
  }
  
  export interface Category {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    slug?: string;
    url?: string;
    parent?: Category;
    language?: Language;
    icon?: ENUM_CATEGORY_ICON;
    order?: number;
    label_preview?: string;
    region?: Region;
    source?: Source;
    label?: Array<ComponentAtomsTranslateableLabel | null>;
    product_attrs?: Array<ComponentAtomsProductAttr | null>;
    label_translations_json?: JSON;
    children_count?: number;
    products_count?: number;
    deal_category?: string;
    products?: Array<Product | null>;
    ascendants?: Array<Category | null>;
  }
  
  export interface CategoryConnection {
    values?: Array<Category | null>;
    groupBy?: CategoryGroupBy;
    aggregate?: CategoryAggregator;
  }
  
  export interface CategoryAggregator {
    count?: number;
    totalCount?: number;
    sum?: CategoryAggregatorSum;
    avg?: CategoryAggregatorAvg;
    min?: CategoryAggregatorMin;
    max?: CategoryAggregatorMax;
  }
  
  export interface CategoryAggregatorSum {
    order?: number;
    children_count?: number;
    products_count?: number;
  }
  
  export interface CategoryAggregatorAvg {
    order?: number;
    children_count?: number;
    products_count?: number;
  }
  
  export interface CategoryAggregatorMin {
    order?: number;
    children_count?: number;
    products_count?: number;
  }
  
  export interface CategoryAggregatorMax {
    order?: number;
    children_count?: number;
    products_count?: number;
  }
  
  export interface CategoryGroupBy {
    id?: Array<CategoryConnectionId | null>;
    created_at?: Array<CategoryConnectionCreated_at | null>;
    updated_at?: Array<CategoryConnectionUpdated_at | null>;
    slug?: Array<CategoryConnectionSlug | null>;
    url?: Array<CategoryConnectionUrl | null>;
    parent?: Array<CategoryConnectionParent | null>;
    language?: Array<CategoryConnectionLanguage | null>;
    icon?: Array<CategoryConnectionIcon | null>;
    order?: Array<CategoryConnectionOrder | null>;
    label_preview?: Array<CategoryConnectionLabel_preview | null>;
    region?: Array<CategoryConnectionRegion | null>;
    source?: Array<CategoryConnectionSource | null>;
    label_translations_json?: Array<CategoryConnectionLabel_translations_json | null>;
    children_count?: Array<CategoryConnectionChildren_count | null>;
    products_count?: Array<CategoryConnectionProducts_count | null>;
    deal_category?: Array<CategoryConnectionDeal_category | null>;
  }
  
  export interface CategoryConnectionId {
    key?: string;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionCreated_at {
    key?: DateTime;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionUpdated_at {
    key?: DateTime;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionSlug {
    key?: string;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionUrl {
    key?: string;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionParent {
    key?: string;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionLanguage {
    key?: string;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionIcon {
    key?: string;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionOrder {
    key?: number;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionLabel_preview {
    key?: string;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionRegion {
    key?: string;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionSource {
    key?: string;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionLabel_translations_json {
    key?: JSON;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionChildren_count {
    key?: number;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionProducts_count {
    key?: number;
    connection?: CategoryConnection;
  }
  
  export interface CategoryConnectionDeal_category {
    key?: string;
    connection?: CategoryConnection;
  }
  
  export interface CategoryInput {
    slug?: string;
    url?: string;
    parent?: string;
    language?: string;
    icon?: ENUM_CATEGORY_ICON;
    order?: number;
    label_preview?: string;
    region?: string;
    source?: string;
    label?: Array<ComponentAtomsTranslateableLabelInput>;
    product_attrs?: Array<ComponentAtomsProductAttrInput | null>;
    label_translations_json?: JSON;
    products?: Array<string | null>;
    children_count?: number;
    products_count?: number;
    ascendants?: Array<string | null>;
    deal_category?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editCategoryInput {
    slug?: string;
    url?: string;
    parent?: string;
    language?: string;
    icon?: ENUM_CATEGORY_ICON;
    order?: number;
    label_preview?: string;
    region?: string;
    source?: string;
    label?: Array<editComponentAtomsTranslateableLabelInput | null>;
    product_attrs?: Array<editComponentAtomsProductAttrInput | null>;
    label_translations_json?: JSON;
    products?: Array<string | null>;
    children_count?: number;
    products_count?: number;
    ascendants?: Array<string | null>;
    deal_category?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface createCategoryInput {
    data?: CategoryInput;
  }
  
  export interface createCategoryPayload {
    category?: Category;
  }
  
  export interface updateCategoryInput {
    where?: InputID;
    data?: editCategoryInput;
  }
  
  export interface updateCategoryPayload {
    category?: Category;
  }
  
  export interface deleteCategoryInput {
    where?: InputID;
  }
  
  export interface deleteCategoryPayload {
    category?: Category;
  }
  
  export interface ContactDetails {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    phone_number?: string;
    email?: string;
    published_at?: DateTime;
  }
  
  export interface ContactDetailInput {
    phone_number?: string;
    email?: string;
    published_at?: DateTime;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editContactDetailInput {
    phone_number?: string;
    email?: string;
    published_at?: DateTime;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface updateContactDetailInput {
    data?: editContactDetailInput;
  }
  
  export interface updateContactDetailPayload {
    contactDetail?: ContactDetails;
  }
  
  export interface deleteContactDetailPayload {
    contactDetail?: ContactDetails;
  }
  
  export interface Currency {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    name: string;
    code: string;
    symbol: string;
    label_preview?: string;
    regions?: Array<Region | null>;
  }
  
  export interface CurrencyConnection {
    values?: Array<Currency | null>;
    groupBy?: CurrencyGroupBy;
    aggregate?: CurrencyAggregator;
  }
  
  export interface CurrencyAggregator {
    count?: number;
    totalCount?: number;
  }
  
  export interface CurrencyGroupBy {
    id?: Array<CurrencyConnectionId | null>;
    created_at?: Array<CurrencyConnectionCreated_at | null>;
    updated_at?: Array<CurrencyConnectionUpdated_at | null>;
    name?: Array<CurrencyConnectionName | null>;
    code?: Array<CurrencyConnectionCode | null>;
    symbol?: Array<CurrencyConnectionSymbol | null>;
    label_preview?: Array<CurrencyConnectionLabel_preview | null>;
  }
  
  export interface CurrencyConnectionId {
    key?: string;
    connection?: CurrencyConnection;
  }
  
  export interface CurrencyConnectionCreated_at {
    key?: DateTime;
    connection?: CurrencyConnection;
  }
  
  export interface CurrencyConnectionUpdated_at {
    key?: DateTime;
    connection?: CurrencyConnection;
  }
  
  export interface CurrencyConnectionName {
    key?: string;
    connection?: CurrencyConnection;
  }
  
  export interface CurrencyConnectionCode {
    key?: string;
    connection?: CurrencyConnection;
  }
  
  export interface CurrencyConnectionSymbol {
    key?: string;
    connection?: CurrencyConnection;
  }
  
  export interface CurrencyConnectionLabel_preview {
    key?: string;
    connection?: CurrencyConnection;
  }
  
  export interface CurrencyInput {
    name: string;
    code: string;
    symbol: string;
    regions?: Array<string | null>;
    label_preview?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editCurrencyInput {
    name?: string;
    code?: string;
    symbol?: string;
    regions?: Array<string | null>;
    label_preview?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface createCurrencyInput {
    data?: CurrencyInput;
  }
  
  export interface createCurrencyPayload {
    currency?: Currency;
  }
  
  export interface updateCurrencyInput {
    where?: InputID;
    data?: editCurrencyInput;
  }
  
  export interface updateCurrencyPayload {
    currency?: Currency;
  }
  
  export interface deleteCurrencyInput {
    where?: InputID;
  }
  
  export interface deleteCurrencyPayload {
    currency?: Currency;
  }
  
  export interface FooterSettings {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    footer_data?: Array<ComponentEntryFieldsFooterFields | null>;
    language?: Language;
    page?: Page;
    published_at?: DateTime;
  }
  
  export interface FooterSettingInput {
    footer_data?: Array<ComponentEntryFieldsFooterFieldInput | null>;
    language?: string;
    page?: string;
    published_at?: DateTime;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editFooterSettingInput {
    footer_data?: Array<editComponentEntryFieldsFooterFieldInput | null>;
    language?: string;
    page?: string;
    published_at?: DateTime;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface updateFooterSettingInput {
    data?: editFooterSettingInput;
  }
  
  export interface updateFooterSettingPayload {
    footerSetting?: FooterSettings;
  }
  
  export interface deleteFooterSettingPayload {
    footerSetting?: FooterSettings;
  }
  
  export const enum ENUM_LANGUAGE_COUNTRY_FLAG {
    afghanistan = 'afghanistan',
    albania = 'albania',
    algeria = 'algeria',
    american_samoa = 'american_samoa',
    andorra = 'andorra',
    angola = 'angola',
    anguilla = 'anguilla',
    antarctica = 'antarctica',
    antigua_and_barbuda = 'antigua_and_barbuda',
    argentina = 'argentina',
    armenia = 'armenia',
    aruba = 'aruba',
    australia = 'australia',
    austria = 'austria',
    azerbaijan = 'azerbaijan',
    bahamas_the = 'bahamas_the',
    bahrain = 'bahrain',
    bangladesh = 'bangladesh',
    barbados = 'barbados',
    belarus = 'belarus',
    belgium = 'belgium',
    belize = 'belize',
    benin = 'benin',
    bermuda = 'bermuda',
    bhutan = 'bhutan',
    bolivia_plurinational_state_of = 'bolivia_plurinational_state_of',
    bonaire_sint_eustatius_and_saba = 'bonaire_sint_eustatius_and_saba',
    bosnia_and_herzegovina = 'bosnia_and_herzegovina',
    botswana = 'botswana',
    bouvet_island = 'bouvet_island',
    brazil = 'brazil',
    british_indian_ocean_territory_the = 'british_indian_ocean_territory_the',
    brunei_darussalam = 'brunei_darussalam',
    bulgaria = 'bulgaria',
    burkina_faso = 'burkina_faso',
    burundi = 'burundi',
    cabo_verde = 'cabo_verde',
    cambodia = 'cambodia',
    cameroon = 'cameroon',
    canada = 'canada',
    cayman_islands_the = 'cayman_islands_the',
    central_african_republic_the = 'central_african_republic_the',
    chad = 'chad',
    chile = 'chile',
    china = 'china',
    christmas_island = 'christmas_island',
    colombia = 'colombia',
    comoros_the = 'comoros_the',
    congo_the_democratic_republic_of_the = 'congo_the_democratic_republic_of_the',
    congo_the = 'congo_the',
    cook_islands_the = 'cook_islands_the',
    costa_rica = 'costa_rica',
    croatia = 'croatia',
    cuba = 'cuba',
    cyprus = 'cyprus',
    czechia = 'czechia',
    denmark = 'denmark',
    djibouti = 'djibouti',
    dominica = 'dominica',
    dominican_republic_the = 'dominican_republic_the',
    ecuador = 'ecuador',
    egypt = 'egypt',
    el_salvador = 'el_salvador',
    equatorial_guinea = 'equatorial_guinea',
    eritrea = 'eritrea',
    estonia = 'estonia',
    eswatini = 'eswatini',
    ethiopia = 'ethiopia',
    faroe_islands_the = 'faroe_islands_the',
    fiji = 'fiji',
    finland = 'finland',
    france = 'france',
    french_guiana = 'french_guiana',
    french_polynesia = 'french_polynesia',
    french_southern_territories_the = 'french_southern_territories_the',
    gabon = 'gabon',
    gambia_the = 'gambia_the',
    georgia = 'georgia',
    germany = 'germany',
    ghana = 'ghana',
    gibraltar = 'gibraltar',
    greece = 'greece',
    greenland = 'greenland',
    grenada = 'grenada',
    guadeloupe = 'guadeloupe',
    guam = 'guam',
    guatemala = 'guatemala',
    guernsey = 'guernsey',
    guinea = 'guinea',
    guyana = 'guyana',
    haiti = 'haiti',
    heard_island_and_mcdonald_islands = 'heard_island_and_mcdonald_islands',
    holy_see_the = 'holy_see_the',
    honduras = 'honduras',
    hong_kong = 'hong_kong',
    hungary = 'hungary',
    iceland = 'iceland',
    india = 'india',
    indonesia = 'indonesia',
    iran_islamic_republic_of = 'iran_islamic_republic_of',
    iraq = 'iraq',
    ireland = 'ireland',
    isle_of_man = 'isle_of_man',
    israel = 'israel',
    italy = 'italy',
    jamaica = 'jamaica',
    japan = 'japan',
    jersey = 'jersey',
    jordan = 'jordan',
    kazakhstan = 'kazakhstan',
    kenya = 'kenya',
    kiribati = 'kiribati',
    korea_the_republic_of = 'korea_the_republic_of',
    kuwait = 'kuwait',
    kyrgyzstan = 'kyrgyzstan',
    latvia = 'latvia',
    lebanon = 'lebanon',
    lesotho = 'lesotho',
    liberia = 'liberia',
    libya = 'libya',
    liechtenstein = 'liechtenstein',
    lithuania = 'lithuania',
    luxembourg = 'luxembourg',
    macao = 'macao',
    madagascar = 'madagascar',
    malawi = 'malawi',
    malaysia = 'malaysia',
    maldives = 'maldives',
    mali = 'mali',
    malta = 'malta',
    marshall_islands_the = 'marshall_islands_the',
    martinique = 'martinique',
    mauritania = 'mauritania',
    mauritius = 'mauritius',
    mayotte = 'mayotte',
    mexico = 'mexico',
    micronesia_federated_states_of = 'micronesia_federated_states_of',
    moldova_the_republic_of = 'moldova_the_republic_of',
    monaco = 'monaco',
    mongolia = 'mongolia',
    montenegro = 'montenegro',
    montserrat = 'montserrat',
    morocco = 'morocco',
    mozambique = 'mozambique',
    myanmar = 'myanmar',
    namibia = 'namibia',
    nauru = 'nauru',
    nepal = 'nepal',
    netherlands_the = 'netherlands_the',
    new_caledonia = 'new_caledonia',
    new_zealand = 'new_zealand',
    nicaragua = 'nicaragua',
    niger_the = 'niger_the',
    nigeria = 'nigeria',
    niue = 'niue',
    norfolk_island = 'norfolk_island',
    northern_mariana_islands_the = 'northern_mariana_islands_the',
    norway = 'norway',
    oman = 'oman',
    pakistan = 'pakistan',
    palau = 'palau',
    palestine_state_of = 'palestine_state_of',
    panama = 'panama',
    papua_new_guinea = 'papua_new_guinea',
    paraguay = 'paraguay',
    peru = 'peru',
    philippines_the = 'philippines_the',
    pitcairn = 'pitcairn',
    poland = 'poland',
    portugal = 'portugal',
    puerto_rico = 'puerto_rico',
    qatar = 'qatar',
    republic_of_north_macedonia = 'republic_of_north_macedonia',
    romania = 'romania',
    russian_federation_the = 'russian_federation_the',
    rwanda = 'rwanda',
    saint_helena_ascension_and_tristan_da_cunha = 'saint_helena_ascension_and_tristan_da_cunha',
    saint_kitts_and_nevis = 'saint_kitts_and_nevis',
    saint_lucia = 'saint_lucia',
    saint_martin_french_part = 'saint_martin_french_part',
    saint_pierre_and_miquelon = 'saint_pierre_and_miquelon',
    saint_vincent_and_the_grenadines = 'saint_vincent_and_the_grenadines',
    samoa = 'samoa',
    san_marino = 'san_marino',
    sao_tome_and_principe = 'sao_tome_and_principe',
    saudi_arabia = 'saudi_arabia',
    senegal = 'senegal',
    serbia = 'serbia',
    seychelles = 'seychelles',
    sierra_leone = 'sierra_leone',
    singapore = 'singapore',
    sint_maarten_dutch_part = 'sint_maarten_dutch_part',
    slovakia = 'slovakia',
    slovenia = 'slovenia',
    solomon_islands = 'solomon_islands',
    somalia = 'somalia',
    south_africa = 'south_africa',
    south_georgia_and_the_south_sandwich_islands = 'south_georgia_and_the_south_sandwich_islands',
    south_sudan = 'south_sudan',
    spain = 'spain',
    sri_lanka = 'sri_lanka',
    sudan_the = 'sudan_the',
    suriname = 'suriname',
    svalbard_and_jan_mayen = 'svalbard_and_jan_mayen',
    sweden = 'sweden',
    switzerland = 'switzerland',
    syrian_arab_republic = 'syrian_arab_republic',
    taiwan_province_of_china = 'taiwan_province_of_china',
    tajikistan = 'tajikistan',
    tanzania_united_republic_of = 'tanzania_united_republic_of',
    thailand = 'thailand',
    togo = 'togo',
    tokelau = 'tokelau',
    tonga = 'tonga',
    trinidad_and_tobago = 'trinidad_and_tobago',
    tunisia = 'tunisia',
    turkey = 'turkey',
    turkmenistan = 'turkmenistan',
    turks_and_caicos_islands_the = 'turks_and_caicos_islands_the',
    tuvalu = 'tuvalu',
    uganda = 'uganda',
    ukraine = 'ukraine',
    united_arab_emirates_the = 'united_arab_emirates_the',
    united_states_minor_outlying_islands_the = 'united_states_minor_outlying_islands_the',
    united_states_of_america_the = 'united_states_of_america_the',
    uruguay = 'uruguay',
    uzbekistan = 'uzbekistan',
    vanuatu = 'vanuatu',
    venezuela_bolivarian_republic_of = 'venezuela_bolivarian_republic_of',
    viet_nam = 'viet_nam',
    virgin_islands_british = 'virgin_islands_british',
    wallis_and_futuna = 'wallis_and_futuna',
    western_sahara = 'western_sahara',
    yemen = 'yemen',
    zambia = 'zambia',
    zimbabwe = 'zimbabwe'
  }
  
  export interface Language {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    code: string;
    name?: string;
    country_flag?: ENUM_LANGUAGE_COUNTRY_FLAG;
  }
  
  export interface LanguageConnection {
    values?: Array<Language | null>;
    groupBy?: LanguageGroupBy;
    aggregate?: LanguageAggregator;
  }
  
  export interface LanguageAggregator {
    count?: number;
    totalCount?: number;
  }
  
  export interface LanguageGroupBy {
    id?: Array<LanguageConnectionId | null>;
    created_at?: Array<LanguageConnectionCreated_at | null>;
    updated_at?: Array<LanguageConnectionUpdated_at | null>;
    code?: Array<LanguageConnectionCode | null>;
    name?: Array<LanguageConnectionName | null>;
    country_flag?: Array<LanguageConnectionCountry_flag | null>;
  }
  
  export interface LanguageConnectionId {
    key?: string;
    connection?: LanguageConnection;
  }
  
  export interface LanguageConnectionCreated_at {
    key?: DateTime;
    connection?: LanguageConnection;
  }
  
  export interface LanguageConnectionUpdated_at {
    key?: DateTime;
    connection?: LanguageConnection;
  }
  
  export interface LanguageConnectionCode {
    key?: string;
    connection?: LanguageConnection;
  }
  
  export interface LanguageConnectionName {
    key?: string;
    connection?: LanguageConnection;
  }
  
  export interface LanguageConnectionCountry_flag {
    key?: string;
    connection?: LanguageConnection;
  }
  
  export interface LanguageInput {
    code: string;
    name?: string;
    country_flag?: ENUM_LANGUAGE_COUNTRY_FLAG;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editLanguageInput {
    code?: string;
    name?: string;
    country_flag?: ENUM_LANGUAGE_COUNTRY_FLAG;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface createLanguageInput {
    data?: LanguageInput;
  }
  
  export interface createLanguagePayload {
    language?: Language;
  }
  
  export interface updateLanguageInput {
    where?: InputID;
    data?: editLanguageInput;
  }
  
  export interface updateLanguagePayload {
    language?: Language;
  }
  
  export interface deleteLanguageInput {
    where?: InputID;
  }
  
  export interface deleteLanguagePayload {
    language?: Language;
  }
  
  export interface Page {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    slug?: string;
    page_data?: Array<ComponentEntryFieldsPageFields | null>;
    language?: Language;
    product_attr_ratings?: Array<ComponentAtomsProductAttrRating | null>;
    published_at?: DateTime;
  }
  
  export interface PageConnection {
    values?: Array<Page | null>;
    groupBy?: PageGroupBy;
    aggregate?: PageAggregator;
  }
  
  export interface PageAggregator {
    count?: number;
    totalCount?: number;
  }
  
  export interface PageGroupBy {
    id?: Array<PageConnectionId | null>;
    created_at?: Array<PageConnectionCreated_at | null>;
    updated_at?: Array<PageConnectionUpdated_at | null>;
    slug?: Array<PageConnectionSlug | null>;
    language?: Array<PageConnectionLanguage | null>;
    published_at?: Array<PageConnectionPublished_at | null>;
  }
  
  export interface PageConnectionId {
    key?: string;
    connection?: PageConnection;
  }
  
  export interface PageConnectionCreated_at {
    key?: DateTime;
    connection?: PageConnection;
  }
  
  export interface PageConnectionUpdated_at {
    key?: DateTime;
    connection?: PageConnection;
  }
  
  export interface PageConnectionSlug {
    key?: string;
    connection?: PageConnection;
  }
  
  export interface PageConnectionLanguage {
    key?: string;
    connection?: PageConnection;
  }
  
  export interface PageConnectionPublished_at {
    key?: DateTime;
    connection?: PageConnection;
  }
  
  export interface PageInput {
    slug?: string;
    page_data?: Array<ComponentEntryFieldsPageFieldInput>;
    title_preview?: string;
    language?: string;
    product_attr_ratings?: Array<ComponentAtomsProductAttrRatingInput | null>;
    published_at?: DateTime;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editPageInput {
    slug?: string;
    page_data?: Array<editComponentEntryFieldsPageFieldInput | null>;
    title_preview?: string;
    language?: string;
    product_attr_ratings?: Array<editComponentAtomsProductAttrRatingInput | null>;
    published_at?: DateTime;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface createPageInput {
    data?: PageInput;
  }
  
  export interface createPagePayload {
    page?: Page;
  }
  
  export interface updatePageInput {
    where?: InputID;
    data?: editPageInput;
  }
  
  export interface updatePagePayload {
    page?: Page;
  }
  
  export interface deletePageInput {
    where?: InputID;
  }
  
  export interface deletePagePayload {
    page?: Page;
  }
  
  export const enum ENUM_PRODUCTATTRIBUTE_DATA_TYPE {
    number = 'number',
    date_time = 'date_time'
  }
  
  export const enum ENUM_PRODUCTATTRIBUTE_PRODUCT_PROP {
    none = 'none',
    price = 'price',
    release_date = 'release_date'
  }
  
  export interface ProductAttribute {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    name?: string;
    code?: string;
    is_common?: boolean;
    data_type?: ENUM_PRODUCTATTRIBUTE_DATA_TYPE;
    custom_formula?: string;
    disable_min?: boolean;
    disable_max?: boolean;
    min_label?: string;
    max_label?: string;
    product_prop?: ENUM_PRODUCTATTRIBUTE_PRODUCT_PROP;
  }
  
  export interface ProductAttributeConnection {
    values?: Array<ProductAttribute | null>;
    groupBy?: ProductAttributeGroupBy;
    aggregate?: ProductAttributeAggregator;
  }
  
  export interface ProductAttributeAggregator {
    count?: number;
    totalCount?: number;
  }
  
  export interface ProductAttributeGroupBy {
    id?: Array<ProductAttributeConnectionId | null>;
    created_at?: Array<ProductAttributeConnectionCreated_at | null>;
    updated_at?: Array<ProductAttributeConnectionUpdated_at | null>;
    name?: Array<ProductAttributeConnectionName | null>;
    code?: Array<ProductAttributeConnectionCode | null>;
    is_common?: Array<ProductAttributeConnectionIs_common | null>;
    data_type?: Array<ProductAttributeConnectionData_type | null>;
    custom_formula?: Array<ProductAttributeConnectionCustom_formula | null>;
    disable_min?: Array<ProductAttributeConnectionDisable_min | null>;
    disable_max?: Array<ProductAttributeConnectionDisable_max | null>;
    min_label?: Array<ProductAttributeConnectionMin_label | null>;
    max_label?: Array<ProductAttributeConnectionMax_label | null>;
    product_prop?: Array<ProductAttributeConnectionProduct_prop | null>;
  }
  
  export interface ProductAttributeConnectionId {
    key?: string;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeConnectionCreated_at {
    key?: DateTime;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeConnectionUpdated_at {
    key?: DateTime;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeConnectionName {
    key?: string;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeConnectionCode {
    key?: string;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeConnectionIs_common {
    key?: boolean;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeConnectionData_type {
    key?: string;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeConnectionCustom_formula {
    key?: string;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeConnectionDisable_min {
    key?: boolean;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeConnectionDisable_max {
    key?: boolean;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeConnectionMin_label {
    key?: string;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeConnectionMax_label {
    key?: string;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeConnectionProduct_prop {
    key?: string;
    connection?: ProductAttributeConnection;
  }
  
  export interface ProductAttributeInput {
    name?: string;
    code?: string;
    is_common?: boolean;
    data_type?: ENUM_PRODUCTATTRIBUTE_DATA_TYPE;
    custom_formula?: string;
    disable_min?: boolean;
    disable_max?: boolean;
    min_label?: string;
    max_label?: string;
    product_prop?: ENUM_PRODUCTATTRIBUTE_PRODUCT_PROP;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editProductAttributeInput {
    name?: string;
    code?: string;
    is_common?: boolean;
    data_type?: ENUM_PRODUCTATTRIBUTE_DATA_TYPE;
    custom_formula?: string;
    disable_min?: boolean;
    disable_max?: boolean;
    min_label?: string;
    max_label?: string;
    product_prop?: ENUM_PRODUCTATTRIBUTE_PRODUCT_PROP;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface createProductAttributeInput {
    data?: ProductAttributeInput;
  }
  
  export interface createProductAttributePayload {
    productAttribute?: ProductAttribute;
  }
  
  export interface updateProductAttributeInput {
    where?: InputID;
    data?: editProductAttributeInput;
  }
  
  export interface updateProductAttributePayload {
    productAttribute?: ProductAttribute;
  }
  
  export interface deleteProductAttributeInput {
    where?: InputID;
  }
  
  export interface deleteProductAttributePayload {
    productAttribute?: ProductAttribute;
  }
  
  export const enum ENUM_PRODUCTCHANGE_CHANGE_TYPE {
    create = 'create',
    update = 'update',
    admin_update = 'admin_update',
    script_update = 'script_update',
    publish = 'publish',
    draft = 'draft',
    trash = 'trash',
    category_post_update = 'category_post_update',
    product_validator_results = 'product_validator_results',
    price_updater_results = 'price_updater_results'
  }
  
  export interface ProductChange {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    state?: string;
    admin_user?: AdminUser;
    date_time?: DateTime;
    product?: Product;
    change_type?: ENUM_PRODUCTCHANGE_CHANGE_TYPE;
  }
  
  export interface ProductChangeConnection {
    values?: Array<ProductChange | null>;
    groupBy?: ProductChangeGroupBy;
    aggregate?: ProductChangeAggregator;
  }
  
  export interface ProductChangeAggregator {
    count?: number;
    totalCount?: number;
  }
  
  export interface ProductChangeGroupBy {
    id?: Array<ProductChangeConnectionId | null>;
    created_at?: Array<ProductChangeConnectionCreated_at | null>;
    updated_at?: Array<ProductChangeConnectionUpdated_at | null>;
    state?: Array<ProductChangeConnectionState | null>;
    admin_user?: Array<ProductChangeConnectionAdmin_user | null>;
    date_time?: Array<ProductChangeConnectionDate_time | null>;
    product?: Array<ProductChangeConnectionProduct | null>;
    change_type?: Array<ProductChangeConnectionChange_type | null>;
  }
  
  export interface ProductChangeConnectionId {
    key?: string;
    connection?: ProductChangeConnection;
  }
  
  export interface ProductChangeConnectionCreated_at {
    key?: DateTime;
    connection?: ProductChangeConnection;
  }
  
  export interface ProductChangeConnectionUpdated_at {
    key?: DateTime;
    connection?: ProductChangeConnection;
  }
  
  export interface ProductChangeConnectionState {
    key?: string;
    connection?: ProductChangeConnection;
  }
  
  export interface ProductChangeConnectionAdmin_user {
    key?: string;
    connection?: ProductChangeConnection;
  }
  
  export interface ProductChangeConnectionDate_time {
    key?: DateTime;
    connection?: ProductChangeConnection;
  }
  
  export interface ProductChangeConnectionProduct {
    key?: string;
    connection?: ProductChangeConnection;
  }
  
  export interface ProductChangeConnectionChange_type {
    key?: string;
    connection?: ProductChangeConnection;
  }
  
  export interface ProductChangeInput {
    state?: string;
    admin_user?: string;
    date_time?: DateTime;
    product?: string;
    change_type?: ENUM_PRODUCTCHANGE_CHANGE_TYPE;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editProductChangeInput {
    state?: string;
    admin_user?: string;
    date_time?: DateTime;
    product?: string;
    change_type?: ENUM_PRODUCTCHANGE_CHANGE_TYPE;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface createProductChangeInput {
    data?: ProductChangeInput;
  }
  
  export interface createProductChangePayload {
    productChange?: ProductChange;
  }
  
  export interface updateProductChangeInput {
    where?: InputID;
    data?: editProductChangeInput;
  }
  
  export interface updateProductChangePayload {
    productChange?: ProductChange;
  }
  
  export interface deleteProductChangeInput {
    where?: InputID;
  }
  
  export interface deleteProductChangePayload {
    productChange?: ProductChange;
  }
  
  export const enum ENUM_PRODUCT_STATUS {
    published = 'published',
    draft = 'draft'
  }
  
  export const enum ENUM_PRODUCT_OFFER_CATEGORY {
    none = 'none',
    children = 'children',
    electronics = 'electronics',
    fashion = 'fashion',
    furniture = 'furniture',
    grocery = 'grocery',
    health = 'health',
    hobby = 'hobby',
    travel = 'travel',
    warehouse = 'warehouse'
  }
  
  export interface Product {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    position?: number;
    price?: number;
    clicks_count?: number;
    image: string;
    region?: Region;
    source?: Source;
    url_list?: Array<ComponentAtomsUrlWithType | null>;
    details_html?: string;
    attrs_rating?: Array<ComponentAtomsProductAttrRating | null>;
    final_rating?: number;
    amazon_url?: string;
    release_date?: DateTime;
    admin_user?: AdminUser;
    category_temp?: number;
    category?: Category;
    status?: ENUM_PRODUCT_STATUS;
    product_issues?: ComponentAtomsProductIssues;
    quantity_available_percent?: number;
    discount_percent?: number;
    price_original?: number;
    scrape_batch_uid?: string;
    deal_quantity_available_percent?: number;
    offer_category?: ENUM_PRODUCT_OFFER_CATEGORY;
    deal_type?: string;
    deal_expiry?: Long;
    title?: string;
    product_changes?: Array<ProductChange | null>;
    tags?: Array<Tag | null>;
  }
  
  export interface ProductConnection {
    values?: Array<Product | null>;
    groupBy?: ProductGroupBy;
    aggregate?: ProductAggregator;
  }
  
  export interface ProductAggregator {
    count?: number;
    totalCount?: number;
    sum?: ProductAggregatorSum;
    avg?: ProductAggregatorAvg;
    min?: ProductAggregatorMin;
    max?: ProductAggregatorMax;
  }
  
  export interface ProductAggregatorSum {
    position?: number;
    price?: number;
    clicks_count?: number;
    final_rating?: number;
    category_temp?: number;
    quantity_available_percent?: number;
    discount_percent?: number;
    price_original?: number;
    deal_quantity_available_percent?: number;
  }
  
  export interface ProductAggregatorAvg {
    position?: number;
    price?: number;
    clicks_count?: number;
    final_rating?: number;
    category_temp?: number;
    quantity_available_percent?: number;
    discount_percent?: number;
    price_original?: number;
    deal_quantity_available_percent?: number;
  }
  
  export interface ProductAggregatorMin {
    position?: number;
    price?: number;
    clicks_count?: number;
    final_rating?: number;
    category_temp?: number;
    quantity_available_percent?: number;
    discount_percent?: number;
    price_original?: number;
    deal_quantity_available_percent?: number;
  }
  
  export interface ProductAggregatorMax {
    position?: number;
    price?: number;
    clicks_count?: number;
    final_rating?: number;
    category_temp?: number;
    quantity_available_percent?: number;
    discount_percent?: number;
    price_original?: number;
    deal_quantity_available_percent?: number;
  }
  
  export interface ProductGroupBy {
    id?: Array<ProductConnectionId | null>;
    created_at?: Array<ProductConnectionCreated_at | null>;
    updated_at?: Array<ProductConnectionUpdated_at | null>;
    position?: Array<ProductConnectionPosition | null>;
    price?: Array<ProductConnectionPrice | null>;
    clicks_count?: Array<ProductConnectionClicks_count | null>;
    image?: Array<ProductConnectionImage | null>;
    region?: Array<ProductConnectionRegion | null>;
    source?: Array<ProductConnectionSource | null>;
    details_html?: Array<ProductConnectionDetails_html | null>;
    final_rating?: Array<ProductConnectionFinal_rating | null>;
    amazon_url?: Array<ProductConnectionAmazon_url | null>;
    release_date?: Array<ProductConnectionRelease_date | null>;
    admin_user?: Array<ProductConnectionAdmin_user | null>;
    category_temp?: Array<ProductConnectionCategory_temp | null>;
    category?: Array<ProductConnectionCategory | null>;
    status?: Array<ProductConnectionStatus | null>;
    product_issues?: Array<ProductConnectionProduct_issues | null>;
    quantity_available_percent?: Array<ProductConnectionQuantity_available_percent | null>;
    discount_percent?: Array<ProductConnectionDiscount_percent | null>;
    price_original?: Array<ProductConnectionPrice_original | null>;
    scrape_batch_uid?: Array<ProductConnectionScrape_batch_uid | null>;
    deal_quantity_available_percent?: Array<ProductConnectionDeal_quantity_available_percent | null>;
    offer_category?: Array<ProductConnectionOffer_category | null>;
    deal_type?: Array<ProductConnectionDeal_type | null>;
    deal_expiry?: Array<ProductConnectionDeal_expiry | null>;
    title?: Array<ProductConnectionTitle | null>;
  }
  
  export interface ProductConnectionId {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionCreated_at {
    key?: DateTime;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionUpdated_at {
    key?: DateTime;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionPosition {
    key?: number;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionPrice {
    key?: number;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionClicks_count {
    key?: number;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionImage {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionRegion {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionSource {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionDetails_html {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionFinal_rating {
    key?: number;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionAmazon_url {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionRelease_date {
    key?: DateTime;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionAdmin_user {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionCategory_temp {
    key?: number;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionCategory {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionStatus {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionProduct_issues {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionQuantity_available_percent {
    key?: number;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionDiscount_percent {
    key?: number;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionPrice_original {
    key?: number;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionScrape_batch_uid {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionDeal_quantity_available_percent {
    key?: number;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionOffer_category {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionDeal_type {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionDeal_expiry {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductConnectionTitle {
    key?: string;
    connection?: ProductConnection;
  }
  
  export interface ProductInput {
    position?: number;
    price?: number;
    clicks_count?: number;
    image: string;
    region?: string;
    source?: string;
    url_list?: Array<ComponentAtomsUrlWithTypeInput | null>;
    details_html?: string;
    attrs_rating?: Array<ComponentAtomsProductAttrRatingInput | null>;
    final_rating?: number;
    amazon_url?: string;
    product_changes?: Array<string | null>;
    release_date?: DateTime;
    admin_user?: string;
    category_temp?: number;
    category?: string;
    status?: ENUM_PRODUCT_STATUS;
    product_issues?: ComponentAtomsProductIssueInput;
    quantity_available_percent?: number;
    discount_percent?: number;
    price_original?: number;
    scrape_batch_uid?: string;
    tags?: Array<string | null>;
    deal_quantity_available_percent?: number;
    offer_category?: ENUM_PRODUCT_OFFER_CATEGORY;
    deal_type?: string;
    deal_expiry?: Long;
    title?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editProductInput {
    position?: number;
    price?: number;
    clicks_count?: number;
    image?: string;
    region?: string;
    source?: string;
    url_list?: Array<editComponentAtomsUrlWithTypeInput | null>;
    details_html?: string;
    attrs_rating?: Array<editComponentAtomsProductAttrRatingInput | null>;
    final_rating?: number;
    amazon_url?: string;
    product_changes?: Array<string | null>;
    release_date?: DateTime;
    admin_user?: string;
    category_temp?: number;
    category?: string;
    status?: ENUM_PRODUCT_STATUS;
    product_issues?: editComponentAtomsProductIssueInput;
    quantity_available_percent?: number;
    discount_percent?: number;
    price_original?: number;
    scrape_batch_uid?: string;
    tags?: Array<string | null>;
    deal_quantity_available_percent?: number;
    offer_category?: ENUM_PRODUCT_OFFER_CATEGORY;
    deal_type?: string;
    deal_expiry?: Long;
    title?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface createProductInput {
    data?: ProductInput;
  }
  
  export interface createProductPayload {
    product?: Product;
  }
  
  export interface updateProductInput {
    where?: InputID;
    data?: editProductInput;
  }
  
  export interface updateProductPayload {
    product?: Product;
  }
  
  export interface deleteProductInput {
    where?: InputID;
  }
  
  export interface deleteProductPayload {
    product?: Product;
  }
  
  export interface Region {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    name: string;
    code: string;
    currency?: Currency;
    sources?: Array<Source | null>;
    categories?: Array<Category | null>;
    products?: Array<Product | null>;
  }
  
  export interface RegionConnection {
    values?: Array<Region | null>;
    groupBy?: RegionGroupBy;
    aggregate?: RegionAggregator;
  }
  
  export interface RegionAggregator {
    count?: number;
    totalCount?: number;
  }
  
  export interface RegionGroupBy {
    id?: Array<RegionConnectionId | null>;
    created_at?: Array<RegionConnectionCreated_at | null>;
    updated_at?: Array<RegionConnectionUpdated_at | null>;
    name?: Array<RegionConnectionName | null>;
    code?: Array<RegionConnectionCode | null>;
    currency?: Array<RegionConnectionCurrency | null>;
  }
  
  export interface RegionConnectionId {
    key?: string;
    connection?: RegionConnection;
  }
  
  export interface RegionConnectionCreated_at {
    key?: DateTime;
    connection?: RegionConnection;
  }
  
  export interface RegionConnectionUpdated_at {
    key?: DateTime;
    connection?: RegionConnection;
  }
  
  export interface RegionConnectionName {
    key?: string;
    connection?: RegionConnection;
  }
  
  export interface RegionConnectionCode {
    key?: string;
    connection?: RegionConnection;
  }
  
  export interface RegionConnectionCurrency {
    key?: string;
    connection?: RegionConnection;
  }
  
  export interface RegionInput {
    name: string;
    sources?: Array<string | null>;
    categories?: Array<string | null>;
    code: string;
    products?: Array<string | null>;
    currency?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editRegionInput {
    name?: string;
    sources?: Array<string | null>;
    categories?: Array<string | null>;
    code?: string;
    products?: Array<string | null>;
    currency?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface createRegionInput {
    data?: RegionInput;
  }
  
  export interface createRegionPayload {
    region?: Region;
  }
  
  export interface updateRegionInput {
    where?: InputID;
    data?: editRegionInput;
  }
  
  export interface updateRegionPayload {
    region?: Region;
  }
  
  export interface deleteRegionInput {
    where?: InputID;
  }
  
  export interface deleteRegionPayload {
    region?: Region;
  }
  
  export interface SocialNetwork {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    social_network?: Array<ComponentAtomsSocialNetwork | null>;
    published_at?: DateTime;
  }
  
  export interface SocialNetworkInput {
    social_network?: Array<ComponentAtomsSocialNetworkInput | null>;
    published_at?: DateTime;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editSocialNetworkInput {
    social_network?: Array<editComponentAtomsSocialNetworkInput | null>;
    published_at?: DateTime;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface updateSocialNetworkInput {
    data?: editSocialNetworkInput;
  }
  
  export interface updateSocialNetworkPayload {
    socialNetwork?: SocialNetwork;
  }
  
  export interface deleteSocialNetworkPayload {
    socialNetwork?: SocialNetwork;
  }
  
  export interface Source {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    name: string;
    button_logo?: UploadFile;
    regions?: Array<Region | null>;
    categories?: Array<Category | null>;
    products?: Array<Product | null>;
  }
  
  export interface SourceConnection {
    values?: Array<Source | null>;
    groupBy?: SourceGroupBy;
    aggregate?: SourceAggregator;
  }
  
  export interface SourceAggregator {
    count?: number;
    totalCount?: number;
  }
  
  export interface SourceGroupBy {
    id?: Array<SourceConnectionId | null>;
    created_at?: Array<SourceConnectionCreated_at | null>;
    updated_at?: Array<SourceConnectionUpdated_at | null>;
    name?: Array<SourceConnectionName | null>;
    button_logo?: Array<SourceConnectionButton_logo | null>;
  }
  
  export interface SourceConnectionId {
    key?: string;
    connection?: SourceConnection;
  }
  
  export interface SourceConnectionCreated_at {
    key?: DateTime;
    connection?: SourceConnection;
  }
  
  export interface SourceConnectionUpdated_at {
    key?: DateTime;
    connection?: SourceConnection;
  }
  
  export interface SourceConnectionName {
    key?: string;
    connection?: SourceConnection;
  }
  
  export interface SourceConnectionButton_logo {
    key?: string;
    connection?: SourceConnection;
  }
  
  export interface SourceInput {
    name: string;
    regions?: Array<string | null>;
    categories?: Array<string | null>;
    products?: Array<string | null>;
    button_logo?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editSourceInput {
    name?: string;
    regions?: Array<string | null>;
    categories?: Array<string | null>;
    products?: Array<string | null>;
    button_logo?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface createSourceInput {
    data?: SourceInput;
  }
  
  export interface createSourcePayload {
    source?: Source;
  }
  
  export interface updateSourceInput {
    where?: InputID;
    data?: editSourceInput;
  }
  
  export interface updateSourcePayload {
    source?: Source;
  }
  
  export interface deleteSourceInput {
    where?: InputID;
  }
  
  export interface deleteSourcePayload {
    source?: Source;
  }
  
  export interface Tag {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    slug?: string;
    label?: Array<ComponentAtomsTranslateableLabel | null>;
    language?: Language;
    products?: Array<Product | null>;
  }
  
  export interface TagConnection {
    values?: Array<Tag | null>;
    groupBy?: TagGroupBy;
    aggregate?: TagAggregator;
  }
  
  export interface TagAggregator {
    count?: number;
    totalCount?: number;
  }
  
  export interface TagGroupBy {
    id?: Array<TagConnectionId | null>;
    created_at?: Array<TagConnectionCreated_at | null>;
    updated_at?: Array<TagConnectionUpdated_at | null>;
    slug?: Array<TagConnectionSlug | null>;
    language?: Array<TagConnectionLanguage | null>;
  }
  
  export interface TagConnectionId {
    key?: string;
    connection?: TagConnection;
  }
  
  export interface TagConnectionCreated_at {
    key?: DateTime;
    connection?: TagConnection;
  }
  
  export interface TagConnectionUpdated_at {
    key?: DateTime;
    connection?: TagConnection;
  }
  
  export interface TagConnectionSlug {
    key?: string;
    connection?: TagConnection;
  }
  
  export interface TagConnectionLanguage {
    key?: string;
    connection?: TagConnection;
  }
  
  export interface TagInput {
    slug?: string;
    label?: Array<ComponentAtomsTranslateableLabelInput | null>;
    products?: Array<string | null>;
    language?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editTagInput {
    slug?: string;
    label?: Array<editComponentAtomsTranslateableLabelInput | null>;
    products?: Array<string | null>;
    language?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface createTagInput {
    data?: TagInput;
  }
  
  export interface createTagPayload {
    tag?: Tag;
  }
  
  export interface updateTagInput {
    where?: InputID;
    data?: editTagInput;
  }
  
  export interface updateTagPayload {
    tag?: Tag;
  }
  
  export interface deleteTagInput {
    where?: InputID;
  }
  
  export interface deleteTagPayload {
    tag?: Tag;
  }
  
  export interface UploadFile {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    name: string;
    alternativeText?: string;
    caption?: string;
    width?: number;
    height?: number;
    formats?: JSON;
    hash: string;
    ext?: string;
    mime: string;
    size: number;
    url: string;
    previewUrl?: string;
    provider: string;
    provider_metadata?: JSON;
    related?: Array<Morph | null>;
  }
  
  export interface UploadFileConnection {
    values?: Array<UploadFile | null>;
    groupBy?: UploadFileGroupBy;
    aggregate?: UploadFileAggregator;
  }
  
  export interface UploadFileAggregator {
    count?: number;
    totalCount?: number;
    sum?: UploadFileAggregatorSum;
    avg?: UploadFileAggregatorAvg;
    min?: UploadFileAggregatorMin;
    max?: UploadFileAggregatorMax;
  }
  
  export interface UploadFileAggregatorSum {
    width?: number;
    height?: number;
    size?: number;
  }
  
  export interface UploadFileAggregatorAvg {
    width?: number;
    height?: number;
    size?: number;
  }
  
  export interface UploadFileAggregatorMin {
    width?: number;
    height?: number;
    size?: number;
  }
  
  export interface UploadFileAggregatorMax {
    width?: number;
    height?: number;
    size?: number;
  }
  
  export interface UploadFileGroupBy {
    id?: Array<UploadFileConnectionId | null>;
    created_at?: Array<UploadFileConnectionCreated_at | null>;
    updated_at?: Array<UploadFileConnectionUpdated_at | null>;
    name?: Array<UploadFileConnectionName | null>;
    alternativeText?: Array<UploadFileConnectionAlternativeText | null>;
    caption?: Array<UploadFileConnectionCaption | null>;
    width?: Array<UploadFileConnectionWidth | null>;
    height?: Array<UploadFileConnectionHeight | null>;
    formats?: Array<UploadFileConnectionFormats | null>;
    hash?: Array<UploadFileConnectionHash | null>;
    ext?: Array<UploadFileConnectionExt | null>;
    mime?: Array<UploadFileConnectionMime | null>;
    size?: Array<UploadFileConnectionSize | null>;
    url?: Array<UploadFileConnectionUrl | null>;
    previewUrl?: Array<UploadFileConnectionPreviewUrl | null>;
    provider?: Array<UploadFileConnectionProvider | null>;
    provider_metadata?: Array<UploadFileConnectionProvider_metadata | null>;
  }
  
  export interface UploadFileConnectionId {
    key?: string;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionCreated_at {
    key?: DateTime;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionUpdated_at {
    key?: DateTime;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionName {
    key?: string;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionAlternativeText {
    key?: string;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionCaption {
    key?: string;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionWidth {
    key?: number;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionHeight {
    key?: number;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionFormats {
    key?: JSON;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionHash {
    key?: string;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionExt {
    key?: string;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionMime {
    key?: string;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionSize {
    key?: number;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionUrl {
    key?: string;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionPreviewUrl {
    key?: string;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionProvider {
    key?: string;
    connection?: UploadFileConnection;
  }
  
  export interface UploadFileConnectionProvider_metadata {
    key?: JSON;
    connection?: UploadFileConnection;
  }
  
  export interface FileInput {
    name: string;
    alternativeText?: string;
    caption?: string;
    width?: number;
    height?: number;
    formats?: JSON;
    hash: string;
    ext?: string;
    mime: string;
    size: number;
    url: string;
    previewUrl?: string;
    provider: string;
    provider_metadata?: JSON;
    related?: Array<string | null>;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editFileInput {
    name?: string;
    alternativeText?: string;
    caption?: string;
    width?: number;
    height?: number;
    formats?: JSON;
    hash?: string;
    ext?: string;
    mime?: string;
    size?: number;
    url?: string;
    previewUrl?: string;
    provider?: string;
    provider_metadata?: JSON;
    related?: Array<string | null>;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface deleteFileInput {
    where?: InputID;
  }
  
  export interface deleteFilePayload {
    file?: UploadFile;
  }
  
  export interface UsersPermissionsPermission {
    id: string;
    type: string;
    controller: string;
    action: string;
    enabled: boolean;
    policy?: string;
    role?: UsersPermissionsRole;
  }
  
  export interface UsersPermissionsRole {
    id: string;
    name: string;
    description?: string;
    type?: string;
    permissions?: Array<UsersPermissionsPermission | null>;
    users?: Array<UsersPermissionsUser | null>;
  }
  
  export interface UsersPermissionsRoleConnection {
    values?: Array<UsersPermissionsRole | null>;
    groupBy?: UsersPermissionsRoleGroupBy;
    aggregate?: UsersPermissionsRoleAggregator;
  }
  
  export interface UsersPermissionsRoleAggregator {
    count?: number;
    totalCount?: number;
  }
  
  export interface UsersPermissionsRoleGroupBy {
    id?: Array<UsersPermissionsRoleConnectionId | null>;
    name?: Array<UsersPermissionsRoleConnectionName | null>;
    description?: Array<UsersPermissionsRoleConnectionDescription | null>;
    type?: Array<UsersPermissionsRoleConnectionType | null>;
  }
  
  export interface UsersPermissionsRoleConnectionId {
    key?: string;
    connection?: UsersPermissionsRoleConnection;
  }
  
  export interface UsersPermissionsRoleConnectionName {
    key?: string;
    connection?: UsersPermissionsRoleConnection;
  }
  
  export interface UsersPermissionsRoleConnectionDescription {
    key?: string;
    connection?: UsersPermissionsRoleConnection;
  }
  
  export interface UsersPermissionsRoleConnectionType {
    key?: string;
    connection?: UsersPermissionsRoleConnection;
  }
  
  export interface RoleInput {
    name: string;
    description?: string;
    type?: string;
    permissions?: Array<string | null>;
    users?: Array<string | null>;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editRoleInput {
    name?: string;
    description?: string;
    type?: string;
    permissions?: Array<string | null>;
    users?: Array<string | null>;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface createRoleInput {
    data?: RoleInput;
  }
  
  export interface createRolePayload {
    role?: UsersPermissionsRole;
  }
  
  export interface updateRoleInput {
    where?: InputID;
    data?: editRoleInput;
  }
  
  export interface updateRolePayload {
    role?: UsersPermissionsRole;
  }
  
  export interface deleteRoleInput {
    where?: InputID;
  }
  
  export interface deleteRolePayload {
    role?: UsersPermissionsRole;
  }
  
  export interface UsersPermissionsUser {
    id: string;
    created_at: DateTime;
    updated_at: DateTime;
    username: string;
    email: string;
    provider?: string;
    confirmed?: boolean;
    blocked?: boolean;
    role?: UsersPermissionsRole;
    photo?: UploadFile;
    first_name?: string;
    last_name?: string;
    nickname?: string;
    full_name_preview?: string;
  }
  
  export interface UsersPermissionsUserConnection {
    values?: Array<UsersPermissionsUser | null>;
    groupBy?: UsersPermissionsUserGroupBy;
    aggregate?: UsersPermissionsUserAggregator;
  }
  
  export interface UsersPermissionsUserAggregator {
    count?: number;
    totalCount?: number;
  }
  
  export interface UsersPermissionsUserGroupBy {
    id?: Array<UsersPermissionsUserConnectionId | null>;
    created_at?: Array<UsersPermissionsUserConnectionCreated_at | null>;
    updated_at?: Array<UsersPermissionsUserConnectionUpdated_at | null>;
    username?: Array<UsersPermissionsUserConnectionUsername | null>;
    email?: Array<UsersPermissionsUserConnectionEmail | null>;
    provider?: Array<UsersPermissionsUserConnectionProvider | null>;
    confirmed?: Array<UsersPermissionsUserConnectionConfirmed | null>;
    blocked?: Array<UsersPermissionsUserConnectionBlocked | null>;
    role?: Array<UsersPermissionsUserConnectionRole | null>;
    photo?: Array<UsersPermissionsUserConnectionPhoto | null>;
    first_name?: Array<UsersPermissionsUserConnectionFirst_name | null>;
    last_name?: Array<UsersPermissionsUserConnectionLast_name | null>;
    nickname?: Array<UsersPermissionsUserConnectionNickname | null>;
    full_name_preview?: Array<UsersPermissionsUserConnectionFull_name_preview | null>;
  }
  
  export interface UsersPermissionsUserConnectionId {
    key?: string;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionCreated_at {
    key?: DateTime;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionUpdated_at {
    key?: DateTime;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionUsername {
    key?: string;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionEmail {
    key?: string;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionProvider {
    key?: string;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionConfirmed {
    key?: boolean;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionBlocked {
    key?: boolean;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionRole {
    key?: string;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionPhoto {
    key?: string;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionFirst_name {
    key?: string;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionLast_name {
    key?: string;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionNickname {
    key?: string;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UsersPermissionsUserConnectionFull_name_preview {
    key?: string;
    connection?: UsersPermissionsUserConnection;
  }
  
  export interface UserInput {
    username: string;
    email: string;
    provider?: string;
    password?: string;
    resetPasswordToken?: string;
    confirmationToken?: string;
    confirmed?: boolean;
    blocked?: boolean;
    role?: string;
    photo?: string;
    first_name?: string;
    last_name?: string;
    nickname?: string;
    full_name_preview?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface editUserInput {
    username?: string;
    email?: string;
    provider?: string;
    password?: string;
    resetPasswordToken?: string;
    confirmationToken?: string;
    confirmed?: boolean;
    blocked?: boolean;
    role?: string;
    photo?: string;
    first_name?: string;
    last_name?: string;
    nickname?: string;
    full_name_preview?: string;
    created_by?: string;
    updated_by?: string;
  }
  
  export interface createUserInput {
    data?: UserInput;
  }
  
  export interface createUserPayload {
    user?: UsersPermissionsUser;
  }
  
  export interface updateUserInput {
    where?: InputID;
    data?: editUserInput;
  }
  
  export interface updateUserPayload {
    user?: UsersPermissionsUser;
  }
  
  export interface deleteUserInput {
    where?: InputID;
  }
  
  export interface deleteUserPayload {
    user?: UsersPermissionsUser;
  }
  
  export interface ComponentAtomsPageLink {
    id: string;
    page?: Page;
    label?: string;
  }
  
  export interface ComponentAtomsPageLinkInput {
    page?: string;
    label?: string;
  }
  
  export interface editComponentAtomsPageLinkInput {
    id?: string;
    page?: string;
    label?: string;
  }
  
  export interface ComponentAtomsProductAttrRating {
    id: string;
    rating?: number;
    product_attribute?: ProductAttribute;
    points?: number;
    factor?: number;
    enabled?: boolean;
    use_custom_formula?: boolean;
    min?: string;
    max?: string;
  }
  
  export interface ComponentAtomsProductAttrRatingInput {
    rating?: number;
    product_attribute?: string;
    points?: number;
    factor?: number;
    enabled?: boolean;
    use_custom_formula?: boolean;
    min?: string;
    max?: string;
  }
  
  export interface editComponentAtomsProductAttrRatingInput {
    id?: string;
    rating?: number;
    product_attribute?: string;
    points?: number;
    factor?: number;
    enabled?: boolean;
    use_custom_formula?: boolean;
    min?: string;
    max?: string;
  }
  
  export interface ComponentAtomsProductAttr {
    id: string;
    factor?: number;
    label_preview?: string;
    product_attribute?: ProductAttribute;
  }
  
  export interface ComponentAtomsProductAttrInput {
    factor?: number;
    label_preview?: string;
    product_attribute?: string;
  }
  
  export interface editComponentAtomsProductAttrInput {
    id?: string;
    factor?: number;
    label_preview?: string;
    product_attribute?: string;
  }
  
  export interface ComponentAtomsProductIssues {
    id: string;
    amazon_link_invalid?: boolean;
    amazon_link_unavailable?: boolean;
    ebay_link_invalid?: boolean;
    aliexpress_link_invalid?: boolean;
    idealo_link_invalid?: boolean;
  }
  
  export interface ComponentAtomsProductIssueInput {
    amazon_link_invalid?: boolean;
    amazon_link_unavailable?: boolean;
    ebay_link_invalid?: boolean;
    aliexpress_link_invalid?: boolean;
    idealo_link_invalid?: boolean;
  }
  
  export interface editComponentAtomsProductIssueInput {
    id?: string;
    amazon_link_invalid?: boolean;
    amazon_link_unavailable?: boolean;
    ebay_link_invalid?: boolean;
    aliexpress_link_invalid?: boolean;
    idealo_link_invalid?: boolean;
  }
  
  export const enum ENUM_COMPONENTATOMSSOCIALNETWORK_TYPE {
    facebook = 'facebook',
    instagram = 'instagram',
    twitter = 'twitter',
    linkedin = 'linkedin',
    youtube = 'youtube'
  }
  
  export interface ComponentAtomsSocialNetwork {
    id: string;
    url: string;
    type: ENUM_COMPONENTATOMSSOCIALNETWORK_TYPE;
  }
  
  export interface ComponentAtomsSocialNetworkInput {
    url: string;
    type: ENUM_COMPONENTATOMSSOCIALNETWORK_TYPE;
  }
  
  export interface editComponentAtomsSocialNetworkInput {
    id?: string;
    url?: string;
    type?: ENUM_COMPONENTATOMSSOCIALNETWORK_TYPE;
  }
  
  export interface ComponentAtomsTranslateableLabel {
    id: string;
    label?: string;
    language?: Language;
  }
  
  export interface ComponentAtomsTranslateableLabelInput {
    label?: string;
    language?: string;
  }
  
  export interface editComponentAtomsTranslateableLabelInput {
    id?: string;
    label?: string;
    language?: string;
  }
  
  export interface ComponentAtomsUrlWithType {
    id: string;
    url: string;
    source?: Source;
    region?: Region;
    is_base?: boolean;
    price?: number;
    price_original?: number;
    discount_percent?: number;
    quantity_available_percent?: number;
  }
  
  export interface ComponentAtomsUrlWithTypeInput {
    url: string;
    source?: string;
    region?: string;
    is_base?: boolean;
    price?: number;
    price_original?: number;
    discount_percent?: number;
    quantity_available_percent?: number;
  }
  
  export interface editComponentAtomsUrlWithTypeInput {
    id?: string;
    url?: string;
    source?: string;
    region?: string;
    is_base?: boolean;
    price?: number;
    price_original?: number;
    discount_percent?: number;
    quantity_available_percent?: number;
  }
  
  export interface ComponentComponentsNaturalList {
    id: string;
  }
  
  export interface ComponentComponentsNaturalListInput {
    _?: string;
  }
  
  export interface editComponentComponentsNaturalListInput {
    id?: string;
  }
  
  export interface ComponentEntryFieldsFooterFields {
    id: string;
    language?: Language;
    footer_links?: Array<ComponentAtomsPageLink | null>;
    footer_text?: string;
    footer_footnote?: string;
  }
  
  export interface ComponentEntryFieldsFooterFieldInput {
    language?: string;
    footer_links?: Array<ComponentAtomsPageLinkInput | null>;
    footer_text?: string;
    footer_footnote?: string;
    language_preview?: string;
  }
  
  export interface editComponentEntryFieldsFooterFieldInput {
    id?: string;
    language?: string;
    footer_links?: Array<editComponentAtomsPageLinkInput | null>;
    footer_text?: string;
    footer_footnote?: string;
    language_preview?: string;
  }
  
  export interface ComponentEntryFieldsPageFields {
    id: string;
    language?: Language;
    title: string;
    body?: string;
  }
  
  export interface ComponentEntryFieldsPageFieldInput {
    language?: string;
    title: string;
    body?: string;
  }
  
  export interface editComponentEntryFieldsPageFieldInput {
    id?: string;
    language?: string;
    title?: string;
    body?: string;
  }
  
  export interface ComponentEntryFieldsSourceSelectors {
    id: string;
    product_detail: string;
  }
  
  export interface ComponentEntryFieldsSourceSelectorInput {
    product_detail: string;
  }
  
  export interface editComponentEntryFieldsSourceSelectorInput {
    id?: string;
    product_detail?: string;
  }
  
  export type Morph =
  UsersPermissionsMe |
  UsersPermissionsMeRole |
  UsersPermissionsLoginPayload |
  UserPermissionsPasswordPayload |
  CategoryWithChild |
  DealTypeLabelTranslation |
  DealTypeNavIcon |
  DealType |
  ProductsByDeal |
  TaskLogEntry |
  Task |
  ScheduledTask |
  ScheduledTaskPayload |
  ScheduledTaskListPayload |
  OffersCategoryLabelTranslation |
  OffersCategory |
  EnvType |
  PageData |
  ProductCategory |
  ProductsListPayload |
  NaturalList |
  ProductClicksDetails |
  FixedProductsPayload |
  GiftIdeasPayload |
  Category |
  CategoryConnection |
  CategoryAggregator |
  CategoryAggregatorSum |
  CategoryAggregatorAvg |
  CategoryAggregatorMin |
  CategoryAggregatorMax |
  CategoryGroupBy |
  CategoryConnectionId |
  CategoryConnectionCreated_at |
  CategoryConnectionUpdated_at |
  CategoryConnectionSlug |
  CategoryConnectionUrl |
  CategoryConnectionParent |
  CategoryConnectionLanguage |
  CategoryConnectionIcon |
  CategoryConnectionOrder |
  CategoryConnectionLabel_preview |
  CategoryConnectionRegion |
  CategoryConnectionSource |
  CategoryConnectionLabel_translations_json |
  CategoryConnectionChildren_count |
  CategoryConnectionProducts_count |
  CategoryConnectionDeal_category |
  createCategoryPayload |
  updateCategoryPayload |
  deleteCategoryPayload |
  ContactDetails |
  updateContactDetailPayload |
  deleteContactDetailPayload |
  Currency |
  CurrencyConnection |
  CurrencyAggregator |
  CurrencyGroupBy |
  CurrencyConnectionId |
  CurrencyConnectionCreated_at |
  CurrencyConnectionUpdated_at |
  CurrencyConnectionName |
  CurrencyConnectionCode |
  CurrencyConnectionSymbol |
  CurrencyConnectionLabel_preview |
  createCurrencyPayload |
  updateCurrencyPayload |
  deleteCurrencyPayload |
  FooterSettings |
  updateFooterSettingPayload |
  deleteFooterSettingPayload |
  Language |
  LanguageConnection |
  LanguageAggregator |
  LanguageGroupBy |
  LanguageConnectionId |
  LanguageConnectionCreated_at |
  LanguageConnectionUpdated_at |
  LanguageConnectionCode |
  LanguageConnectionName |
  LanguageConnectionCountry_flag |
  createLanguagePayload |
  updateLanguagePayload |
  deleteLanguagePayload |
  Page |
  PageConnection |
  PageAggregator |
  PageGroupBy |
  PageConnectionId |
  PageConnectionCreated_at |
  PageConnectionUpdated_at |
  PageConnectionSlug |
  PageConnectionLanguage |
  PageConnectionPublished_at |
  createPagePayload |
  updatePagePayload |
  deletePagePayload |
  ProductAttribute |
  ProductAttributeConnection |
  ProductAttributeAggregator |
  ProductAttributeGroupBy |
  ProductAttributeConnectionId |
  ProductAttributeConnectionCreated_at |
  ProductAttributeConnectionUpdated_at |
  ProductAttributeConnectionName |
  ProductAttributeConnectionCode |
  ProductAttributeConnectionIs_common |
  ProductAttributeConnectionData_type |
  ProductAttributeConnectionCustom_formula |
  ProductAttributeConnectionDisable_min |
  ProductAttributeConnectionDisable_max |
  ProductAttributeConnectionMin_label |
  ProductAttributeConnectionMax_label |
  ProductAttributeConnectionProduct_prop |
  createProductAttributePayload |
  updateProductAttributePayload |
  deleteProductAttributePayload |
  ProductChange |
  ProductChangeConnection |
  ProductChangeAggregator |
  ProductChangeGroupBy |
  ProductChangeConnectionId |
  ProductChangeConnectionCreated_at |
  ProductChangeConnectionUpdated_at |
  ProductChangeConnectionState |
  ProductChangeConnectionAdmin_user |
  ProductChangeConnectionDate_time |
  ProductChangeConnectionProduct |
  ProductChangeConnectionChange_type |
  createProductChangePayload |
  updateProductChangePayload |
  deleteProductChangePayload |
  Product |
  ProductConnection |
  ProductAggregator |
  ProductAggregatorSum |
  ProductAggregatorAvg |
  ProductAggregatorMin |
  ProductAggregatorMax |
  ProductGroupBy |
  ProductConnectionId |
  ProductConnectionCreated_at |
  ProductConnectionUpdated_at |
  ProductConnectionPosition |
  ProductConnectionPrice |
  ProductConnectionClicks_count |
  ProductConnectionImage |
  ProductConnectionRegion |
  ProductConnectionSource |
  ProductConnectionDetails_html |
  ProductConnectionFinal_rating |
  ProductConnectionAmazon_url |
  ProductConnectionRelease_date |
  ProductConnectionAdmin_user |
  ProductConnectionCategory_temp |
  ProductConnectionCategory |
  ProductConnectionStatus |
  ProductConnectionProduct_issues |
  ProductConnectionQuantity_available_percent |
  ProductConnectionDiscount_percent |
  ProductConnectionPrice_original |
  ProductConnectionScrape_batch_uid |
  ProductConnectionDeal_quantity_available_percent |
  ProductConnectionOffer_category |
  ProductConnectionDeal_type |
  ProductConnectionDeal_expiry |
  ProductConnectionTitle |
  createProductPayload |
  updateProductPayload |
  deleteProductPayload |
  Region |
  RegionConnection |
  RegionAggregator |
  RegionGroupBy |
  RegionConnectionId |
  RegionConnectionCreated_at |
  RegionConnectionUpdated_at |
  RegionConnectionName |
  RegionConnectionCode |
  RegionConnectionCurrency |
  createRegionPayload |
  updateRegionPayload |
  deleteRegionPayload |
  SocialNetwork |
  updateSocialNetworkPayload |
  deleteSocialNetworkPayload |
  Source |
  SourceConnection |
  SourceAggregator |
  SourceGroupBy |
  SourceConnectionId |
  SourceConnectionCreated_at |
  SourceConnectionUpdated_at |
  SourceConnectionName |
  SourceConnectionButton_logo |
  createSourcePayload |
  updateSourcePayload |
  deleteSourcePayload |
  Tag |
  TagConnection |
  TagAggregator |
  TagGroupBy |
  TagConnectionId |
  TagConnectionCreated_at |
  TagConnectionUpdated_at |
  TagConnectionSlug |
  TagConnectionLanguage |
  createTagPayload |
  updateTagPayload |
  deleteTagPayload |
  UploadFile |
  UploadFileConnection |
  UploadFileAggregator |
  UploadFileAggregatorSum |
  UploadFileAggregatorAvg |
  UploadFileAggregatorMin |
  UploadFileAggregatorMax |
  UploadFileGroupBy |
  UploadFileConnectionId |
  UploadFileConnectionCreated_at |
  UploadFileConnectionUpdated_at |
  UploadFileConnectionName |
  UploadFileConnectionAlternativeText |
  UploadFileConnectionCaption |
  UploadFileConnectionWidth |
  UploadFileConnectionHeight |
  UploadFileConnectionFormats |
  UploadFileConnectionHash |
  UploadFileConnectionExt |
  UploadFileConnectionMime |
  UploadFileConnectionSize |
  UploadFileConnectionUrl |
  UploadFileConnectionPreviewUrl |
  UploadFileConnectionProvider |
  UploadFileConnectionProvider_metadata |
  deleteFilePayload |
  UsersPermissionsPermission |
  UsersPermissionsRole |
  UsersPermissionsRoleConnection |
  UsersPermissionsRoleAggregator |
  UsersPermissionsRoleGroupBy |
  UsersPermissionsRoleConnectionId |
  UsersPermissionsRoleConnectionName |
  UsersPermissionsRoleConnectionDescription |
  UsersPermissionsRoleConnectionType |
  createRolePayload |
  updateRolePayload |
  deleteRolePayload |
  UsersPermissionsUser |
  UsersPermissionsUserConnection |
  UsersPermissionsUserAggregator |
  UsersPermissionsUserGroupBy |
  UsersPermissionsUserConnectionId |
  UsersPermissionsUserConnectionCreated_at |
  UsersPermissionsUserConnectionUpdated_at |
  UsersPermissionsUserConnectionUsername |
  UsersPermissionsUserConnectionEmail |
  UsersPermissionsUserConnectionProvider |
  UsersPermissionsUserConnectionConfirmed |
  UsersPermissionsUserConnectionBlocked |
  UsersPermissionsUserConnectionRole |
  UsersPermissionsUserConnectionPhoto |
  UsersPermissionsUserConnectionFirst_name |
  UsersPermissionsUserConnectionLast_name |
  UsersPermissionsUserConnectionNickname |
  UsersPermissionsUserConnectionFull_name_preview |
  createUserPayload |
  updateUserPayload |
  deleteUserPayload |
  ComponentAtomsPageLink |
  ComponentAtomsProductAttrRating |
  ComponentAtomsProductAttr |
  ComponentAtomsProductIssues |
  ComponentAtomsSocialNetwork |
  ComponentAtomsTranslateableLabel |
  ComponentAtomsUrlWithType |
  ComponentComponentsNaturalList |
  ComponentEntryFieldsFooterFields |
  ComponentEntryFieldsPageFields |
  ComponentEntryFieldsSourceSelectors;
  
  /** Use this to resolve union type Morph */
  export type PossibleMorphTypeNames =
  'UsersPermissionsMe' |
  'UsersPermissionsMeRole' |
  'UsersPermissionsLoginPayload' |
  'UserPermissionsPasswordPayload' |
  'CategoryWithChild' |
  'DealTypeLabelTranslation' |
  'DealTypeNavIcon' |
  'DealType' |
  'ProductsByDeal' |
  'TaskLogEntry' |
  'Task' |
  'ScheduledTask' |
  'ScheduledTaskPayload' |
  'ScheduledTaskListPayload' |
  'OffersCategoryLabelTranslation' |
  'OffersCategory' |
  'EnvType' |
  'PageData' |
  'ProductCategory' |
  'ProductsListPayload' |
  'NaturalList' |
  'ProductClicksDetails' |
  'FixedProductsPayload' |
  'GiftIdeasPayload' |
  'Category' |
  'CategoryConnection' |
  'CategoryAggregator' |
  'CategoryAggregatorSum' |
  'CategoryAggregatorAvg' |
  'CategoryAggregatorMin' |
  'CategoryAggregatorMax' |
  'CategoryGroupBy' |
  'CategoryConnectionId' |
  'CategoryConnectionCreated_at' |
  'CategoryConnectionUpdated_at' |
  'CategoryConnectionSlug' |
  'CategoryConnectionUrl' |
  'CategoryConnectionParent' |
  'CategoryConnectionLanguage' |
  'CategoryConnectionIcon' |
  'CategoryConnectionOrder' |
  'CategoryConnectionLabel_preview' |
  'CategoryConnectionRegion' |
  'CategoryConnectionSource' |
  'CategoryConnectionLabel_translations_json' |
  'CategoryConnectionChildren_count' |
  'CategoryConnectionProducts_count' |
  'CategoryConnectionDeal_category' |
  'createCategoryPayload' |
  'updateCategoryPayload' |
  'deleteCategoryPayload' |
  'ContactDetails' |
  'updateContactDetailPayload' |
  'deleteContactDetailPayload' |
  'Currency' |
  'CurrencyConnection' |
  'CurrencyAggregator' |
  'CurrencyGroupBy' |
  'CurrencyConnectionId' |
  'CurrencyConnectionCreated_at' |
  'CurrencyConnectionUpdated_at' |
  'CurrencyConnectionName' |
  'CurrencyConnectionCode' |
  'CurrencyConnectionSymbol' |
  'CurrencyConnectionLabel_preview' |
  'createCurrencyPayload' |
  'updateCurrencyPayload' |
  'deleteCurrencyPayload' |
  'FooterSettings' |
  'updateFooterSettingPayload' |
  'deleteFooterSettingPayload' |
  'Language' |
  'LanguageConnection' |
  'LanguageAggregator' |
  'LanguageGroupBy' |
  'LanguageConnectionId' |
  'LanguageConnectionCreated_at' |
  'LanguageConnectionUpdated_at' |
  'LanguageConnectionCode' |
  'LanguageConnectionName' |
  'LanguageConnectionCountry_flag' |
  'createLanguagePayload' |
  'updateLanguagePayload' |
  'deleteLanguagePayload' |
  'Page' |
  'PageConnection' |
  'PageAggregator' |
  'PageGroupBy' |
  'PageConnectionId' |
  'PageConnectionCreated_at' |
  'PageConnectionUpdated_at' |
  'PageConnectionSlug' |
  'PageConnectionLanguage' |
  'PageConnectionPublished_at' |
  'createPagePayload' |
  'updatePagePayload' |
  'deletePagePayload' |
  'ProductAttribute' |
  'ProductAttributeConnection' |
  'ProductAttributeAggregator' |
  'ProductAttributeGroupBy' |
  'ProductAttributeConnectionId' |
  'ProductAttributeConnectionCreated_at' |
  'ProductAttributeConnectionUpdated_at' |
  'ProductAttributeConnectionName' |
  'ProductAttributeConnectionCode' |
  'ProductAttributeConnectionIs_common' |
  'ProductAttributeConnectionData_type' |
  'ProductAttributeConnectionCustom_formula' |
  'ProductAttributeConnectionDisable_min' |
  'ProductAttributeConnectionDisable_max' |
  'ProductAttributeConnectionMin_label' |
  'ProductAttributeConnectionMax_label' |
  'ProductAttributeConnectionProduct_prop' |
  'createProductAttributePayload' |
  'updateProductAttributePayload' |
  'deleteProductAttributePayload' |
  'ProductChange' |
  'ProductChangeConnection' |
  'ProductChangeAggregator' |
  'ProductChangeGroupBy' |
  'ProductChangeConnectionId' |
  'ProductChangeConnectionCreated_at' |
  'ProductChangeConnectionUpdated_at' |
  'ProductChangeConnectionState' |
  'ProductChangeConnectionAdmin_user' |
  'ProductChangeConnectionDate_time' |
  'ProductChangeConnectionProduct' |
  'ProductChangeConnectionChange_type' |
  'createProductChangePayload' |
  'updateProductChangePayload' |
  'deleteProductChangePayload' |
  'Product' |
  'ProductConnection' |
  'ProductAggregator' |
  'ProductAggregatorSum' |
  'ProductAggregatorAvg' |
  'ProductAggregatorMin' |
  'ProductAggregatorMax' |
  'ProductGroupBy' |
  'ProductConnectionId' |
  'ProductConnectionCreated_at' |
  'ProductConnectionUpdated_at' |
  'ProductConnectionPosition' |
  'ProductConnectionPrice' |
  'ProductConnectionClicks_count' |
  'ProductConnectionImage' |
  'ProductConnectionRegion' |
  'ProductConnectionSource' |
  'ProductConnectionDetails_html' |
  'ProductConnectionFinal_rating' |
  'ProductConnectionAmazon_url' |
  'ProductConnectionRelease_date' |
  'ProductConnectionAdmin_user' |
  'ProductConnectionCategory_temp' |
  'ProductConnectionCategory' |
  'ProductConnectionStatus' |
  'ProductConnectionProduct_issues' |
  'ProductConnectionQuantity_available_percent' |
  'ProductConnectionDiscount_percent' |
  'ProductConnectionPrice_original' |
  'ProductConnectionScrape_batch_uid' |
  'ProductConnectionDeal_quantity_available_percent' |
  'ProductConnectionOffer_category' |
  'ProductConnectionDeal_type' |
  'ProductConnectionDeal_expiry' |
  'ProductConnectionTitle' |
  'createProductPayload' |
  'updateProductPayload' |
  'deleteProductPayload' |
  'Region' |
  'RegionConnection' |
  'RegionAggregator' |
  'RegionGroupBy' |
  'RegionConnectionId' |
  'RegionConnectionCreated_at' |
  'RegionConnectionUpdated_at' |
  'RegionConnectionName' |
  'RegionConnectionCode' |
  'RegionConnectionCurrency' |
  'createRegionPayload' |
  'updateRegionPayload' |
  'deleteRegionPayload' |
  'SocialNetwork' |
  'updateSocialNetworkPayload' |
  'deleteSocialNetworkPayload' |
  'Source' |
  'SourceConnection' |
  'SourceAggregator' |
  'SourceGroupBy' |
  'SourceConnectionId' |
  'SourceConnectionCreated_at' |
  'SourceConnectionUpdated_at' |
  'SourceConnectionName' |
  'SourceConnectionButton_logo' |
  'createSourcePayload' |
  'updateSourcePayload' |
  'deleteSourcePayload' |
  'Tag' |
  'TagConnection' |
  'TagAggregator' |
  'TagGroupBy' |
  'TagConnectionId' |
  'TagConnectionCreated_at' |
  'TagConnectionUpdated_at' |
  'TagConnectionSlug' |
  'TagConnectionLanguage' |
  'createTagPayload' |
  'updateTagPayload' |
  'deleteTagPayload' |
  'UploadFile' |
  'UploadFileConnection' |
  'UploadFileAggregator' |
  'UploadFileAggregatorSum' |
  'UploadFileAggregatorAvg' |
  'UploadFileAggregatorMin' |
  'UploadFileAggregatorMax' |
  'UploadFileGroupBy' |
  'UploadFileConnectionId' |
  'UploadFileConnectionCreated_at' |
  'UploadFileConnectionUpdated_at' |
  'UploadFileConnectionName' |
  'UploadFileConnectionAlternativeText' |
  'UploadFileConnectionCaption' |
  'UploadFileConnectionWidth' |
  'UploadFileConnectionHeight' |
  'UploadFileConnectionFormats' |
  'UploadFileConnectionHash' |
  'UploadFileConnectionExt' |
  'UploadFileConnectionMime' |
  'UploadFileConnectionSize' |
  'UploadFileConnectionUrl' |
  'UploadFileConnectionPreviewUrl' |
  'UploadFileConnectionProvider' |
  'UploadFileConnectionProvider_metadata' |
  'deleteFilePayload' |
  'UsersPermissionsPermission' |
  'UsersPermissionsRole' |
  'UsersPermissionsRoleConnection' |
  'UsersPermissionsRoleAggregator' |
  'UsersPermissionsRoleGroupBy' |
  'UsersPermissionsRoleConnectionId' |
  'UsersPermissionsRoleConnectionName' |
  'UsersPermissionsRoleConnectionDescription' |
  'UsersPermissionsRoleConnectionType' |
  'createRolePayload' |
  'updateRolePayload' |
  'deleteRolePayload' |
  'UsersPermissionsUser' |
  'UsersPermissionsUserConnection' |
  'UsersPermissionsUserAggregator' |
  'UsersPermissionsUserGroupBy' |
  'UsersPermissionsUserConnectionId' |
  'UsersPermissionsUserConnectionCreated_at' |
  'UsersPermissionsUserConnectionUpdated_at' |
  'UsersPermissionsUserConnectionUsername' |
  'UsersPermissionsUserConnectionEmail' |
  'UsersPermissionsUserConnectionProvider' |
  'UsersPermissionsUserConnectionConfirmed' |
  'UsersPermissionsUserConnectionBlocked' |
  'UsersPermissionsUserConnectionRole' |
  'UsersPermissionsUserConnectionPhoto' |
  'UsersPermissionsUserConnectionFirst_name' |
  'UsersPermissionsUserConnectionLast_name' |
  'UsersPermissionsUserConnectionNickname' |
  'UsersPermissionsUserConnectionFull_name_preview' |
  'createUserPayload' |
  'updateUserPayload' |
  'deleteUserPayload' |
  'ComponentAtomsPageLink' |
  'ComponentAtomsProductAttrRating' |
  'ComponentAtomsProductAttr' |
  'ComponentAtomsProductIssues' |
  'ComponentAtomsSocialNetwork' |
  'ComponentAtomsTranslateableLabel' |
  'ComponentAtomsUrlWithType' |
  'ComponentComponentsNaturalList' |
  'ComponentEntryFieldsFooterFields' |
  'ComponentEntryFieldsPageFields' |
  'ComponentEntryFieldsSourceSelectors';
  
  export interface MorphNameMap {
    Morph: Morph;
    UsersPermissionsMe: UsersPermissionsMe;
    UsersPermissionsMeRole: UsersPermissionsMeRole;
    UsersPermissionsLoginPayload: UsersPermissionsLoginPayload;
    UserPermissionsPasswordPayload: UserPermissionsPasswordPayload;
    CategoryWithChild: CategoryWithChild;
    DealTypeLabelTranslation: DealTypeLabelTranslation;
    DealTypeNavIcon: DealTypeNavIcon;
    DealType: DealType;
    ProductsByDeal: ProductsByDeal;
    TaskLogEntry: TaskLogEntry;
    Task: Task;
    ScheduledTask: ScheduledTask;
    ScheduledTaskPayload: ScheduledTaskPayload;
    ScheduledTaskListPayload: ScheduledTaskListPayload;
    OffersCategoryLabelTranslation: OffersCategoryLabelTranslation;
    OffersCategory: OffersCategory;
    EnvType: EnvType;
    PageData: PageData;
    ProductCategory: ProductCategory;
    ProductsListPayload: ProductsListPayload;
    NaturalList: NaturalList;
    ProductClicksDetails: ProductClicksDetails;
    FixedProductsPayload: FixedProductsPayload;
    GiftIdeasPayload: GiftIdeasPayload;
    Category: Category;
    CategoryConnection: CategoryConnection;
    CategoryAggregator: CategoryAggregator;
    CategoryAggregatorSum: CategoryAggregatorSum;
    CategoryAggregatorAvg: CategoryAggregatorAvg;
    CategoryAggregatorMin: CategoryAggregatorMin;
    CategoryAggregatorMax: CategoryAggregatorMax;
    CategoryGroupBy: CategoryGroupBy;
    CategoryConnectionId: CategoryConnectionId;
    CategoryConnectionCreated_at: CategoryConnectionCreated_at;
    CategoryConnectionUpdated_at: CategoryConnectionUpdated_at;
    CategoryConnectionSlug: CategoryConnectionSlug;
    CategoryConnectionUrl: CategoryConnectionUrl;
    CategoryConnectionParent: CategoryConnectionParent;
    CategoryConnectionLanguage: CategoryConnectionLanguage;
    CategoryConnectionIcon: CategoryConnectionIcon;
    CategoryConnectionOrder: CategoryConnectionOrder;
    CategoryConnectionLabel_preview: CategoryConnectionLabel_preview;
    CategoryConnectionRegion: CategoryConnectionRegion;
    CategoryConnectionSource: CategoryConnectionSource;
    CategoryConnectionLabel_translations_json: CategoryConnectionLabel_translations_json;
    CategoryConnectionChildren_count: CategoryConnectionChildren_count;
    CategoryConnectionProducts_count: CategoryConnectionProducts_count;
    CategoryConnectionDeal_category: CategoryConnectionDeal_category;
    createCategoryPayload: createCategoryPayload;
    updateCategoryPayload: updateCategoryPayload;
    deleteCategoryPayload: deleteCategoryPayload;
    ContactDetails: ContactDetails;
    updateContactDetailPayload: updateContactDetailPayload;
    deleteContactDetailPayload: deleteContactDetailPayload;
    Currency: Currency;
    CurrencyConnection: CurrencyConnection;
    CurrencyAggregator: CurrencyAggregator;
    CurrencyGroupBy: CurrencyGroupBy;
    CurrencyConnectionId: CurrencyConnectionId;
    CurrencyConnectionCreated_at: CurrencyConnectionCreated_at;
    CurrencyConnectionUpdated_at: CurrencyConnectionUpdated_at;
    CurrencyConnectionName: CurrencyConnectionName;
    CurrencyConnectionCode: CurrencyConnectionCode;
    CurrencyConnectionSymbol: CurrencyConnectionSymbol;
    CurrencyConnectionLabel_preview: CurrencyConnectionLabel_preview;
    createCurrencyPayload: createCurrencyPayload;
    updateCurrencyPayload: updateCurrencyPayload;
    deleteCurrencyPayload: deleteCurrencyPayload;
    FooterSettings: FooterSettings;
    updateFooterSettingPayload: updateFooterSettingPayload;
    deleteFooterSettingPayload: deleteFooterSettingPayload;
    Language: Language;
    LanguageConnection: LanguageConnection;
    LanguageAggregator: LanguageAggregator;
    LanguageGroupBy: LanguageGroupBy;
    LanguageConnectionId: LanguageConnectionId;
    LanguageConnectionCreated_at: LanguageConnectionCreated_at;
    LanguageConnectionUpdated_at: LanguageConnectionUpdated_at;
    LanguageConnectionCode: LanguageConnectionCode;
    LanguageConnectionName: LanguageConnectionName;
    LanguageConnectionCountry_flag: LanguageConnectionCountry_flag;
    createLanguagePayload: createLanguagePayload;
    updateLanguagePayload: updateLanguagePayload;
    deleteLanguagePayload: deleteLanguagePayload;
    Page: Page;
    PageConnection: PageConnection;
    PageAggregator: PageAggregator;
    PageGroupBy: PageGroupBy;
    PageConnectionId: PageConnectionId;
    PageConnectionCreated_at: PageConnectionCreated_at;
    PageConnectionUpdated_at: PageConnectionUpdated_at;
    PageConnectionSlug: PageConnectionSlug;
    PageConnectionLanguage: PageConnectionLanguage;
    PageConnectionPublished_at: PageConnectionPublished_at;
    createPagePayload: createPagePayload;
    updatePagePayload: updatePagePayload;
    deletePagePayload: deletePagePayload;
    ProductAttribute: ProductAttribute;
    ProductAttributeConnection: ProductAttributeConnection;
    ProductAttributeAggregator: ProductAttributeAggregator;
    ProductAttributeGroupBy: ProductAttributeGroupBy;
    ProductAttributeConnectionId: ProductAttributeConnectionId;
    ProductAttributeConnectionCreated_at: ProductAttributeConnectionCreated_at;
    ProductAttributeConnectionUpdated_at: ProductAttributeConnectionUpdated_at;
    ProductAttributeConnectionName: ProductAttributeConnectionName;
    ProductAttributeConnectionCode: ProductAttributeConnectionCode;
    ProductAttributeConnectionIs_common: ProductAttributeConnectionIs_common;
    ProductAttributeConnectionData_type: ProductAttributeConnectionData_type;
    ProductAttributeConnectionCustom_formula: ProductAttributeConnectionCustom_formula;
    ProductAttributeConnectionDisable_min: ProductAttributeConnectionDisable_min;
    ProductAttributeConnectionDisable_max: ProductAttributeConnectionDisable_max;
    ProductAttributeConnectionMin_label: ProductAttributeConnectionMin_label;
    ProductAttributeConnectionMax_label: ProductAttributeConnectionMax_label;
    ProductAttributeConnectionProduct_prop: ProductAttributeConnectionProduct_prop;
    createProductAttributePayload: createProductAttributePayload;
    updateProductAttributePayload: updateProductAttributePayload;
    deleteProductAttributePayload: deleteProductAttributePayload;
    ProductChange: ProductChange;
    ProductChangeConnection: ProductChangeConnection;
    ProductChangeAggregator: ProductChangeAggregator;
    ProductChangeGroupBy: ProductChangeGroupBy;
    ProductChangeConnectionId: ProductChangeConnectionId;
    ProductChangeConnectionCreated_at: ProductChangeConnectionCreated_at;
    ProductChangeConnectionUpdated_at: ProductChangeConnectionUpdated_at;
    ProductChangeConnectionState: ProductChangeConnectionState;
    ProductChangeConnectionAdmin_user: ProductChangeConnectionAdmin_user;
    ProductChangeConnectionDate_time: ProductChangeConnectionDate_time;
    ProductChangeConnectionProduct: ProductChangeConnectionProduct;
    ProductChangeConnectionChange_type: ProductChangeConnectionChange_type;
    createProductChangePayload: createProductChangePayload;
    updateProductChangePayload: updateProductChangePayload;
    deleteProductChangePayload: deleteProductChangePayload;
    Product: Product;
    ProductConnection: ProductConnection;
    ProductAggregator: ProductAggregator;
    ProductAggregatorSum: ProductAggregatorSum;
    ProductAggregatorAvg: ProductAggregatorAvg;
    ProductAggregatorMin: ProductAggregatorMin;
    ProductAggregatorMax: ProductAggregatorMax;
    ProductGroupBy: ProductGroupBy;
    ProductConnectionId: ProductConnectionId;
    ProductConnectionCreated_at: ProductConnectionCreated_at;
    ProductConnectionUpdated_at: ProductConnectionUpdated_at;
    ProductConnectionPosition: ProductConnectionPosition;
    ProductConnectionPrice: ProductConnectionPrice;
    ProductConnectionClicks_count: ProductConnectionClicks_count;
    ProductConnectionImage: ProductConnectionImage;
    ProductConnectionRegion: ProductConnectionRegion;
    ProductConnectionSource: ProductConnectionSource;
    ProductConnectionDetails_html: ProductConnectionDetails_html;
    ProductConnectionFinal_rating: ProductConnectionFinal_rating;
    ProductConnectionAmazon_url: ProductConnectionAmazon_url;
    ProductConnectionRelease_date: ProductConnectionRelease_date;
    ProductConnectionAdmin_user: ProductConnectionAdmin_user;
    ProductConnectionCategory_temp: ProductConnectionCategory_temp;
    ProductConnectionCategory: ProductConnectionCategory;
    ProductConnectionStatus: ProductConnectionStatus;
    ProductConnectionProduct_issues: ProductConnectionProduct_issues;
    ProductConnectionQuantity_available_percent: ProductConnectionQuantity_available_percent;
    ProductConnectionDiscount_percent: ProductConnectionDiscount_percent;
    ProductConnectionPrice_original: ProductConnectionPrice_original;
    ProductConnectionScrape_batch_uid: ProductConnectionScrape_batch_uid;
    ProductConnectionDeal_quantity_available_percent: ProductConnectionDeal_quantity_available_percent;
    ProductConnectionOffer_category: ProductConnectionOffer_category;
    ProductConnectionDeal_type: ProductConnectionDeal_type;
    ProductConnectionDeal_expiry: ProductConnectionDeal_expiry;
    ProductConnectionTitle: ProductConnectionTitle;
    createProductPayload: createProductPayload;
    updateProductPayload: updateProductPayload;
    deleteProductPayload: deleteProductPayload;
    Region: Region;
    RegionConnection: RegionConnection;
    RegionAggregator: RegionAggregator;
    RegionGroupBy: RegionGroupBy;
    RegionConnectionId: RegionConnectionId;
    RegionConnectionCreated_at: RegionConnectionCreated_at;
    RegionConnectionUpdated_at: RegionConnectionUpdated_at;
    RegionConnectionName: RegionConnectionName;
    RegionConnectionCode: RegionConnectionCode;
    RegionConnectionCurrency: RegionConnectionCurrency;
    createRegionPayload: createRegionPayload;
    updateRegionPayload: updateRegionPayload;
    deleteRegionPayload: deleteRegionPayload;
    SocialNetwork: SocialNetwork;
    updateSocialNetworkPayload: updateSocialNetworkPayload;
    deleteSocialNetworkPayload: deleteSocialNetworkPayload;
    Source: Source;
    SourceConnection: SourceConnection;
    SourceAggregator: SourceAggregator;
    SourceGroupBy: SourceGroupBy;
    SourceConnectionId: SourceConnectionId;
    SourceConnectionCreated_at: SourceConnectionCreated_at;
    SourceConnectionUpdated_at: SourceConnectionUpdated_at;
    SourceConnectionName: SourceConnectionName;
    SourceConnectionButton_logo: SourceConnectionButton_logo;
    createSourcePayload: createSourcePayload;
    updateSourcePayload: updateSourcePayload;
    deleteSourcePayload: deleteSourcePayload;
    Tag: Tag;
    TagConnection: TagConnection;
    TagAggregator: TagAggregator;
    TagGroupBy: TagGroupBy;
    TagConnectionId: TagConnectionId;
    TagConnectionCreated_at: TagConnectionCreated_at;
    TagConnectionUpdated_at: TagConnectionUpdated_at;
    TagConnectionSlug: TagConnectionSlug;
    TagConnectionLanguage: TagConnectionLanguage;
    createTagPayload: createTagPayload;
    updateTagPayload: updateTagPayload;
    deleteTagPayload: deleteTagPayload;
    UploadFile: UploadFile;
    UploadFileConnection: UploadFileConnection;
    UploadFileAggregator: UploadFileAggregator;
    UploadFileAggregatorSum: UploadFileAggregatorSum;
    UploadFileAggregatorAvg: UploadFileAggregatorAvg;
    UploadFileAggregatorMin: UploadFileAggregatorMin;
    UploadFileAggregatorMax: UploadFileAggregatorMax;
    UploadFileGroupBy: UploadFileGroupBy;
    UploadFileConnectionId: UploadFileConnectionId;
    UploadFileConnectionCreated_at: UploadFileConnectionCreated_at;
    UploadFileConnectionUpdated_at: UploadFileConnectionUpdated_at;
    UploadFileConnectionName: UploadFileConnectionName;
    UploadFileConnectionAlternativeText: UploadFileConnectionAlternativeText;
    UploadFileConnectionCaption: UploadFileConnectionCaption;
    UploadFileConnectionWidth: UploadFileConnectionWidth;
    UploadFileConnectionHeight: UploadFileConnectionHeight;
    UploadFileConnectionFormats: UploadFileConnectionFormats;
    UploadFileConnectionHash: UploadFileConnectionHash;
    UploadFileConnectionExt: UploadFileConnectionExt;
    UploadFileConnectionMime: UploadFileConnectionMime;
    UploadFileConnectionSize: UploadFileConnectionSize;
    UploadFileConnectionUrl: UploadFileConnectionUrl;
    UploadFileConnectionPreviewUrl: UploadFileConnectionPreviewUrl;
    UploadFileConnectionProvider: UploadFileConnectionProvider;
    UploadFileConnectionProvider_metadata: UploadFileConnectionProvider_metadata;
    deleteFilePayload: deleteFilePayload;
    UsersPermissionsPermission: UsersPermissionsPermission;
    UsersPermissionsRole: UsersPermissionsRole;
    UsersPermissionsRoleConnection: UsersPermissionsRoleConnection;
    UsersPermissionsRoleAggregator: UsersPermissionsRoleAggregator;
    UsersPermissionsRoleGroupBy: UsersPermissionsRoleGroupBy;
    UsersPermissionsRoleConnectionId: UsersPermissionsRoleConnectionId;
    UsersPermissionsRoleConnectionName: UsersPermissionsRoleConnectionName;
    UsersPermissionsRoleConnectionDescription: UsersPermissionsRoleConnectionDescription;
    UsersPermissionsRoleConnectionType: UsersPermissionsRoleConnectionType;
    createRolePayload: createRolePayload;
    updateRolePayload: updateRolePayload;
    deleteRolePayload: deleteRolePayload;
    UsersPermissionsUser: UsersPermissionsUser;
    UsersPermissionsUserConnection: UsersPermissionsUserConnection;
    UsersPermissionsUserAggregator: UsersPermissionsUserAggregator;
    UsersPermissionsUserGroupBy: UsersPermissionsUserGroupBy;
    UsersPermissionsUserConnectionId: UsersPermissionsUserConnectionId;
    UsersPermissionsUserConnectionCreated_at: UsersPermissionsUserConnectionCreated_at;
    UsersPermissionsUserConnectionUpdated_at: UsersPermissionsUserConnectionUpdated_at;
    UsersPermissionsUserConnectionUsername: UsersPermissionsUserConnectionUsername;
    UsersPermissionsUserConnectionEmail: UsersPermissionsUserConnectionEmail;
    UsersPermissionsUserConnectionProvider: UsersPermissionsUserConnectionProvider;
    UsersPermissionsUserConnectionConfirmed: UsersPermissionsUserConnectionConfirmed;
    UsersPermissionsUserConnectionBlocked: UsersPermissionsUserConnectionBlocked;
    UsersPermissionsUserConnectionRole: UsersPermissionsUserConnectionRole;
    UsersPermissionsUserConnectionPhoto: UsersPermissionsUserConnectionPhoto;
    UsersPermissionsUserConnectionFirst_name: UsersPermissionsUserConnectionFirst_name;
    UsersPermissionsUserConnectionLast_name: UsersPermissionsUserConnectionLast_name;
    UsersPermissionsUserConnectionNickname: UsersPermissionsUserConnectionNickname;
    UsersPermissionsUserConnectionFull_name_preview: UsersPermissionsUserConnectionFull_name_preview;
    createUserPayload: createUserPayload;
    updateUserPayload: updateUserPayload;
    deleteUserPayload: deleteUserPayload;
    ComponentAtomsPageLink: ComponentAtomsPageLink;
    ComponentAtomsProductAttrRating: ComponentAtomsProductAttrRating;
    ComponentAtomsProductAttr: ComponentAtomsProductAttr;
    ComponentAtomsProductIssues: ComponentAtomsProductIssues;
    ComponentAtomsSocialNetwork: ComponentAtomsSocialNetwork;
    ComponentAtomsTranslateableLabel: ComponentAtomsTranslateableLabel;
    ComponentAtomsUrlWithType: ComponentAtomsUrlWithType;
    ComponentComponentsNaturalList: ComponentComponentsNaturalList;
    ComponentEntryFieldsFooterFields: ComponentEntryFieldsFooterFields;
    ComponentEntryFieldsPageFields: ComponentEntryFieldsPageFields;
    ComponentEntryFieldsSourceSelectors: ComponentEntryFieldsSourceSelectors;
  }
  
  export interface InputID {
    id: string;
  }
  
  export const enum PublicationState {
    LIVE = 'LIVE',
    PREVIEW = 'PREVIEW'
  }
  
  export interface AdminUser {
    id: string;
    username?: string;
    firstname: string;
    lastname: string;
  }
  
  export interface Query {
    category?: Category;
    categories?: Array<Category | null>;
    categoriesConnection?: CategoryConnection;
    contactDetail?: ContactDetails;
    currency?: Currency;
    currencies?: Array<Currency | null>;
    currenciesConnection?: CurrencyConnection;
    footerSetting?: FooterSettings;
    language?: Language;
    languages?: Array<Language | null>;
    languagesConnection?: LanguageConnection;
    page?: Page;
    pages?: Array<Page | null>;
    pagesConnection?: PageConnection;
    productAttribute?: ProductAttribute;
    productAttributes?: Array<ProductAttribute | null>;
    productAttributesConnection?: ProductAttributeConnection;
    productChange?: ProductChange;
    productChanges?: Array<ProductChange | null>;
    productChangesConnection?: ProductChangeConnection;
    product?: Product;
    products?: Array<Product | null>;
    productsConnection?: ProductConnection;
    region?: Region;
    regions?: Array<Region | null>;
    regionsConnection?: RegionConnection;
    socialNetwork?: SocialNetwork;
    source?: Source;
    sources?: Array<Source | null>;
    sourcesConnection?: SourceConnection;
    tag?: Tag;
    tags?: Array<Tag | null>;
    tagsConnection?: TagConnection;
    files?: Array<UploadFile | null>;
    filesConnection?: UploadFileConnection;
    role?: UsersPermissionsRole;
    
    /**
     * Retrieve all the existing roles. You can't apply filters on this query.
     */
    roles?: Array<UsersPermissionsRole | null>;
    rolesConnection?: UsersPermissionsRoleConnection;
    user?: UsersPermissionsUser;
    users?: Array<UsersPermissionsUser | null>;
    usersConnection?: UsersPermissionsUserConnection;
    me?: UsersPermissionsMe;
    categoryTree?: Array<CategoryWithChild | null>;
    footerSettingsByLanguage?: ComponentEntryFieldsFooterFields;
    getTask?: Task;
    scheduledTasksList?: ScheduledTaskListPayload;
    sheduledTasks?: ScheduledTaskPayload;
    sheduledTasksHook?: boolean;
    productsByDeals?: Array<ProductsByDeal | null>;
    offersCategories?: Array<OffersCategory | null>;
    env?: EnvType;
    pageBySlug?: PageData;
    productDetails?: Product;
    productComparisonList?: Array<NaturalList | null>;
    categoryProducts?: Array<NaturalList | null>;
    productsList?: ProductsListPayload;
    giftIdeas?: GiftIdeasPayload;
  }
  
  export interface Mutation {
    createCategory?: createCategoryPayload;
    updateCategory?: updateCategoryPayload;
    deleteCategory?: deleteCategoryPayload;
    updateContactDetail?: updateContactDetailPayload;
    deleteContactDetail?: deleteContactDetailPayload;
    createCurrency?: createCurrencyPayload;
    updateCurrency?: updateCurrencyPayload;
    deleteCurrency?: deleteCurrencyPayload;
    updateFooterSetting?: updateFooterSettingPayload;
    deleteFooterSetting?: deleteFooterSettingPayload;
    createLanguage?: createLanguagePayload;
    updateLanguage?: updateLanguagePayload;
    deleteLanguage?: deleteLanguagePayload;
    createPage?: createPagePayload;
    updatePage?: updatePagePayload;
    deletePage?: deletePagePayload;
    createProductAttribute?: createProductAttributePayload;
    updateProductAttribute?: updateProductAttributePayload;
    deleteProductAttribute?: deleteProductAttributePayload;
    createProductChange?: createProductChangePayload;
    updateProductChange?: updateProductChangePayload;
    deleteProductChange?: deleteProductChangePayload;
    createProduct?: createProductPayload;
    updateProduct?: updateProductPayload;
    deleteProduct?: deleteProductPayload;
    createRegion?: createRegionPayload;
    updateRegion?: updateRegionPayload;
    deleteRegion?: deleteRegionPayload;
    updateSocialNetwork?: updateSocialNetworkPayload;
    deleteSocialNetwork?: deleteSocialNetworkPayload;
    createSource?: createSourcePayload;
    updateSource?: updateSourcePayload;
    deleteSource?: deleteSourcePayload;
    createTag?: createTagPayload;
    updateTag?: updateTagPayload;
    deleteTag?: deleteTagPayload;
    
    /**
     * Delete one file
     */
    deleteFile?: deleteFilePayload;
    
    /**
     * Create a new role
     */
    createRole?: createRolePayload;
    
    /**
     * Update an existing role
     */
    updateRole?: updateRolePayload;
    
    /**
     * Delete an existing role
     */
    deleteRole?: deleteRolePayload;
    
    /**
     * Create a new user
     */
    createUser?: createUserPayload;
    
    /**
     * Update an existing user
     */
    updateUser?: updateUserPayload;
    
    /**
     * Delete an existing user
     */
    deleteUser?: deleteUserPayload;
    upload: UploadFile;
    multipleUpload: Array<UploadFile | null>;
    updateFileInfo: UploadFile;
    login: UsersPermissionsLoginPayload;
    register: UsersPermissionsLoginPayload;
    forgotPassword?: UserPermissionsPasswordPayload;
    resetPassword?: UsersPermissionsLoginPayload;
    emailConfirmation?: UsersPermissionsLoginPayload;
    updateCategories?: Array<Category | null>;
    updateProductCounts?: Array<Category | null>;
    triggerTask?: ScheduledTaskListPayload;
    deleteProductsByDeals?: Array<string | null>;
    addProductsByDeals?: Array<Product | null>;
    addProductClick?: ProductClicksDetails;
    fixProducts?: FixedProductsPayload;
    updateProductLinks?: FixedProductsPayload;
  }
  
  /**
   * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
   */
  export type JSON = any;
  
  /**
   * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
   */
  export type DateTime = any;
  
  /**
   * A time string with format: HH:mm:ss.SSS
   */
  export type Time = any;
  
  /**
   * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
   */
  export type Date = any;
  
  /**
   * The `Long` scalar type represents 52-bit integers
   */
  export type Long = any;
  
  /**
   * The `Upload` scalar type represents a file upload.
   */
  export type Upload = any;
  
  /*********************************
   *                               *
   *         TYPE RESOLVERS        *
   *                               *
   *********************************/
  /**
   * This interface define the shape of your resolver
   * Note that this type is designed to be compatible with graphql-tools resolvers
   * However, you can still use other generated interfaces to make your resolver type-safed
   */
  export interface Resolver {
    UsersPermissionsMe?: UsersPermissionsMeTypeResolver;
    UsersPermissionsMeRole?: UsersPermissionsMeRoleTypeResolver;
    UsersPermissionsLoginPayload?: UsersPermissionsLoginPayloadTypeResolver;
    UserPermissionsPasswordPayload?: UserPermissionsPasswordPayloadTypeResolver;
    CategoryWithChild?: CategoryWithChildTypeResolver;
    DealTypeLabelTranslation?: DealTypeLabelTranslationTypeResolver;
    DealTypeNavIcon?: DealTypeNavIconTypeResolver;
    DealType?: DealTypeTypeResolver;
    ProductsByDeal?: ProductsByDealTypeResolver;
    TaskLogEntry?: TaskLogEntryTypeResolver;
    Task?: TaskTypeResolver;
    ScheduledTask?: ScheduledTaskTypeResolver;
    ScheduledTaskPayload?: ScheduledTaskPayloadTypeResolver;
    ScheduledTaskListPayload?: ScheduledTaskListPayloadTypeResolver;
    OffersCategoryLabelTranslation?: OffersCategoryLabelTranslationTypeResolver;
    OffersCategory?: OffersCategoryTypeResolver;
    EnvType?: EnvTypeTypeResolver;
    PageData?: PageDataTypeResolver;
    ProductCategory?: ProductCategoryTypeResolver;
    ProductsListPayload?: ProductsListPayloadTypeResolver;
    NaturalList?: NaturalListTypeResolver;
    ProductClicksDetails?: ProductClicksDetailsTypeResolver;
    FixedProductsPayload?: FixedProductsPayloadTypeResolver;
    GiftIdeasPayload?: GiftIdeasPayloadTypeResolver;
    Category?: CategoryTypeResolver;
    CategoryConnection?: CategoryConnectionTypeResolver;
    CategoryAggregator?: CategoryAggregatorTypeResolver;
    CategoryAggregatorSum?: CategoryAggregatorSumTypeResolver;
    CategoryAggregatorAvg?: CategoryAggregatorAvgTypeResolver;
    CategoryAggregatorMin?: CategoryAggregatorMinTypeResolver;
    CategoryAggregatorMax?: CategoryAggregatorMaxTypeResolver;
    CategoryGroupBy?: CategoryGroupByTypeResolver;
    CategoryConnectionId?: CategoryConnectionIdTypeResolver;
    CategoryConnectionCreated_at?: CategoryConnectionCreated_atTypeResolver;
    CategoryConnectionUpdated_at?: CategoryConnectionUpdated_atTypeResolver;
    CategoryConnectionSlug?: CategoryConnectionSlugTypeResolver;
    CategoryConnectionUrl?: CategoryConnectionUrlTypeResolver;
    CategoryConnectionParent?: CategoryConnectionParentTypeResolver;
    CategoryConnectionLanguage?: CategoryConnectionLanguageTypeResolver;
    CategoryConnectionIcon?: CategoryConnectionIconTypeResolver;
    CategoryConnectionOrder?: CategoryConnectionOrderTypeResolver;
    CategoryConnectionLabel_preview?: CategoryConnectionLabel_previewTypeResolver;
    CategoryConnectionRegion?: CategoryConnectionRegionTypeResolver;
    CategoryConnectionSource?: CategoryConnectionSourceTypeResolver;
    CategoryConnectionLabel_translations_json?: CategoryConnectionLabel_translations_jsonTypeResolver;
    CategoryConnectionChildren_count?: CategoryConnectionChildren_countTypeResolver;
    CategoryConnectionProducts_count?: CategoryConnectionProducts_countTypeResolver;
    CategoryConnectionDeal_category?: CategoryConnectionDeal_categoryTypeResolver;
    createCategoryPayload?: createCategoryPayloadTypeResolver;
    updateCategoryPayload?: updateCategoryPayloadTypeResolver;
    deleteCategoryPayload?: deleteCategoryPayloadTypeResolver;
    ContactDetails?: ContactDetailsTypeResolver;
    updateContactDetailPayload?: updateContactDetailPayloadTypeResolver;
    deleteContactDetailPayload?: deleteContactDetailPayloadTypeResolver;
    Currency?: CurrencyTypeResolver;
    CurrencyConnection?: CurrencyConnectionTypeResolver;
    CurrencyAggregator?: CurrencyAggregatorTypeResolver;
    CurrencyGroupBy?: CurrencyGroupByTypeResolver;
    CurrencyConnectionId?: CurrencyConnectionIdTypeResolver;
    CurrencyConnectionCreated_at?: CurrencyConnectionCreated_atTypeResolver;
    CurrencyConnectionUpdated_at?: CurrencyConnectionUpdated_atTypeResolver;
    CurrencyConnectionName?: CurrencyConnectionNameTypeResolver;
    CurrencyConnectionCode?: CurrencyConnectionCodeTypeResolver;
    CurrencyConnectionSymbol?: CurrencyConnectionSymbolTypeResolver;
    CurrencyConnectionLabel_preview?: CurrencyConnectionLabel_previewTypeResolver;
    createCurrencyPayload?: createCurrencyPayloadTypeResolver;
    updateCurrencyPayload?: updateCurrencyPayloadTypeResolver;
    deleteCurrencyPayload?: deleteCurrencyPayloadTypeResolver;
    FooterSettings?: FooterSettingsTypeResolver;
    updateFooterSettingPayload?: updateFooterSettingPayloadTypeResolver;
    deleteFooterSettingPayload?: deleteFooterSettingPayloadTypeResolver;
    Language?: LanguageTypeResolver;
    LanguageConnection?: LanguageConnectionTypeResolver;
    LanguageAggregator?: LanguageAggregatorTypeResolver;
    LanguageGroupBy?: LanguageGroupByTypeResolver;
    LanguageConnectionId?: LanguageConnectionIdTypeResolver;
    LanguageConnectionCreated_at?: LanguageConnectionCreated_atTypeResolver;
    LanguageConnectionUpdated_at?: LanguageConnectionUpdated_atTypeResolver;
    LanguageConnectionCode?: LanguageConnectionCodeTypeResolver;
    LanguageConnectionName?: LanguageConnectionNameTypeResolver;
    LanguageConnectionCountry_flag?: LanguageConnectionCountry_flagTypeResolver;
    createLanguagePayload?: createLanguagePayloadTypeResolver;
    updateLanguagePayload?: updateLanguagePayloadTypeResolver;
    deleteLanguagePayload?: deleteLanguagePayloadTypeResolver;
    Page?: PageTypeResolver;
    PageConnection?: PageConnectionTypeResolver;
    PageAggregator?: PageAggregatorTypeResolver;
    PageGroupBy?: PageGroupByTypeResolver;
    PageConnectionId?: PageConnectionIdTypeResolver;
    PageConnectionCreated_at?: PageConnectionCreated_atTypeResolver;
    PageConnectionUpdated_at?: PageConnectionUpdated_atTypeResolver;
    PageConnectionSlug?: PageConnectionSlugTypeResolver;
    PageConnectionLanguage?: PageConnectionLanguageTypeResolver;
    PageConnectionPublished_at?: PageConnectionPublished_atTypeResolver;
    createPagePayload?: createPagePayloadTypeResolver;
    updatePagePayload?: updatePagePayloadTypeResolver;
    deletePagePayload?: deletePagePayloadTypeResolver;
    ProductAttribute?: ProductAttributeTypeResolver;
    ProductAttributeConnection?: ProductAttributeConnectionTypeResolver;
    ProductAttributeAggregator?: ProductAttributeAggregatorTypeResolver;
    ProductAttributeGroupBy?: ProductAttributeGroupByTypeResolver;
    ProductAttributeConnectionId?: ProductAttributeConnectionIdTypeResolver;
    ProductAttributeConnectionCreated_at?: ProductAttributeConnectionCreated_atTypeResolver;
    ProductAttributeConnectionUpdated_at?: ProductAttributeConnectionUpdated_atTypeResolver;
    ProductAttributeConnectionName?: ProductAttributeConnectionNameTypeResolver;
    ProductAttributeConnectionCode?: ProductAttributeConnectionCodeTypeResolver;
    ProductAttributeConnectionIs_common?: ProductAttributeConnectionIs_commonTypeResolver;
    ProductAttributeConnectionData_type?: ProductAttributeConnectionData_typeTypeResolver;
    ProductAttributeConnectionCustom_formula?: ProductAttributeConnectionCustom_formulaTypeResolver;
    ProductAttributeConnectionDisable_min?: ProductAttributeConnectionDisable_minTypeResolver;
    ProductAttributeConnectionDisable_max?: ProductAttributeConnectionDisable_maxTypeResolver;
    ProductAttributeConnectionMin_label?: ProductAttributeConnectionMin_labelTypeResolver;
    ProductAttributeConnectionMax_label?: ProductAttributeConnectionMax_labelTypeResolver;
    ProductAttributeConnectionProduct_prop?: ProductAttributeConnectionProduct_propTypeResolver;
    createProductAttributePayload?: createProductAttributePayloadTypeResolver;
    updateProductAttributePayload?: updateProductAttributePayloadTypeResolver;
    deleteProductAttributePayload?: deleteProductAttributePayloadTypeResolver;
    ProductChange?: ProductChangeTypeResolver;
    ProductChangeConnection?: ProductChangeConnectionTypeResolver;
    ProductChangeAggregator?: ProductChangeAggregatorTypeResolver;
    ProductChangeGroupBy?: ProductChangeGroupByTypeResolver;
    ProductChangeConnectionId?: ProductChangeConnectionIdTypeResolver;
    ProductChangeConnectionCreated_at?: ProductChangeConnectionCreated_atTypeResolver;
    ProductChangeConnectionUpdated_at?: ProductChangeConnectionUpdated_atTypeResolver;
    ProductChangeConnectionState?: ProductChangeConnectionStateTypeResolver;
    ProductChangeConnectionAdmin_user?: ProductChangeConnectionAdmin_userTypeResolver;
    ProductChangeConnectionDate_time?: ProductChangeConnectionDate_timeTypeResolver;
    ProductChangeConnectionProduct?: ProductChangeConnectionProductTypeResolver;
    ProductChangeConnectionChange_type?: ProductChangeConnectionChange_typeTypeResolver;
    createProductChangePayload?: createProductChangePayloadTypeResolver;
    updateProductChangePayload?: updateProductChangePayloadTypeResolver;
    deleteProductChangePayload?: deleteProductChangePayloadTypeResolver;
    Product?: ProductTypeResolver;
    ProductConnection?: ProductConnectionTypeResolver;
    ProductAggregator?: ProductAggregatorTypeResolver;
    ProductAggregatorSum?: ProductAggregatorSumTypeResolver;
    ProductAggregatorAvg?: ProductAggregatorAvgTypeResolver;
    ProductAggregatorMin?: ProductAggregatorMinTypeResolver;
    ProductAggregatorMax?: ProductAggregatorMaxTypeResolver;
    ProductGroupBy?: ProductGroupByTypeResolver;
    ProductConnectionId?: ProductConnectionIdTypeResolver;
    ProductConnectionCreated_at?: ProductConnectionCreated_atTypeResolver;
    ProductConnectionUpdated_at?: ProductConnectionUpdated_atTypeResolver;
    ProductConnectionPosition?: ProductConnectionPositionTypeResolver;
    ProductConnectionPrice?: ProductConnectionPriceTypeResolver;
    ProductConnectionClicks_count?: ProductConnectionClicks_countTypeResolver;
    ProductConnectionImage?: ProductConnectionImageTypeResolver;
    ProductConnectionRegion?: ProductConnectionRegionTypeResolver;
    ProductConnectionSource?: ProductConnectionSourceTypeResolver;
    ProductConnectionDetails_html?: ProductConnectionDetails_htmlTypeResolver;
    ProductConnectionFinal_rating?: ProductConnectionFinal_ratingTypeResolver;
    ProductConnectionAmazon_url?: ProductConnectionAmazon_urlTypeResolver;
    ProductConnectionRelease_date?: ProductConnectionRelease_dateTypeResolver;
    ProductConnectionAdmin_user?: ProductConnectionAdmin_userTypeResolver;
    ProductConnectionCategory_temp?: ProductConnectionCategory_tempTypeResolver;
    ProductConnectionCategory?: ProductConnectionCategoryTypeResolver;
    ProductConnectionStatus?: ProductConnectionStatusTypeResolver;
    ProductConnectionProduct_issues?: ProductConnectionProduct_issuesTypeResolver;
    ProductConnectionQuantity_available_percent?: ProductConnectionQuantity_available_percentTypeResolver;
    ProductConnectionDiscount_percent?: ProductConnectionDiscount_percentTypeResolver;
    ProductConnectionPrice_original?: ProductConnectionPrice_originalTypeResolver;
    ProductConnectionScrape_batch_uid?: ProductConnectionScrape_batch_uidTypeResolver;
    ProductConnectionDeal_quantity_available_percent?: ProductConnectionDeal_quantity_available_percentTypeResolver;
    ProductConnectionOffer_category?: ProductConnectionOffer_categoryTypeResolver;
    ProductConnectionDeal_type?: ProductConnectionDeal_typeTypeResolver;
    ProductConnectionDeal_expiry?: ProductConnectionDeal_expiryTypeResolver;
    ProductConnectionTitle?: ProductConnectionTitleTypeResolver;
    createProductPayload?: createProductPayloadTypeResolver;
    updateProductPayload?: updateProductPayloadTypeResolver;
    deleteProductPayload?: deleteProductPayloadTypeResolver;
    Region?: RegionTypeResolver;
    RegionConnection?: RegionConnectionTypeResolver;
    RegionAggregator?: RegionAggregatorTypeResolver;
    RegionGroupBy?: RegionGroupByTypeResolver;
    RegionConnectionId?: RegionConnectionIdTypeResolver;
    RegionConnectionCreated_at?: RegionConnectionCreated_atTypeResolver;
    RegionConnectionUpdated_at?: RegionConnectionUpdated_atTypeResolver;
    RegionConnectionName?: RegionConnectionNameTypeResolver;
    RegionConnectionCode?: RegionConnectionCodeTypeResolver;
    RegionConnectionCurrency?: RegionConnectionCurrencyTypeResolver;
    createRegionPayload?: createRegionPayloadTypeResolver;
    updateRegionPayload?: updateRegionPayloadTypeResolver;
    deleteRegionPayload?: deleteRegionPayloadTypeResolver;
    SocialNetwork?: SocialNetworkTypeResolver;
    updateSocialNetworkPayload?: updateSocialNetworkPayloadTypeResolver;
    deleteSocialNetworkPayload?: deleteSocialNetworkPayloadTypeResolver;
    Source?: SourceTypeResolver;
    SourceConnection?: SourceConnectionTypeResolver;
    SourceAggregator?: SourceAggregatorTypeResolver;
    SourceGroupBy?: SourceGroupByTypeResolver;
    SourceConnectionId?: SourceConnectionIdTypeResolver;
    SourceConnectionCreated_at?: SourceConnectionCreated_atTypeResolver;
    SourceConnectionUpdated_at?: SourceConnectionUpdated_atTypeResolver;
    SourceConnectionName?: SourceConnectionNameTypeResolver;
    SourceConnectionButton_logo?: SourceConnectionButton_logoTypeResolver;
    createSourcePayload?: createSourcePayloadTypeResolver;
    updateSourcePayload?: updateSourcePayloadTypeResolver;
    deleteSourcePayload?: deleteSourcePayloadTypeResolver;
    Tag?: TagTypeResolver;
    TagConnection?: TagConnectionTypeResolver;
    TagAggregator?: TagAggregatorTypeResolver;
    TagGroupBy?: TagGroupByTypeResolver;
    TagConnectionId?: TagConnectionIdTypeResolver;
    TagConnectionCreated_at?: TagConnectionCreated_atTypeResolver;
    TagConnectionUpdated_at?: TagConnectionUpdated_atTypeResolver;
    TagConnectionSlug?: TagConnectionSlugTypeResolver;
    TagConnectionLanguage?: TagConnectionLanguageTypeResolver;
    createTagPayload?: createTagPayloadTypeResolver;
    updateTagPayload?: updateTagPayloadTypeResolver;
    deleteTagPayload?: deleteTagPayloadTypeResolver;
    UploadFile?: UploadFileTypeResolver;
    UploadFileConnection?: UploadFileConnectionTypeResolver;
    UploadFileAggregator?: UploadFileAggregatorTypeResolver;
    UploadFileAggregatorSum?: UploadFileAggregatorSumTypeResolver;
    UploadFileAggregatorAvg?: UploadFileAggregatorAvgTypeResolver;
    UploadFileAggregatorMin?: UploadFileAggregatorMinTypeResolver;
    UploadFileAggregatorMax?: UploadFileAggregatorMaxTypeResolver;
    UploadFileGroupBy?: UploadFileGroupByTypeResolver;
    UploadFileConnectionId?: UploadFileConnectionIdTypeResolver;
    UploadFileConnectionCreated_at?: UploadFileConnectionCreated_atTypeResolver;
    UploadFileConnectionUpdated_at?: UploadFileConnectionUpdated_atTypeResolver;
    UploadFileConnectionName?: UploadFileConnectionNameTypeResolver;
    UploadFileConnectionAlternativeText?: UploadFileConnectionAlternativeTextTypeResolver;
    UploadFileConnectionCaption?: UploadFileConnectionCaptionTypeResolver;
    UploadFileConnectionWidth?: UploadFileConnectionWidthTypeResolver;
    UploadFileConnectionHeight?: UploadFileConnectionHeightTypeResolver;
    UploadFileConnectionFormats?: UploadFileConnectionFormatsTypeResolver;
    UploadFileConnectionHash?: UploadFileConnectionHashTypeResolver;
    UploadFileConnectionExt?: UploadFileConnectionExtTypeResolver;
    UploadFileConnectionMime?: UploadFileConnectionMimeTypeResolver;
    UploadFileConnectionSize?: UploadFileConnectionSizeTypeResolver;
    UploadFileConnectionUrl?: UploadFileConnectionUrlTypeResolver;
    UploadFileConnectionPreviewUrl?: UploadFileConnectionPreviewUrlTypeResolver;
    UploadFileConnectionProvider?: UploadFileConnectionProviderTypeResolver;
    UploadFileConnectionProvider_metadata?: UploadFileConnectionProvider_metadataTypeResolver;
    deleteFilePayload?: deleteFilePayloadTypeResolver;
    UsersPermissionsPermission?: UsersPermissionsPermissionTypeResolver;
    UsersPermissionsRole?: UsersPermissionsRoleTypeResolver;
    UsersPermissionsRoleConnection?: UsersPermissionsRoleConnectionTypeResolver;
    UsersPermissionsRoleAggregator?: UsersPermissionsRoleAggregatorTypeResolver;
    UsersPermissionsRoleGroupBy?: UsersPermissionsRoleGroupByTypeResolver;
    UsersPermissionsRoleConnectionId?: UsersPermissionsRoleConnectionIdTypeResolver;
    UsersPermissionsRoleConnectionName?: UsersPermissionsRoleConnectionNameTypeResolver;
    UsersPermissionsRoleConnectionDescription?: UsersPermissionsRoleConnectionDescriptionTypeResolver;
    UsersPermissionsRoleConnectionType?: UsersPermissionsRoleConnectionTypeTypeResolver;
    createRolePayload?: createRolePayloadTypeResolver;
    updateRolePayload?: updateRolePayloadTypeResolver;
    deleteRolePayload?: deleteRolePayloadTypeResolver;
    UsersPermissionsUser?: UsersPermissionsUserTypeResolver;
    UsersPermissionsUserConnection?: UsersPermissionsUserConnectionTypeResolver;
    UsersPermissionsUserAggregator?: UsersPermissionsUserAggregatorTypeResolver;
    UsersPermissionsUserGroupBy?: UsersPermissionsUserGroupByTypeResolver;
    UsersPermissionsUserConnectionId?: UsersPermissionsUserConnectionIdTypeResolver;
    UsersPermissionsUserConnectionCreated_at?: UsersPermissionsUserConnectionCreated_atTypeResolver;
    UsersPermissionsUserConnectionUpdated_at?: UsersPermissionsUserConnectionUpdated_atTypeResolver;
    UsersPermissionsUserConnectionUsername?: UsersPermissionsUserConnectionUsernameTypeResolver;
    UsersPermissionsUserConnectionEmail?: UsersPermissionsUserConnectionEmailTypeResolver;
    UsersPermissionsUserConnectionProvider?: UsersPermissionsUserConnectionProviderTypeResolver;
    UsersPermissionsUserConnectionConfirmed?: UsersPermissionsUserConnectionConfirmedTypeResolver;
    UsersPermissionsUserConnectionBlocked?: UsersPermissionsUserConnectionBlockedTypeResolver;
    UsersPermissionsUserConnectionRole?: UsersPermissionsUserConnectionRoleTypeResolver;
    UsersPermissionsUserConnectionPhoto?: UsersPermissionsUserConnectionPhotoTypeResolver;
    UsersPermissionsUserConnectionFirst_name?: UsersPermissionsUserConnectionFirst_nameTypeResolver;
    UsersPermissionsUserConnectionLast_name?: UsersPermissionsUserConnectionLast_nameTypeResolver;
    UsersPermissionsUserConnectionNickname?: UsersPermissionsUserConnectionNicknameTypeResolver;
    UsersPermissionsUserConnectionFull_name_preview?: UsersPermissionsUserConnectionFull_name_previewTypeResolver;
    createUserPayload?: createUserPayloadTypeResolver;
    updateUserPayload?: updateUserPayloadTypeResolver;
    deleteUserPayload?: deleteUserPayloadTypeResolver;
    ComponentAtomsPageLink?: ComponentAtomsPageLinkTypeResolver;
    ComponentAtomsProductAttrRating?: ComponentAtomsProductAttrRatingTypeResolver;
    ComponentAtomsProductAttr?: ComponentAtomsProductAttrTypeResolver;
    ComponentAtomsProductIssues?: ComponentAtomsProductIssuesTypeResolver;
    ComponentAtomsSocialNetwork?: ComponentAtomsSocialNetworkTypeResolver;
    ComponentAtomsTranslateableLabel?: ComponentAtomsTranslateableLabelTypeResolver;
    ComponentAtomsUrlWithType?: ComponentAtomsUrlWithTypeTypeResolver;
    ComponentComponentsNaturalList?: ComponentComponentsNaturalListTypeResolver;
    ComponentEntryFieldsFooterFields?: ComponentEntryFieldsFooterFieldsTypeResolver;
    ComponentEntryFieldsPageFields?: ComponentEntryFieldsPageFieldsTypeResolver;
    ComponentEntryFieldsSourceSelectors?: ComponentEntryFieldsSourceSelectorsTypeResolver;
    Morph?: {
      __resolveType: MorphTypeResolver
    };
    
    AdminUser?: AdminUserTypeResolver;
    Query?: QueryTypeResolver;
    Mutation?: MutationTypeResolver;
    JSON?: GraphQLScalarType;
    DateTime?: GraphQLScalarType;
    Time?: GraphQLScalarType;
    Date?: GraphQLScalarType;
    Long?: GraphQLScalarType;
    Upload?: GraphQLScalarType;
  }
  export interface UsersPermissionsMeTypeResolver<TParent = any> {
    id?: UsersPermissionsMeToIdResolver<TParent>;
    username?: UsersPermissionsMeToUsernameResolver<TParent>;
    email?: UsersPermissionsMeToEmailResolver<TParent>;
    confirmed?: UsersPermissionsMeToConfirmedResolver<TParent>;
    blocked?: UsersPermissionsMeToBlockedResolver<TParent>;
    role?: UsersPermissionsMeToRoleResolver<TParent>;
  }
  
  export interface UsersPermissionsMeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsMeToUsernameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsMeToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsMeToConfirmedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsMeToBlockedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsMeToRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsMeRoleTypeResolver<TParent = any> {
    id?: UsersPermissionsMeRoleToIdResolver<TParent>;
    name?: UsersPermissionsMeRoleToNameResolver<TParent>;
    description?: UsersPermissionsMeRoleToDescriptionResolver<TParent>;
    type?: UsersPermissionsMeRoleToTypeResolver<TParent>;
  }
  
  export interface UsersPermissionsMeRoleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsMeRoleToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsMeRoleToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsMeRoleToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsLoginPayloadTypeResolver<TParent = any> {
    jwt?: UsersPermissionsLoginPayloadToJwtResolver<TParent>;
    user?: UsersPermissionsLoginPayloadToUserResolver<TParent>;
  }
  
  export interface UsersPermissionsLoginPayloadToJwtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsLoginPayloadToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UserPermissionsPasswordPayloadTypeResolver<TParent = any> {
    ok?: UserPermissionsPasswordPayloadToOkResolver<TParent>;
  }
  
  export interface UserPermissionsPasswordPayloadToOkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryWithChildTypeResolver<TParent = any> {
    label?: CategoryWithChildToLabelResolver<TParent>;
    id?: CategoryWithChildToIdResolver<TParent>;
    order?: CategoryWithChildToOrderResolver<TParent>;
    icon?: CategoryWithChildToIconResolver<TParent>;
    region?: CategoryWithChildToRegionResolver<TParent>;
    parent?: CategoryWithChildToParentResolver<TParent>;
    children?: CategoryWithChildToChildrenResolver<TParent>;
  }
  
  export interface CategoryWithChildToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryWithChildToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryWithChildToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryWithChildToIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryWithChildToRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryWithChildToParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryWithChildToChildrenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DealTypeLabelTranslationTypeResolver<TParent = any> {
    language?: DealTypeLabelTranslationToLanguageResolver<TParent>;
    label?: DealTypeLabelTranslationToLabelResolver<TParent>;
  }
  
  export interface DealTypeLabelTranslationToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DealTypeLabelTranslationToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DealTypeNavIconTypeResolver<TParent = any> {
    type?: DealTypeNavIconToTypeResolver<TParent>;
    icon?: DealTypeNavIconToIconResolver<TParent>;
  }
  
  export interface DealTypeNavIconToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DealTypeNavIconToIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DealTypeTypeResolver<TParent = any> {
    name?: DealTypeToNameResolver<TParent>;
    label?: DealTypeToLabelResolver<TParent>;
    nav_label?: DealTypeToNav_labelResolver<TParent>;
    nav_icon?: DealTypeToNav_iconResolver<TParent>;
    source?: DealTypeToSourceResolver<TParent>;
    last_run?: DealTypeToLast_runResolver<TParent>;
    site?: DealTypeToSiteResolver<TParent>;
    id?: DealTypeToIdResolver<TParent>;
  }
  
  export interface DealTypeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DealTypeToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DealTypeToNav_labelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DealTypeToNav_iconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DealTypeToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DealTypeToLast_runResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DealTypeToSiteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DealTypeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductsByDealTypeResolver<TParent = any> {
    deal_type?: ProductsByDealToDeal_typeResolver<TParent>;
    products?: ProductsByDealToProductsResolver<TParent>;
    total_products?: ProductsByDealToTotal_productsResolver<TParent>;
  }
  
  export interface ProductsByDealToDeal_typeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductsByDealToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductsByDealToTotal_productsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaskLogEntryTypeResolver<TParent = any> {
    timestamp?: TaskLogEntryToTimestampResolver<TParent>;
    date_time?: TaskLogEntryToDate_timeResolver<TParent>;
    type?: TaskLogEntryToTypeResolver<TParent>;
    message?: TaskLogEntryToMessageResolver<TParent>;
  }
  
  export interface TaskLogEntryToTimestampResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaskLogEntryToDate_timeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaskLogEntryToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaskLogEntryToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaskTypeResolver<TParent = any> {
    name?: TaskToNameResolver<TParent>;
    status?: TaskToStatusResolver<TParent>;
    logs?: TaskToLogsResolver<TParent>;
    canRun?: TaskToCanRunResolver<TParent>;
  }
  
  export interface TaskToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaskToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaskToLogsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaskToCanRunResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskTypeResolver<TParent = any> {
    id?: ScheduledTaskToIdResolver<TParent>;
    name?: ScheduledTaskToNameResolver<TParent>;
    status?: ScheduledTaskToStatusResolver<TParent>;
    frequency?: ScheduledTaskToFrequencyResolver<TParent>;
    next_run?: ScheduledTaskToNext_runResolver<TParent>;
    countdown?: ScheduledTaskToCountdownResolver<TParent>;
    last_run?: ScheduledTaskToLast_runResolver<TParent>;
    priority?: ScheduledTaskToPriorityResolver<TParent>;
    isReady?: ScheduledTaskToIsReadyResolver<TParent>;
    running?: ScheduledTaskToRunningResolver<TParent>;
    requestedForRun?: ScheduledTaskToRequestedForRunResolver<TParent>;
    hasModule?: ScheduledTaskToHasModuleResolver<TParent>;
    canQueue?: ScheduledTaskToCanQueueResolver<TParent>;
  }
  
  export interface ScheduledTaskToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskToFrequencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskToNext_runResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskToCountdownResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskToLast_runResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskToIsReadyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskToRunningResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskToRequestedForRunResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskToHasModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskToCanQueueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskPayloadTypeResolver<TParent = any> {
    error?: ScheduledTaskPayloadToErrorResolver<TParent>;
    data?: ScheduledTaskPayloadToDataResolver<TParent>;
  }
  
  export interface ScheduledTaskPayloadToErrorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskPayloadToDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskListPayloadTypeResolver<TParent = any> {
    serverTimeUnix?: ScheduledTaskListPayloadToServerTimeUnixResolver<TParent>;
    serverTimeFormatted?: ScheduledTaskListPayloadToServerTimeFormattedResolver<TParent>;
    tasks?: ScheduledTaskListPayloadToTasksResolver<TParent>;
    logs?: ScheduledTaskListPayloadToLogsResolver<TParent>;
  }
  
  export interface ScheduledTaskListPayloadToServerTimeUnixResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskListPayloadToServerTimeFormattedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskListPayloadToTasksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScheduledTaskListPayloadToLogsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OffersCategoryLabelTranslationTypeResolver<TParent = any> {
    language?: OffersCategoryLabelTranslationToLanguageResolver<TParent>;
    label?: OffersCategoryLabelTranslationToLabelResolver<TParent>;
  }
  
  export interface OffersCategoryLabelTranslationToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OffersCategoryLabelTranslationToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OffersCategoryTypeResolver<TParent = any> {
    id?: OffersCategoryToIdResolver<TParent>;
    label?: OffersCategoryToLabelResolver<TParent>;
    dealTypes?: OffersCategoryToDealTypesResolver<TParent>;
    isDefault?: OffersCategoryToIsDefaultResolver<TParent>;
  }
  
  export interface OffersCategoryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OffersCategoryToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OffersCategoryToDealTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OffersCategoryToIsDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EnvTypeTypeResolver<TParent = any> {
    HOST?: EnvTypeToHOSTResolver<TParent>;
    PORT?: EnvTypeToPORTResolver<TParent>;
    BROWSER?: EnvTypeToBROWSERResolver<TParent>;
    DATABASE_HOST?: EnvTypeToDATABASE_HOSTResolver<TParent>;
    DATABASE_PORT?: EnvTypeToDATABASE_PORTResolver<TParent>;
    DATABASE_NAME?: EnvTypeToDATABASE_NAMEResolver<TParent>;
    DATABASE_USERNAME?: EnvTypeToDATABASE_USERNAMEResolver<TParent>;
    DATABASE_PASSWORD?: EnvTypeToDATABASE_PASSWORDResolver<TParent>;
    SCRIPTS_SERVER_URL?: EnvTypeToSCRIPTS_SERVER_URLResolver<TParent>;
    AIRTABLE_API_KEY?: EnvTypeToAIRTABLE_API_KEYResolver<TParent>;
    AIRTABLE_BASE_SCHEDULED_TASKS?: EnvTypeToAIRTABLE_BASE_SCHEDULED_TASKSResolver<TParent>;
    ENV?: EnvTypeToENVResolver<TParent>;
  }
  
  export interface EnvTypeToHOSTResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EnvTypeToPORTResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EnvTypeToBROWSERResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EnvTypeToDATABASE_HOSTResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EnvTypeToDATABASE_PORTResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EnvTypeToDATABASE_NAMEResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EnvTypeToDATABASE_USERNAMEResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EnvTypeToDATABASE_PASSWORDResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EnvTypeToSCRIPTS_SERVER_URLResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EnvTypeToAIRTABLE_API_KEYResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EnvTypeToAIRTABLE_BASE_SCHEDULED_TASKSResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EnvTypeToENVResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageDataTypeResolver<TParent = any> {
    slug?: PageDataToSlugResolver<TParent>;
    data?: PageDataToDataResolver<TParent>;
  }
  
  export interface PageDataToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageDataToDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCategoryTypeResolver<TParent = any> {
    label?: ProductCategoryToLabelResolver<TParent>;
    id?: ProductCategoryToIdResolver<TParent>;
    order?: ProductCategoryToOrderResolver<TParent>;
    created_at?: ProductCategoryToCreated_atResolver<TParent>;
  }
  
  export interface ProductCategoryToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCategoryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCategoryToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCategoryToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductsListPayloadTypeResolver<TParent = any> {
    count?: ProductsListPayloadToCountResolver<TParent>;
    products?: ProductsListPayloadToProductsResolver<TParent>;
  }
  
  export interface ProductsListPayloadToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductsListPayloadToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface NaturalListTypeResolver<TParent = any> {
    category?: NaturalListToCategoryResolver<TParent>;
    products?: NaturalListToProductsResolver<TParent>;
  }
  
  export interface NaturalListToCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface NaturalListToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductClicksDetailsTypeResolver<TParent = any> {
    id?: ProductClicksDetailsToIdResolver<TParent>;
    clicks_count?: ProductClicksDetailsToClicks_countResolver<TParent>;
  }
  
  export interface ProductClicksDetailsToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductClicksDetailsToClicks_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FixedProductsPayloadTypeResolver<TParent = any> {
    count?: FixedProductsPayloadToCountResolver<TParent>;
    products?: FixedProductsPayloadToProductsResolver<TParent>;
  }
  
  export interface FixedProductsPayloadToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FixedProductsPayloadToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftIdeasPayloadTypeResolver<TParent = any> {
    products?: GiftIdeasPayloadToProductsResolver<TParent>;
    total?: GiftIdeasPayloadToTotalResolver<TParent>;
  }
  
  export interface GiftIdeasPayloadToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftIdeasPayloadToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryTypeResolver<TParent = any> {
    id?: CategoryToIdResolver<TParent>;
    created_at?: CategoryToCreated_atResolver<TParent>;
    updated_at?: CategoryToUpdated_atResolver<TParent>;
    slug?: CategoryToSlugResolver<TParent>;
    url?: CategoryToUrlResolver<TParent>;
    parent?: CategoryToParentResolver<TParent>;
    language?: CategoryToLanguageResolver<TParent>;
    icon?: CategoryToIconResolver<TParent>;
    order?: CategoryToOrderResolver<TParent>;
    label_preview?: CategoryToLabel_previewResolver<TParent>;
    region?: CategoryToRegionResolver<TParent>;
    source?: CategoryToSourceResolver<TParent>;
    label?: CategoryToLabelResolver<TParent>;
    product_attrs?: CategoryToProduct_attrsResolver<TParent>;
    label_translations_json?: CategoryToLabel_translations_jsonResolver<TParent>;
    children_count?: CategoryToChildren_countResolver<TParent>;
    products_count?: CategoryToProducts_countResolver<TParent>;
    deal_category?: CategoryToDeal_categoryResolver<TParent>;
    products?: CategoryToProductsResolver<TParent>;
    ascendants?: CategoryToAscendantsResolver<TParent>;
  }
  
  export interface CategoryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToLabel_previewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToProduct_attrsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToLabel_translations_jsonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToChildren_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToProducts_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToDeal_categoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToProductsArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface CategoryToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CategoryToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToAscendantsArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface CategoryToAscendantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CategoryToAscendantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionTypeResolver<TParent = any> {
    values?: CategoryConnectionToValuesResolver<TParent>;
    groupBy?: CategoryConnectionToGroupByResolver<TParent>;
    aggregate?: CategoryConnectionToAggregateResolver<TParent>;
  }
  
  export interface CategoryConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorTypeResolver<TParent = any> {
    count?: CategoryAggregatorToCountResolver<TParent>;
    totalCount?: CategoryAggregatorToTotalCountResolver<TParent>;
    sum?: CategoryAggregatorToSumResolver<TParent>;
    avg?: CategoryAggregatorToAvgResolver<TParent>;
    min?: CategoryAggregatorToMinResolver<TParent>;
    max?: CategoryAggregatorToMaxResolver<TParent>;
  }
  
  export interface CategoryAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorToSumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorToAvgResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorToMinResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorToMaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorSumTypeResolver<TParent = any> {
    order?: CategoryAggregatorSumToOrderResolver<TParent>;
    children_count?: CategoryAggregatorSumToChildren_countResolver<TParent>;
    products_count?: CategoryAggregatorSumToProducts_countResolver<TParent>;
  }
  
  export interface CategoryAggregatorSumToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorSumToChildren_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorSumToProducts_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorAvgTypeResolver<TParent = any> {
    order?: CategoryAggregatorAvgToOrderResolver<TParent>;
    children_count?: CategoryAggregatorAvgToChildren_countResolver<TParent>;
    products_count?: CategoryAggregatorAvgToProducts_countResolver<TParent>;
  }
  
  export interface CategoryAggregatorAvgToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorAvgToChildren_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorAvgToProducts_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorMinTypeResolver<TParent = any> {
    order?: CategoryAggregatorMinToOrderResolver<TParent>;
    children_count?: CategoryAggregatorMinToChildren_countResolver<TParent>;
    products_count?: CategoryAggregatorMinToProducts_countResolver<TParent>;
  }
  
  export interface CategoryAggregatorMinToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorMinToChildren_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorMinToProducts_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorMaxTypeResolver<TParent = any> {
    order?: CategoryAggregatorMaxToOrderResolver<TParent>;
    children_count?: CategoryAggregatorMaxToChildren_countResolver<TParent>;
    products_count?: CategoryAggregatorMaxToProducts_countResolver<TParent>;
  }
  
  export interface CategoryAggregatorMaxToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorMaxToChildren_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryAggregatorMaxToProducts_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByTypeResolver<TParent = any> {
    id?: CategoryGroupByToIdResolver<TParent>;
    created_at?: CategoryGroupByToCreated_atResolver<TParent>;
    updated_at?: CategoryGroupByToUpdated_atResolver<TParent>;
    slug?: CategoryGroupByToSlugResolver<TParent>;
    url?: CategoryGroupByToUrlResolver<TParent>;
    parent?: CategoryGroupByToParentResolver<TParent>;
    language?: CategoryGroupByToLanguageResolver<TParent>;
    icon?: CategoryGroupByToIconResolver<TParent>;
    order?: CategoryGroupByToOrderResolver<TParent>;
    label_preview?: CategoryGroupByToLabel_previewResolver<TParent>;
    region?: CategoryGroupByToRegionResolver<TParent>;
    source?: CategoryGroupByToSourceResolver<TParent>;
    label_translations_json?: CategoryGroupByToLabel_translations_jsonResolver<TParent>;
    children_count?: CategoryGroupByToChildren_countResolver<TParent>;
    products_count?: CategoryGroupByToProducts_countResolver<TParent>;
    deal_category?: CategoryGroupByToDeal_categoryResolver<TParent>;
  }
  
  export interface CategoryGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToLabel_previewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToLabel_translations_jsonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToChildren_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToProducts_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryGroupByToDeal_categoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionIdTypeResolver<TParent = any> {
    key?: CategoryConnectionIdToKeyResolver<TParent>;
    connection?: CategoryConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionCreated_atTypeResolver<TParent = any> {
    key?: CategoryConnectionCreated_atToKeyResolver<TParent>;
    connection?: CategoryConnectionCreated_atToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionUpdated_atTypeResolver<TParent = any> {
    key?: CategoryConnectionUpdated_atToKeyResolver<TParent>;
    connection?: CategoryConnectionUpdated_atToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionSlugTypeResolver<TParent = any> {
    key?: CategoryConnectionSlugToKeyResolver<TParent>;
    connection?: CategoryConnectionSlugToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionSlugToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionSlugToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionUrlTypeResolver<TParent = any> {
    key?: CategoryConnectionUrlToKeyResolver<TParent>;
    connection?: CategoryConnectionUrlToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionUrlToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionUrlToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionParentTypeResolver<TParent = any> {
    key?: CategoryConnectionParentToKeyResolver<TParent>;
    connection?: CategoryConnectionParentToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionParentToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionParentToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionLanguageTypeResolver<TParent = any> {
    key?: CategoryConnectionLanguageToKeyResolver<TParent>;
    connection?: CategoryConnectionLanguageToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionLanguageToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionLanguageToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionIconTypeResolver<TParent = any> {
    key?: CategoryConnectionIconToKeyResolver<TParent>;
    connection?: CategoryConnectionIconToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionIconToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionIconToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionOrderTypeResolver<TParent = any> {
    key?: CategoryConnectionOrderToKeyResolver<TParent>;
    connection?: CategoryConnectionOrderToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionOrderToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionOrderToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionLabel_previewTypeResolver<TParent = any> {
    key?: CategoryConnectionLabel_previewToKeyResolver<TParent>;
    connection?: CategoryConnectionLabel_previewToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionLabel_previewToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionLabel_previewToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionRegionTypeResolver<TParent = any> {
    key?: CategoryConnectionRegionToKeyResolver<TParent>;
    connection?: CategoryConnectionRegionToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionRegionToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionRegionToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionSourceTypeResolver<TParent = any> {
    key?: CategoryConnectionSourceToKeyResolver<TParent>;
    connection?: CategoryConnectionSourceToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionSourceToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionSourceToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionLabel_translations_jsonTypeResolver<TParent = any> {
    key?: CategoryConnectionLabel_translations_jsonToKeyResolver<TParent>;
    connection?: CategoryConnectionLabel_translations_jsonToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionLabel_translations_jsonToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionLabel_translations_jsonToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionChildren_countTypeResolver<TParent = any> {
    key?: CategoryConnectionChildren_countToKeyResolver<TParent>;
    connection?: CategoryConnectionChildren_countToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionChildren_countToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionChildren_countToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionProducts_countTypeResolver<TParent = any> {
    key?: CategoryConnectionProducts_countToKeyResolver<TParent>;
    connection?: CategoryConnectionProducts_countToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionProducts_countToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionProducts_countToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionDeal_categoryTypeResolver<TParent = any> {
    key?: CategoryConnectionDeal_categoryToKeyResolver<TParent>;
    connection?: CategoryConnectionDeal_categoryToConnectionResolver<TParent>;
  }
  
  export interface CategoryConnectionDeal_categoryToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryConnectionDeal_categoryToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface createCategoryPayloadTypeResolver<TParent = any> {
    category?: createCategoryPayloadToCategoryResolver<TParent>;
  }
  
  export interface createCategoryPayloadToCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateCategoryPayloadTypeResolver<TParent = any> {
    category?: updateCategoryPayloadToCategoryResolver<TParent>;
  }
  
  export interface updateCategoryPayloadToCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteCategoryPayloadTypeResolver<TParent = any> {
    category?: deleteCategoryPayloadToCategoryResolver<TParent>;
  }
  
  export interface deleteCategoryPayloadToCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ContactDetailsTypeResolver<TParent = any> {
    id?: ContactDetailsToIdResolver<TParent>;
    created_at?: ContactDetailsToCreated_atResolver<TParent>;
    updated_at?: ContactDetailsToUpdated_atResolver<TParent>;
    phone_number?: ContactDetailsToPhone_numberResolver<TParent>;
    email?: ContactDetailsToEmailResolver<TParent>;
    published_at?: ContactDetailsToPublished_atResolver<TParent>;
  }
  
  export interface ContactDetailsToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ContactDetailsToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ContactDetailsToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ContactDetailsToPhone_numberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ContactDetailsToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ContactDetailsToPublished_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateContactDetailPayloadTypeResolver<TParent = any> {
    contactDetail?: updateContactDetailPayloadToContactDetailResolver<TParent>;
  }
  
  export interface updateContactDetailPayloadToContactDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteContactDetailPayloadTypeResolver<TParent = any> {
    contactDetail?: deleteContactDetailPayloadToContactDetailResolver<TParent>;
  }
  
  export interface deleteContactDetailPayloadToContactDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyTypeResolver<TParent = any> {
    id?: CurrencyToIdResolver<TParent>;
    created_at?: CurrencyToCreated_atResolver<TParent>;
    updated_at?: CurrencyToUpdated_atResolver<TParent>;
    name?: CurrencyToNameResolver<TParent>;
    code?: CurrencyToCodeResolver<TParent>;
    symbol?: CurrencyToSymbolResolver<TParent>;
    label_preview?: CurrencyToLabel_previewResolver<TParent>;
    regions?: CurrencyToRegionsResolver<TParent>;
  }
  
  export interface CurrencyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyToSymbolResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyToLabel_previewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyToRegionsArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface CurrencyToRegionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CurrencyToRegionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionTypeResolver<TParent = any> {
    values?: CurrencyConnectionToValuesResolver<TParent>;
    groupBy?: CurrencyConnectionToGroupByResolver<TParent>;
    aggregate?: CurrencyConnectionToAggregateResolver<TParent>;
  }
  
  export interface CurrencyConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyAggregatorTypeResolver<TParent = any> {
    count?: CurrencyAggregatorToCountResolver<TParent>;
    totalCount?: CurrencyAggregatorToTotalCountResolver<TParent>;
  }
  
  export interface CurrencyAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyGroupByTypeResolver<TParent = any> {
    id?: CurrencyGroupByToIdResolver<TParent>;
    created_at?: CurrencyGroupByToCreated_atResolver<TParent>;
    updated_at?: CurrencyGroupByToUpdated_atResolver<TParent>;
    name?: CurrencyGroupByToNameResolver<TParent>;
    code?: CurrencyGroupByToCodeResolver<TParent>;
    symbol?: CurrencyGroupByToSymbolResolver<TParent>;
    label_preview?: CurrencyGroupByToLabel_previewResolver<TParent>;
  }
  
  export interface CurrencyGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyGroupByToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyGroupByToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyGroupByToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyGroupByToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyGroupByToSymbolResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyGroupByToLabel_previewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionIdTypeResolver<TParent = any> {
    key?: CurrencyConnectionIdToKeyResolver<TParent>;
    connection?: CurrencyConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface CurrencyConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionCreated_atTypeResolver<TParent = any> {
    key?: CurrencyConnectionCreated_atToKeyResolver<TParent>;
    connection?: CurrencyConnectionCreated_atToConnectionResolver<TParent>;
  }
  
  export interface CurrencyConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionUpdated_atTypeResolver<TParent = any> {
    key?: CurrencyConnectionUpdated_atToKeyResolver<TParent>;
    connection?: CurrencyConnectionUpdated_atToConnectionResolver<TParent>;
  }
  
  export interface CurrencyConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionNameTypeResolver<TParent = any> {
    key?: CurrencyConnectionNameToKeyResolver<TParent>;
    connection?: CurrencyConnectionNameToConnectionResolver<TParent>;
  }
  
  export interface CurrencyConnectionNameToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionNameToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionCodeTypeResolver<TParent = any> {
    key?: CurrencyConnectionCodeToKeyResolver<TParent>;
    connection?: CurrencyConnectionCodeToConnectionResolver<TParent>;
  }
  
  export interface CurrencyConnectionCodeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionCodeToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionSymbolTypeResolver<TParent = any> {
    key?: CurrencyConnectionSymbolToKeyResolver<TParent>;
    connection?: CurrencyConnectionSymbolToConnectionResolver<TParent>;
  }
  
  export interface CurrencyConnectionSymbolToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionSymbolToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionLabel_previewTypeResolver<TParent = any> {
    key?: CurrencyConnectionLabel_previewToKeyResolver<TParent>;
    connection?: CurrencyConnectionLabel_previewToConnectionResolver<TParent>;
  }
  
  export interface CurrencyConnectionLabel_previewToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyConnectionLabel_previewToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface createCurrencyPayloadTypeResolver<TParent = any> {
    currency?: createCurrencyPayloadToCurrencyResolver<TParent>;
  }
  
  export interface createCurrencyPayloadToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateCurrencyPayloadTypeResolver<TParent = any> {
    currency?: updateCurrencyPayloadToCurrencyResolver<TParent>;
  }
  
  export interface updateCurrencyPayloadToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteCurrencyPayloadTypeResolver<TParent = any> {
    currency?: deleteCurrencyPayloadToCurrencyResolver<TParent>;
  }
  
  export interface deleteCurrencyPayloadToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FooterSettingsTypeResolver<TParent = any> {
    id?: FooterSettingsToIdResolver<TParent>;
    created_at?: FooterSettingsToCreated_atResolver<TParent>;
    updated_at?: FooterSettingsToUpdated_atResolver<TParent>;
    footer_data?: FooterSettingsToFooter_dataResolver<TParent>;
    language?: FooterSettingsToLanguageResolver<TParent>;
    page?: FooterSettingsToPageResolver<TParent>;
    published_at?: FooterSettingsToPublished_atResolver<TParent>;
  }
  
  export interface FooterSettingsToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FooterSettingsToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FooterSettingsToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FooterSettingsToFooter_dataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FooterSettingsToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FooterSettingsToPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FooterSettingsToPublished_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateFooterSettingPayloadTypeResolver<TParent = any> {
    footerSetting?: updateFooterSettingPayloadToFooterSettingResolver<TParent>;
  }
  
  export interface updateFooterSettingPayloadToFooterSettingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteFooterSettingPayloadTypeResolver<TParent = any> {
    footerSetting?: deleteFooterSettingPayloadToFooterSettingResolver<TParent>;
  }
  
  export interface deleteFooterSettingPayloadToFooterSettingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageTypeResolver<TParent = any> {
    id?: LanguageToIdResolver<TParent>;
    created_at?: LanguageToCreated_atResolver<TParent>;
    updated_at?: LanguageToUpdated_atResolver<TParent>;
    code?: LanguageToCodeResolver<TParent>;
    name?: LanguageToNameResolver<TParent>;
    country_flag?: LanguageToCountry_flagResolver<TParent>;
  }
  
  export interface LanguageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageToCountry_flagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionTypeResolver<TParent = any> {
    values?: LanguageConnectionToValuesResolver<TParent>;
    groupBy?: LanguageConnectionToGroupByResolver<TParent>;
    aggregate?: LanguageConnectionToAggregateResolver<TParent>;
  }
  
  export interface LanguageConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageAggregatorTypeResolver<TParent = any> {
    count?: LanguageAggregatorToCountResolver<TParent>;
    totalCount?: LanguageAggregatorToTotalCountResolver<TParent>;
  }
  
  export interface LanguageAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageGroupByTypeResolver<TParent = any> {
    id?: LanguageGroupByToIdResolver<TParent>;
    created_at?: LanguageGroupByToCreated_atResolver<TParent>;
    updated_at?: LanguageGroupByToUpdated_atResolver<TParent>;
    code?: LanguageGroupByToCodeResolver<TParent>;
    name?: LanguageGroupByToNameResolver<TParent>;
    country_flag?: LanguageGroupByToCountry_flagResolver<TParent>;
  }
  
  export interface LanguageGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageGroupByToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageGroupByToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageGroupByToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageGroupByToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageGroupByToCountry_flagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionIdTypeResolver<TParent = any> {
    key?: LanguageConnectionIdToKeyResolver<TParent>;
    connection?: LanguageConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface LanguageConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionCreated_atTypeResolver<TParent = any> {
    key?: LanguageConnectionCreated_atToKeyResolver<TParent>;
    connection?: LanguageConnectionCreated_atToConnectionResolver<TParent>;
  }
  
  export interface LanguageConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionUpdated_atTypeResolver<TParent = any> {
    key?: LanguageConnectionUpdated_atToKeyResolver<TParent>;
    connection?: LanguageConnectionUpdated_atToConnectionResolver<TParent>;
  }
  
  export interface LanguageConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionCodeTypeResolver<TParent = any> {
    key?: LanguageConnectionCodeToKeyResolver<TParent>;
    connection?: LanguageConnectionCodeToConnectionResolver<TParent>;
  }
  
  export interface LanguageConnectionCodeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionCodeToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionNameTypeResolver<TParent = any> {
    key?: LanguageConnectionNameToKeyResolver<TParent>;
    connection?: LanguageConnectionNameToConnectionResolver<TParent>;
  }
  
  export interface LanguageConnectionNameToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionNameToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionCountry_flagTypeResolver<TParent = any> {
    key?: LanguageConnectionCountry_flagToKeyResolver<TParent>;
    connection?: LanguageConnectionCountry_flagToConnectionResolver<TParent>;
  }
  
  export interface LanguageConnectionCountry_flagToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LanguageConnectionCountry_flagToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface createLanguagePayloadTypeResolver<TParent = any> {
    language?: createLanguagePayloadToLanguageResolver<TParent>;
  }
  
  export interface createLanguagePayloadToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateLanguagePayloadTypeResolver<TParent = any> {
    language?: updateLanguagePayloadToLanguageResolver<TParent>;
  }
  
  export interface updateLanguagePayloadToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteLanguagePayloadTypeResolver<TParent = any> {
    language?: deleteLanguagePayloadToLanguageResolver<TParent>;
  }
  
  export interface deleteLanguagePayloadToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageTypeResolver<TParent = any> {
    id?: PageToIdResolver<TParent>;
    created_at?: PageToCreated_atResolver<TParent>;
    updated_at?: PageToUpdated_atResolver<TParent>;
    slug?: PageToSlugResolver<TParent>;
    page_data?: PageToPage_dataResolver<TParent>;
    language?: PageToLanguageResolver<TParent>;
    product_attr_ratings?: PageToProduct_attr_ratingsResolver<TParent>;
    published_at?: PageToPublished_atResolver<TParent>;
  }
  
  export interface PageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToPage_dataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToProduct_attr_ratingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToPublished_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionTypeResolver<TParent = any> {
    values?: PageConnectionToValuesResolver<TParent>;
    groupBy?: PageConnectionToGroupByResolver<TParent>;
    aggregate?: PageConnectionToAggregateResolver<TParent>;
  }
  
  export interface PageConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageAggregatorTypeResolver<TParent = any> {
    count?: PageAggregatorToCountResolver<TParent>;
    totalCount?: PageAggregatorToTotalCountResolver<TParent>;
  }
  
  export interface PageAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageGroupByTypeResolver<TParent = any> {
    id?: PageGroupByToIdResolver<TParent>;
    created_at?: PageGroupByToCreated_atResolver<TParent>;
    updated_at?: PageGroupByToUpdated_atResolver<TParent>;
    slug?: PageGroupByToSlugResolver<TParent>;
    language?: PageGroupByToLanguageResolver<TParent>;
    published_at?: PageGroupByToPublished_atResolver<TParent>;
  }
  
  export interface PageGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageGroupByToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageGroupByToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageGroupByToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageGroupByToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageGroupByToPublished_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionIdTypeResolver<TParent = any> {
    key?: PageConnectionIdToKeyResolver<TParent>;
    connection?: PageConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface PageConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionCreated_atTypeResolver<TParent = any> {
    key?: PageConnectionCreated_atToKeyResolver<TParent>;
    connection?: PageConnectionCreated_atToConnectionResolver<TParent>;
  }
  
  export interface PageConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionUpdated_atTypeResolver<TParent = any> {
    key?: PageConnectionUpdated_atToKeyResolver<TParent>;
    connection?: PageConnectionUpdated_atToConnectionResolver<TParent>;
  }
  
  export interface PageConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionSlugTypeResolver<TParent = any> {
    key?: PageConnectionSlugToKeyResolver<TParent>;
    connection?: PageConnectionSlugToConnectionResolver<TParent>;
  }
  
  export interface PageConnectionSlugToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionSlugToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionLanguageTypeResolver<TParent = any> {
    key?: PageConnectionLanguageToKeyResolver<TParent>;
    connection?: PageConnectionLanguageToConnectionResolver<TParent>;
  }
  
  export interface PageConnectionLanguageToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionLanguageToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionPublished_atTypeResolver<TParent = any> {
    key?: PageConnectionPublished_atToKeyResolver<TParent>;
    connection?: PageConnectionPublished_atToConnectionResolver<TParent>;
  }
  
  export interface PageConnectionPublished_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionPublished_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface createPagePayloadTypeResolver<TParent = any> {
    page?: createPagePayloadToPageResolver<TParent>;
  }
  
  export interface createPagePayloadToPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updatePagePayloadTypeResolver<TParent = any> {
    page?: updatePagePayloadToPageResolver<TParent>;
  }
  
  export interface updatePagePayloadToPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deletePagePayloadTypeResolver<TParent = any> {
    page?: deletePagePayloadToPageResolver<TParent>;
  }
  
  export interface deletePagePayloadToPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeTypeResolver<TParent = any> {
    id?: ProductAttributeToIdResolver<TParent>;
    created_at?: ProductAttributeToCreated_atResolver<TParent>;
    updated_at?: ProductAttributeToUpdated_atResolver<TParent>;
    name?: ProductAttributeToNameResolver<TParent>;
    code?: ProductAttributeToCodeResolver<TParent>;
    is_common?: ProductAttributeToIs_commonResolver<TParent>;
    data_type?: ProductAttributeToData_typeResolver<TParent>;
    custom_formula?: ProductAttributeToCustom_formulaResolver<TParent>;
    disable_min?: ProductAttributeToDisable_minResolver<TParent>;
    disable_max?: ProductAttributeToDisable_maxResolver<TParent>;
    min_label?: ProductAttributeToMin_labelResolver<TParent>;
    max_label?: ProductAttributeToMax_labelResolver<TParent>;
    product_prop?: ProductAttributeToProduct_propResolver<TParent>;
  }
  
  export interface ProductAttributeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeToIs_commonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeToData_typeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeToCustom_formulaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeToDisable_minResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeToDisable_maxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeToMin_labelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeToMax_labelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeToProduct_propResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionTypeResolver<TParent = any> {
    values?: ProductAttributeConnectionToValuesResolver<TParent>;
    groupBy?: ProductAttributeConnectionToGroupByResolver<TParent>;
    aggregate?: ProductAttributeConnectionToAggregateResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeAggregatorTypeResolver<TParent = any> {
    count?: ProductAttributeAggregatorToCountResolver<TParent>;
    totalCount?: ProductAttributeAggregatorToTotalCountResolver<TParent>;
  }
  
  export interface ProductAttributeAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByTypeResolver<TParent = any> {
    id?: ProductAttributeGroupByToIdResolver<TParent>;
    created_at?: ProductAttributeGroupByToCreated_atResolver<TParent>;
    updated_at?: ProductAttributeGroupByToUpdated_atResolver<TParent>;
    name?: ProductAttributeGroupByToNameResolver<TParent>;
    code?: ProductAttributeGroupByToCodeResolver<TParent>;
    is_common?: ProductAttributeGroupByToIs_commonResolver<TParent>;
    data_type?: ProductAttributeGroupByToData_typeResolver<TParent>;
    custom_formula?: ProductAttributeGroupByToCustom_formulaResolver<TParent>;
    disable_min?: ProductAttributeGroupByToDisable_minResolver<TParent>;
    disable_max?: ProductAttributeGroupByToDisable_maxResolver<TParent>;
    min_label?: ProductAttributeGroupByToMin_labelResolver<TParent>;
    max_label?: ProductAttributeGroupByToMax_labelResolver<TParent>;
    product_prop?: ProductAttributeGroupByToProduct_propResolver<TParent>;
  }
  
  export interface ProductAttributeGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByToIs_commonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByToData_typeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByToCustom_formulaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByToDisable_minResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByToDisable_maxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByToMin_labelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByToMax_labelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeGroupByToProduct_propResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionIdTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionIdToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionCreated_atTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionCreated_atToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionCreated_atToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionUpdated_atTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionUpdated_atToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionUpdated_atToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionNameTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionNameToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionNameToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionNameToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionNameToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionCodeTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionCodeToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionCodeToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionCodeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionCodeToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionIs_commonTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionIs_commonToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionIs_commonToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionIs_commonToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionIs_commonToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionData_typeTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionData_typeToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionData_typeToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionData_typeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionData_typeToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionCustom_formulaTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionCustom_formulaToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionCustom_formulaToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionCustom_formulaToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionCustom_formulaToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionDisable_minTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionDisable_minToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionDisable_minToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionDisable_minToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionDisable_minToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionDisable_maxTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionDisable_maxToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionDisable_maxToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionDisable_maxToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionDisable_maxToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionMin_labelTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionMin_labelToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionMin_labelToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionMin_labelToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionMin_labelToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionMax_labelTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionMax_labelToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionMax_labelToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionMax_labelToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionMax_labelToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionProduct_propTypeResolver<TParent = any> {
    key?: ProductAttributeConnectionProduct_propToKeyResolver<TParent>;
    connection?: ProductAttributeConnectionProduct_propToConnectionResolver<TParent>;
  }
  
  export interface ProductAttributeConnectionProduct_propToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAttributeConnectionProduct_propToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface createProductAttributePayloadTypeResolver<TParent = any> {
    productAttribute?: createProductAttributePayloadToProductAttributeResolver<TParent>;
  }
  
  export interface createProductAttributePayloadToProductAttributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateProductAttributePayloadTypeResolver<TParent = any> {
    productAttribute?: updateProductAttributePayloadToProductAttributeResolver<TParent>;
  }
  
  export interface updateProductAttributePayloadToProductAttributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteProductAttributePayloadTypeResolver<TParent = any> {
    productAttribute?: deleteProductAttributePayloadToProductAttributeResolver<TParent>;
  }
  
  export interface deleteProductAttributePayloadToProductAttributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeTypeResolver<TParent = any> {
    id?: ProductChangeToIdResolver<TParent>;
    created_at?: ProductChangeToCreated_atResolver<TParent>;
    updated_at?: ProductChangeToUpdated_atResolver<TParent>;
    state?: ProductChangeToStateResolver<TParent>;
    admin_user?: ProductChangeToAdmin_userResolver<TParent>;
    date_time?: ProductChangeToDate_timeResolver<TParent>;
    product?: ProductChangeToProductResolver<TParent>;
    change_type?: ProductChangeToChange_typeResolver<TParent>;
  }
  
  export interface ProductChangeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeToAdmin_userResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeToDate_timeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeToChange_typeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionTypeResolver<TParent = any> {
    values?: ProductChangeConnectionToValuesResolver<TParent>;
    groupBy?: ProductChangeConnectionToGroupByResolver<TParent>;
    aggregate?: ProductChangeConnectionToAggregateResolver<TParent>;
  }
  
  export interface ProductChangeConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeAggregatorTypeResolver<TParent = any> {
    count?: ProductChangeAggregatorToCountResolver<TParent>;
    totalCount?: ProductChangeAggregatorToTotalCountResolver<TParent>;
  }
  
  export interface ProductChangeAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeGroupByTypeResolver<TParent = any> {
    id?: ProductChangeGroupByToIdResolver<TParent>;
    created_at?: ProductChangeGroupByToCreated_atResolver<TParent>;
    updated_at?: ProductChangeGroupByToUpdated_atResolver<TParent>;
    state?: ProductChangeGroupByToStateResolver<TParent>;
    admin_user?: ProductChangeGroupByToAdmin_userResolver<TParent>;
    date_time?: ProductChangeGroupByToDate_timeResolver<TParent>;
    product?: ProductChangeGroupByToProductResolver<TParent>;
    change_type?: ProductChangeGroupByToChange_typeResolver<TParent>;
  }
  
  export interface ProductChangeGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeGroupByToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeGroupByToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeGroupByToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeGroupByToAdmin_userResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeGroupByToDate_timeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeGroupByToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeGroupByToChange_typeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionIdTypeResolver<TParent = any> {
    key?: ProductChangeConnectionIdToKeyResolver<TParent>;
    connection?: ProductChangeConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface ProductChangeConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionCreated_atTypeResolver<TParent = any> {
    key?: ProductChangeConnectionCreated_atToKeyResolver<TParent>;
    connection?: ProductChangeConnectionCreated_atToConnectionResolver<TParent>;
  }
  
  export interface ProductChangeConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionUpdated_atTypeResolver<TParent = any> {
    key?: ProductChangeConnectionUpdated_atToKeyResolver<TParent>;
    connection?: ProductChangeConnectionUpdated_atToConnectionResolver<TParent>;
  }
  
  export interface ProductChangeConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionStateTypeResolver<TParent = any> {
    key?: ProductChangeConnectionStateToKeyResolver<TParent>;
    connection?: ProductChangeConnectionStateToConnectionResolver<TParent>;
  }
  
  export interface ProductChangeConnectionStateToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionStateToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionAdmin_userTypeResolver<TParent = any> {
    key?: ProductChangeConnectionAdmin_userToKeyResolver<TParent>;
    connection?: ProductChangeConnectionAdmin_userToConnectionResolver<TParent>;
  }
  
  export interface ProductChangeConnectionAdmin_userToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionAdmin_userToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionDate_timeTypeResolver<TParent = any> {
    key?: ProductChangeConnectionDate_timeToKeyResolver<TParent>;
    connection?: ProductChangeConnectionDate_timeToConnectionResolver<TParent>;
  }
  
  export interface ProductChangeConnectionDate_timeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionDate_timeToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionProductTypeResolver<TParent = any> {
    key?: ProductChangeConnectionProductToKeyResolver<TParent>;
    connection?: ProductChangeConnectionProductToConnectionResolver<TParent>;
  }
  
  export interface ProductChangeConnectionProductToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionProductToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionChange_typeTypeResolver<TParent = any> {
    key?: ProductChangeConnectionChange_typeToKeyResolver<TParent>;
    connection?: ProductChangeConnectionChange_typeToConnectionResolver<TParent>;
  }
  
  export interface ProductChangeConnectionChange_typeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeConnectionChange_typeToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface createProductChangePayloadTypeResolver<TParent = any> {
    productChange?: createProductChangePayloadToProductChangeResolver<TParent>;
  }
  
  export interface createProductChangePayloadToProductChangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateProductChangePayloadTypeResolver<TParent = any> {
    productChange?: updateProductChangePayloadToProductChangeResolver<TParent>;
  }
  
  export interface updateProductChangePayloadToProductChangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteProductChangePayloadTypeResolver<TParent = any> {
    productChange?: deleteProductChangePayloadToProductChangeResolver<TParent>;
  }
  
  export interface deleteProductChangePayloadToProductChangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductTypeResolver<TParent = any> {
    id?: ProductToIdResolver<TParent>;
    created_at?: ProductToCreated_atResolver<TParent>;
    updated_at?: ProductToUpdated_atResolver<TParent>;
    position?: ProductToPositionResolver<TParent>;
    price?: ProductToPriceResolver<TParent>;
    clicks_count?: ProductToClicks_countResolver<TParent>;
    image?: ProductToImageResolver<TParent>;
    region?: ProductToRegionResolver<TParent>;
    source?: ProductToSourceResolver<TParent>;
    url_list?: ProductToUrl_listResolver<TParent>;
    details_html?: ProductToDetails_htmlResolver<TParent>;
    attrs_rating?: ProductToAttrs_ratingResolver<TParent>;
    final_rating?: ProductToFinal_ratingResolver<TParent>;
    amazon_url?: ProductToAmazon_urlResolver<TParent>;
    release_date?: ProductToRelease_dateResolver<TParent>;
    admin_user?: ProductToAdmin_userResolver<TParent>;
    category_temp?: ProductToCategory_tempResolver<TParent>;
    category?: ProductToCategoryResolver<TParent>;
    status?: ProductToStatusResolver<TParent>;
    product_issues?: ProductToProduct_issuesResolver<TParent>;
    quantity_available_percent?: ProductToQuantity_available_percentResolver<TParent>;
    discount_percent?: ProductToDiscount_percentResolver<TParent>;
    price_original?: ProductToPrice_originalResolver<TParent>;
    scrape_batch_uid?: ProductToScrape_batch_uidResolver<TParent>;
    deal_quantity_available_percent?: ProductToDeal_quantity_available_percentResolver<TParent>;
    offer_category?: ProductToOffer_categoryResolver<TParent>;
    deal_type?: ProductToDeal_typeResolver<TParent>;
    deal_expiry?: ProductToDeal_expiryResolver<TParent>;
    title?: ProductToTitleResolver<TParent>;
    product_changes?: ProductToProduct_changesResolver<TParent>;
    tags?: ProductToTagsResolver<TParent>;
  }
  
  export interface ProductToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToClicks_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToUrl_listResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToDetails_htmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToAttrs_ratingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToFinal_ratingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToAmazon_urlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToRelease_dateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToAdmin_userResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToCategory_tempResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToProduct_issuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToQuantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToDiscount_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPrice_originalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToScrape_batch_uidResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToDeal_quantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToOffer_categoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToDeal_typeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToDeal_expiryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToProduct_changesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface ProductToProduct_changesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToProduct_changesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToTagsArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface ProductToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionTypeResolver<TParent = any> {
    values?: ProductConnectionToValuesResolver<TParent>;
    groupBy?: ProductConnectionToGroupByResolver<TParent>;
    aggregate?: ProductConnectionToAggregateResolver<TParent>;
  }
  
  export interface ProductConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorTypeResolver<TParent = any> {
    count?: ProductAggregatorToCountResolver<TParent>;
    totalCount?: ProductAggregatorToTotalCountResolver<TParent>;
    sum?: ProductAggregatorToSumResolver<TParent>;
    avg?: ProductAggregatorToAvgResolver<TParent>;
    min?: ProductAggregatorToMinResolver<TParent>;
    max?: ProductAggregatorToMaxResolver<TParent>;
  }
  
  export interface ProductAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorToSumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorToAvgResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorToMinResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorToMaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorSumTypeResolver<TParent = any> {
    position?: ProductAggregatorSumToPositionResolver<TParent>;
    price?: ProductAggregatorSumToPriceResolver<TParent>;
    clicks_count?: ProductAggregatorSumToClicks_countResolver<TParent>;
    final_rating?: ProductAggregatorSumToFinal_ratingResolver<TParent>;
    category_temp?: ProductAggregatorSumToCategory_tempResolver<TParent>;
    quantity_available_percent?: ProductAggregatorSumToQuantity_available_percentResolver<TParent>;
    discount_percent?: ProductAggregatorSumToDiscount_percentResolver<TParent>;
    price_original?: ProductAggregatorSumToPrice_originalResolver<TParent>;
    deal_quantity_available_percent?: ProductAggregatorSumToDeal_quantity_available_percentResolver<TParent>;
  }
  
  export interface ProductAggregatorSumToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorSumToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorSumToClicks_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorSumToFinal_ratingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorSumToCategory_tempResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorSumToQuantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorSumToDiscount_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorSumToPrice_originalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorSumToDeal_quantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorAvgTypeResolver<TParent = any> {
    position?: ProductAggregatorAvgToPositionResolver<TParent>;
    price?: ProductAggregatorAvgToPriceResolver<TParent>;
    clicks_count?: ProductAggregatorAvgToClicks_countResolver<TParent>;
    final_rating?: ProductAggregatorAvgToFinal_ratingResolver<TParent>;
    category_temp?: ProductAggregatorAvgToCategory_tempResolver<TParent>;
    quantity_available_percent?: ProductAggregatorAvgToQuantity_available_percentResolver<TParent>;
    discount_percent?: ProductAggregatorAvgToDiscount_percentResolver<TParent>;
    price_original?: ProductAggregatorAvgToPrice_originalResolver<TParent>;
    deal_quantity_available_percent?: ProductAggregatorAvgToDeal_quantity_available_percentResolver<TParent>;
  }
  
  export interface ProductAggregatorAvgToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorAvgToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorAvgToClicks_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorAvgToFinal_ratingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorAvgToCategory_tempResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorAvgToQuantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorAvgToDiscount_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorAvgToPrice_originalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorAvgToDeal_quantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMinTypeResolver<TParent = any> {
    position?: ProductAggregatorMinToPositionResolver<TParent>;
    price?: ProductAggregatorMinToPriceResolver<TParent>;
    clicks_count?: ProductAggregatorMinToClicks_countResolver<TParent>;
    final_rating?: ProductAggregatorMinToFinal_ratingResolver<TParent>;
    category_temp?: ProductAggregatorMinToCategory_tempResolver<TParent>;
    quantity_available_percent?: ProductAggregatorMinToQuantity_available_percentResolver<TParent>;
    discount_percent?: ProductAggregatorMinToDiscount_percentResolver<TParent>;
    price_original?: ProductAggregatorMinToPrice_originalResolver<TParent>;
    deal_quantity_available_percent?: ProductAggregatorMinToDeal_quantity_available_percentResolver<TParent>;
  }
  
  export interface ProductAggregatorMinToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMinToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMinToClicks_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMinToFinal_ratingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMinToCategory_tempResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMinToQuantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMinToDiscount_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMinToPrice_originalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMinToDeal_quantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMaxTypeResolver<TParent = any> {
    position?: ProductAggregatorMaxToPositionResolver<TParent>;
    price?: ProductAggregatorMaxToPriceResolver<TParent>;
    clicks_count?: ProductAggregatorMaxToClicks_countResolver<TParent>;
    final_rating?: ProductAggregatorMaxToFinal_ratingResolver<TParent>;
    category_temp?: ProductAggregatorMaxToCategory_tempResolver<TParent>;
    quantity_available_percent?: ProductAggregatorMaxToQuantity_available_percentResolver<TParent>;
    discount_percent?: ProductAggregatorMaxToDiscount_percentResolver<TParent>;
    price_original?: ProductAggregatorMaxToPrice_originalResolver<TParent>;
    deal_quantity_available_percent?: ProductAggregatorMaxToDeal_quantity_available_percentResolver<TParent>;
  }
  
  export interface ProductAggregatorMaxToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMaxToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMaxToClicks_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMaxToFinal_ratingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMaxToCategory_tempResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMaxToQuantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMaxToDiscount_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMaxToPrice_originalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAggregatorMaxToDeal_quantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByTypeResolver<TParent = any> {
    id?: ProductGroupByToIdResolver<TParent>;
    created_at?: ProductGroupByToCreated_atResolver<TParent>;
    updated_at?: ProductGroupByToUpdated_atResolver<TParent>;
    position?: ProductGroupByToPositionResolver<TParent>;
    price?: ProductGroupByToPriceResolver<TParent>;
    clicks_count?: ProductGroupByToClicks_countResolver<TParent>;
    image?: ProductGroupByToImageResolver<TParent>;
    region?: ProductGroupByToRegionResolver<TParent>;
    source?: ProductGroupByToSourceResolver<TParent>;
    details_html?: ProductGroupByToDetails_htmlResolver<TParent>;
    final_rating?: ProductGroupByToFinal_ratingResolver<TParent>;
    amazon_url?: ProductGroupByToAmazon_urlResolver<TParent>;
    release_date?: ProductGroupByToRelease_dateResolver<TParent>;
    admin_user?: ProductGroupByToAdmin_userResolver<TParent>;
    category_temp?: ProductGroupByToCategory_tempResolver<TParent>;
    category?: ProductGroupByToCategoryResolver<TParent>;
    status?: ProductGroupByToStatusResolver<TParent>;
    product_issues?: ProductGroupByToProduct_issuesResolver<TParent>;
    quantity_available_percent?: ProductGroupByToQuantity_available_percentResolver<TParent>;
    discount_percent?: ProductGroupByToDiscount_percentResolver<TParent>;
    price_original?: ProductGroupByToPrice_originalResolver<TParent>;
    scrape_batch_uid?: ProductGroupByToScrape_batch_uidResolver<TParent>;
    deal_quantity_available_percent?: ProductGroupByToDeal_quantity_available_percentResolver<TParent>;
    offer_category?: ProductGroupByToOffer_categoryResolver<TParent>;
    deal_type?: ProductGroupByToDeal_typeResolver<TParent>;
    deal_expiry?: ProductGroupByToDeal_expiryResolver<TParent>;
    title?: ProductGroupByToTitleResolver<TParent>;
  }
  
  export interface ProductGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToClicks_countResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToDetails_htmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToFinal_ratingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToAmazon_urlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToRelease_dateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToAdmin_userResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToCategory_tempResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToProduct_issuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToQuantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToDiscount_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToPrice_originalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToScrape_batch_uidResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToDeal_quantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToOffer_categoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToDeal_typeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToDeal_expiryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductGroupByToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionIdTypeResolver<TParent = any> {
    key?: ProductConnectionIdToKeyResolver<TParent>;
    connection?: ProductConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionCreated_atTypeResolver<TParent = any> {
    key?: ProductConnectionCreated_atToKeyResolver<TParent>;
    connection?: ProductConnectionCreated_atToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionUpdated_atTypeResolver<TParent = any> {
    key?: ProductConnectionUpdated_atToKeyResolver<TParent>;
    connection?: ProductConnectionUpdated_atToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionPositionTypeResolver<TParent = any> {
    key?: ProductConnectionPositionToKeyResolver<TParent>;
    connection?: ProductConnectionPositionToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionPositionToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionPositionToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionPriceTypeResolver<TParent = any> {
    key?: ProductConnectionPriceToKeyResolver<TParent>;
    connection?: ProductConnectionPriceToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionPriceToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionPriceToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionClicks_countTypeResolver<TParent = any> {
    key?: ProductConnectionClicks_countToKeyResolver<TParent>;
    connection?: ProductConnectionClicks_countToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionClicks_countToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionClicks_countToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionImageTypeResolver<TParent = any> {
    key?: ProductConnectionImageToKeyResolver<TParent>;
    connection?: ProductConnectionImageToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionImageToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionImageToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionRegionTypeResolver<TParent = any> {
    key?: ProductConnectionRegionToKeyResolver<TParent>;
    connection?: ProductConnectionRegionToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionRegionToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionRegionToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionSourceTypeResolver<TParent = any> {
    key?: ProductConnectionSourceToKeyResolver<TParent>;
    connection?: ProductConnectionSourceToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionSourceToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionSourceToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionDetails_htmlTypeResolver<TParent = any> {
    key?: ProductConnectionDetails_htmlToKeyResolver<TParent>;
    connection?: ProductConnectionDetails_htmlToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionDetails_htmlToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionDetails_htmlToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionFinal_ratingTypeResolver<TParent = any> {
    key?: ProductConnectionFinal_ratingToKeyResolver<TParent>;
    connection?: ProductConnectionFinal_ratingToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionFinal_ratingToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionFinal_ratingToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionAmazon_urlTypeResolver<TParent = any> {
    key?: ProductConnectionAmazon_urlToKeyResolver<TParent>;
    connection?: ProductConnectionAmazon_urlToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionAmazon_urlToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionAmazon_urlToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionRelease_dateTypeResolver<TParent = any> {
    key?: ProductConnectionRelease_dateToKeyResolver<TParent>;
    connection?: ProductConnectionRelease_dateToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionRelease_dateToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionRelease_dateToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionAdmin_userTypeResolver<TParent = any> {
    key?: ProductConnectionAdmin_userToKeyResolver<TParent>;
    connection?: ProductConnectionAdmin_userToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionAdmin_userToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionAdmin_userToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionCategory_tempTypeResolver<TParent = any> {
    key?: ProductConnectionCategory_tempToKeyResolver<TParent>;
    connection?: ProductConnectionCategory_tempToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionCategory_tempToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionCategory_tempToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionCategoryTypeResolver<TParent = any> {
    key?: ProductConnectionCategoryToKeyResolver<TParent>;
    connection?: ProductConnectionCategoryToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionCategoryToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionCategoryToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionStatusTypeResolver<TParent = any> {
    key?: ProductConnectionStatusToKeyResolver<TParent>;
    connection?: ProductConnectionStatusToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionStatusToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionStatusToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionProduct_issuesTypeResolver<TParent = any> {
    key?: ProductConnectionProduct_issuesToKeyResolver<TParent>;
    connection?: ProductConnectionProduct_issuesToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionProduct_issuesToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionProduct_issuesToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionQuantity_available_percentTypeResolver<TParent = any> {
    key?: ProductConnectionQuantity_available_percentToKeyResolver<TParent>;
    connection?: ProductConnectionQuantity_available_percentToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionQuantity_available_percentToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionQuantity_available_percentToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionDiscount_percentTypeResolver<TParent = any> {
    key?: ProductConnectionDiscount_percentToKeyResolver<TParent>;
    connection?: ProductConnectionDiscount_percentToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionDiscount_percentToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionDiscount_percentToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionPrice_originalTypeResolver<TParent = any> {
    key?: ProductConnectionPrice_originalToKeyResolver<TParent>;
    connection?: ProductConnectionPrice_originalToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionPrice_originalToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionPrice_originalToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionScrape_batch_uidTypeResolver<TParent = any> {
    key?: ProductConnectionScrape_batch_uidToKeyResolver<TParent>;
    connection?: ProductConnectionScrape_batch_uidToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionScrape_batch_uidToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionScrape_batch_uidToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionDeal_quantity_available_percentTypeResolver<TParent = any> {
    key?: ProductConnectionDeal_quantity_available_percentToKeyResolver<TParent>;
    connection?: ProductConnectionDeal_quantity_available_percentToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionDeal_quantity_available_percentToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionDeal_quantity_available_percentToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionOffer_categoryTypeResolver<TParent = any> {
    key?: ProductConnectionOffer_categoryToKeyResolver<TParent>;
    connection?: ProductConnectionOffer_categoryToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionOffer_categoryToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionOffer_categoryToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionDeal_typeTypeResolver<TParent = any> {
    key?: ProductConnectionDeal_typeToKeyResolver<TParent>;
    connection?: ProductConnectionDeal_typeToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionDeal_typeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionDeal_typeToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionDeal_expiryTypeResolver<TParent = any> {
    key?: ProductConnectionDeal_expiryToKeyResolver<TParent>;
    connection?: ProductConnectionDeal_expiryToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionDeal_expiryToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionDeal_expiryToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionTitleTypeResolver<TParent = any> {
    key?: ProductConnectionTitleToKeyResolver<TParent>;
    connection?: ProductConnectionTitleToConnectionResolver<TParent>;
  }
  
  export interface ProductConnectionTitleToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionTitleToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface createProductPayloadTypeResolver<TParent = any> {
    product?: createProductPayloadToProductResolver<TParent>;
  }
  
  export interface createProductPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateProductPayloadTypeResolver<TParent = any> {
    product?: updateProductPayloadToProductResolver<TParent>;
  }
  
  export interface updateProductPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteProductPayloadTypeResolver<TParent = any> {
    product?: deleteProductPayloadToProductResolver<TParent>;
  }
  
  export interface deleteProductPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionTypeResolver<TParent = any> {
    id?: RegionToIdResolver<TParent>;
    created_at?: RegionToCreated_atResolver<TParent>;
    updated_at?: RegionToUpdated_atResolver<TParent>;
    name?: RegionToNameResolver<TParent>;
    code?: RegionToCodeResolver<TParent>;
    currency?: RegionToCurrencyResolver<TParent>;
    sources?: RegionToSourcesResolver<TParent>;
    categories?: RegionToCategoriesResolver<TParent>;
    products?: RegionToProductsResolver<TParent>;
  }
  
  export interface RegionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionToSourcesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface RegionToSourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: RegionToSourcesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionToCategoriesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface RegionToCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: RegionToCategoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionToProductsArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface RegionToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: RegionToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionTypeResolver<TParent = any> {
    values?: RegionConnectionToValuesResolver<TParent>;
    groupBy?: RegionConnectionToGroupByResolver<TParent>;
    aggregate?: RegionConnectionToAggregateResolver<TParent>;
  }
  
  export interface RegionConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionAggregatorTypeResolver<TParent = any> {
    count?: RegionAggregatorToCountResolver<TParent>;
    totalCount?: RegionAggregatorToTotalCountResolver<TParent>;
  }
  
  export interface RegionAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionGroupByTypeResolver<TParent = any> {
    id?: RegionGroupByToIdResolver<TParent>;
    created_at?: RegionGroupByToCreated_atResolver<TParent>;
    updated_at?: RegionGroupByToUpdated_atResolver<TParent>;
    name?: RegionGroupByToNameResolver<TParent>;
    code?: RegionGroupByToCodeResolver<TParent>;
    currency?: RegionGroupByToCurrencyResolver<TParent>;
  }
  
  export interface RegionGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionGroupByToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionGroupByToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionGroupByToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionGroupByToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionGroupByToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionIdTypeResolver<TParent = any> {
    key?: RegionConnectionIdToKeyResolver<TParent>;
    connection?: RegionConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface RegionConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionCreated_atTypeResolver<TParent = any> {
    key?: RegionConnectionCreated_atToKeyResolver<TParent>;
    connection?: RegionConnectionCreated_atToConnectionResolver<TParent>;
  }
  
  export interface RegionConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionUpdated_atTypeResolver<TParent = any> {
    key?: RegionConnectionUpdated_atToKeyResolver<TParent>;
    connection?: RegionConnectionUpdated_atToConnectionResolver<TParent>;
  }
  
  export interface RegionConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionNameTypeResolver<TParent = any> {
    key?: RegionConnectionNameToKeyResolver<TParent>;
    connection?: RegionConnectionNameToConnectionResolver<TParent>;
  }
  
  export interface RegionConnectionNameToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionNameToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionCodeTypeResolver<TParent = any> {
    key?: RegionConnectionCodeToKeyResolver<TParent>;
    connection?: RegionConnectionCodeToConnectionResolver<TParent>;
  }
  
  export interface RegionConnectionCodeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionCodeToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionCurrencyTypeResolver<TParent = any> {
    key?: RegionConnectionCurrencyToKeyResolver<TParent>;
    connection?: RegionConnectionCurrencyToConnectionResolver<TParent>;
  }
  
  export interface RegionConnectionCurrencyToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RegionConnectionCurrencyToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface createRegionPayloadTypeResolver<TParent = any> {
    region?: createRegionPayloadToRegionResolver<TParent>;
  }
  
  export interface createRegionPayloadToRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateRegionPayloadTypeResolver<TParent = any> {
    region?: updateRegionPayloadToRegionResolver<TParent>;
  }
  
  export interface updateRegionPayloadToRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteRegionPayloadTypeResolver<TParent = any> {
    region?: deleteRegionPayloadToRegionResolver<TParent>;
  }
  
  export interface deleteRegionPayloadToRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SocialNetworkTypeResolver<TParent = any> {
    id?: SocialNetworkToIdResolver<TParent>;
    created_at?: SocialNetworkToCreated_atResolver<TParent>;
    updated_at?: SocialNetworkToUpdated_atResolver<TParent>;
    social_network?: SocialNetworkToSocial_networkResolver<TParent>;
    published_at?: SocialNetworkToPublished_atResolver<TParent>;
  }
  
  export interface SocialNetworkToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SocialNetworkToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SocialNetworkToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SocialNetworkToSocial_networkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SocialNetworkToPublished_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateSocialNetworkPayloadTypeResolver<TParent = any> {
    socialNetwork?: updateSocialNetworkPayloadToSocialNetworkResolver<TParent>;
  }
  
  export interface updateSocialNetworkPayloadToSocialNetworkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteSocialNetworkPayloadTypeResolver<TParent = any> {
    socialNetwork?: deleteSocialNetworkPayloadToSocialNetworkResolver<TParent>;
  }
  
  export interface deleteSocialNetworkPayloadToSocialNetworkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceTypeResolver<TParent = any> {
    id?: SourceToIdResolver<TParent>;
    created_at?: SourceToCreated_atResolver<TParent>;
    updated_at?: SourceToUpdated_atResolver<TParent>;
    name?: SourceToNameResolver<TParent>;
    button_logo?: SourceToButton_logoResolver<TParent>;
    regions?: SourceToRegionsResolver<TParent>;
    categories?: SourceToCategoriesResolver<TParent>;
    products?: SourceToProductsResolver<TParent>;
  }
  
  export interface SourceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceToButton_logoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceToRegionsArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface SourceToRegionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SourceToRegionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceToCategoriesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface SourceToCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SourceToCategoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceToProductsArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface SourceToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SourceToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionTypeResolver<TParent = any> {
    values?: SourceConnectionToValuesResolver<TParent>;
    groupBy?: SourceConnectionToGroupByResolver<TParent>;
    aggregate?: SourceConnectionToAggregateResolver<TParent>;
  }
  
  export interface SourceConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceAggregatorTypeResolver<TParent = any> {
    count?: SourceAggregatorToCountResolver<TParent>;
    totalCount?: SourceAggregatorToTotalCountResolver<TParent>;
  }
  
  export interface SourceAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceGroupByTypeResolver<TParent = any> {
    id?: SourceGroupByToIdResolver<TParent>;
    created_at?: SourceGroupByToCreated_atResolver<TParent>;
    updated_at?: SourceGroupByToUpdated_atResolver<TParent>;
    name?: SourceGroupByToNameResolver<TParent>;
    button_logo?: SourceGroupByToButton_logoResolver<TParent>;
  }
  
  export interface SourceGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceGroupByToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceGroupByToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceGroupByToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceGroupByToButton_logoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionIdTypeResolver<TParent = any> {
    key?: SourceConnectionIdToKeyResolver<TParent>;
    connection?: SourceConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface SourceConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionCreated_atTypeResolver<TParent = any> {
    key?: SourceConnectionCreated_atToKeyResolver<TParent>;
    connection?: SourceConnectionCreated_atToConnectionResolver<TParent>;
  }
  
  export interface SourceConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionUpdated_atTypeResolver<TParent = any> {
    key?: SourceConnectionUpdated_atToKeyResolver<TParent>;
    connection?: SourceConnectionUpdated_atToConnectionResolver<TParent>;
  }
  
  export interface SourceConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionNameTypeResolver<TParent = any> {
    key?: SourceConnectionNameToKeyResolver<TParent>;
    connection?: SourceConnectionNameToConnectionResolver<TParent>;
  }
  
  export interface SourceConnectionNameToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionNameToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionButton_logoTypeResolver<TParent = any> {
    key?: SourceConnectionButton_logoToKeyResolver<TParent>;
    connection?: SourceConnectionButton_logoToConnectionResolver<TParent>;
  }
  
  export interface SourceConnectionButton_logoToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SourceConnectionButton_logoToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface createSourcePayloadTypeResolver<TParent = any> {
    source?: createSourcePayloadToSourceResolver<TParent>;
  }
  
  export interface createSourcePayloadToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateSourcePayloadTypeResolver<TParent = any> {
    source?: updateSourcePayloadToSourceResolver<TParent>;
  }
  
  export interface updateSourcePayloadToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteSourcePayloadTypeResolver<TParent = any> {
    source?: deleteSourcePayloadToSourceResolver<TParent>;
  }
  
  export interface deleteSourcePayloadToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagTypeResolver<TParent = any> {
    id?: TagToIdResolver<TParent>;
    created_at?: TagToCreated_atResolver<TParent>;
    updated_at?: TagToUpdated_atResolver<TParent>;
    slug?: TagToSlugResolver<TParent>;
    label?: TagToLabelResolver<TParent>;
    language?: TagToLanguageResolver<TParent>;
    products?: TagToProductsResolver<TParent>;
  }
  
  export interface TagToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagToProductsArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface TagToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: TagToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionTypeResolver<TParent = any> {
    values?: TagConnectionToValuesResolver<TParent>;
    groupBy?: TagConnectionToGroupByResolver<TParent>;
    aggregate?: TagConnectionToAggregateResolver<TParent>;
  }
  
  export interface TagConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagAggregatorTypeResolver<TParent = any> {
    count?: TagAggregatorToCountResolver<TParent>;
    totalCount?: TagAggregatorToTotalCountResolver<TParent>;
  }
  
  export interface TagAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagGroupByTypeResolver<TParent = any> {
    id?: TagGroupByToIdResolver<TParent>;
    created_at?: TagGroupByToCreated_atResolver<TParent>;
    updated_at?: TagGroupByToUpdated_atResolver<TParent>;
    slug?: TagGroupByToSlugResolver<TParent>;
    language?: TagGroupByToLanguageResolver<TParent>;
  }
  
  export interface TagGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagGroupByToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagGroupByToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagGroupByToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagGroupByToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionIdTypeResolver<TParent = any> {
    key?: TagConnectionIdToKeyResolver<TParent>;
    connection?: TagConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface TagConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionCreated_atTypeResolver<TParent = any> {
    key?: TagConnectionCreated_atToKeyResolver<TParent>;
    connection?: TagConnectionCreated_atToConnectionResolver<TParent>;
  }
  
  export interface TagConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionUpdated_atTypeResolver<TParent = any> {
    key?: TagConnectionUpdated_atToKeyResolver<TParent>;
    connection?: TagConnectionUpdated_atToConnectionResolver<TParent>;
  }
  
  export interface TagConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionSlugTypeResolver<TParent = any> {
    key?: TagConnectionSlugToKeyResolver<TParent>;
    connection?: TagConnectionSlugToConnectionResolver<TParent>;
  }
  
  export interface TagConnectionSlugToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionSlugToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionLanguageTypeResolver<TParent = any> {
    key?: TagConnectionLanguageToKeyResolver<TParent>;
    connection?: TagConnectionLanguageToConnectionResolver<TParent>;
  }
  
  export interface TagConnectionLanguageToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagConnectionLanguageToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface createTagPayloadTypeResolver<TParent = any> {
    tag?: createTagPayloadToTagResolver<TParent>;
  }
  
  export interface createTagPayloadToTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateTagPayloadTypeResolver<TParent = any> {
    tag?: updateTagPayloadToTagResolver<TParent>;
  }
  
  export interface updateTagPayloadToTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteTagPayloadTypeResolver<TParent = any> {
    tag?: deleteTagPayloadToTagResolver<TParent>;
  }
  
  export interface deleteTagPayloadToTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileTypeResolver<TParent = any> {
    id?: UploadFileToIdResolver<TParent>;
    created_at?: UploadFileToCreated_atResolver<TParent>;
    updated_at?: UploadFileToUpdated_atResolver<TParent>;
    name?: UploadFileToNameResolver<TParent>;
    alternativeText?: UploadFileToAlternativeTextResolver<TParent>;
    caption?: UploadFileToCaptionResolver<TParent>;
    width?: UploadFileToWidthResolver<TParent>;
    height?: UploadFileToHeightResolver<TParent>;
    formats?: UploadFileToFormatsResolver<TParent>;
    hash?: UploadFileToHashResolver<TParent>;
    ext?: UploadFileToExtResolver<TParent>;
    mime?: UploadFileToMimeResolver<TParent>;
    size?: UploadFileToSizeResolver<TParent>;
    url?: UploadFileToUrlResolver<TParent>;
    previewUrl?: UploadFileToPreviewUrlResolver<TParent>;
    provider?: UploadFileToProviderResolver<TParent>;
    provider_metadata?: UploadFileToProvider_metadataResolver<TParent>;
    related?: UploadFileToRelatedResolver<TParent>;
  }
  
  export interface UploadFileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToAlternativeTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToCaptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToFormatsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToHashResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToExtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToMimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToPreviewUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToProvider_metadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileToRelatedArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface UploadFileToRelatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: UploadFileToRelatedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionTypeResolver<TParent = any> {
    values?: UploadFileConnectionToValuesResolver<TParent>;
    groupBy?: UploadFileConnectionToGroupByResolver<TParent>;
    aggregate?: UploadFileConnectionToAggregateResolver<TParent>;
  }
  
  export interface UploadFileConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorTypeResolver<TParent = any> {
    count?: UploadFileAggregatorToCountResolver<TParent>;
    totalCount?: UploadFileAggregatorToTotalCountResolver<TParent>;
    sum?: UploadFileAggregatorToSumResolver<TParent>;
    avg?: UploadFileAggregatorToAvgResolver<TParent>;
    min?: UploadFileAggregatorToMinResolver<TParent>;
    max?: UploadFileAggregatorToMaxResolver<TParent>;
  }
  
  export interface UploadFileAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorToSumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorToAvgResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorToMinResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorToMaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorSumTypeResolver<TParent = any> {
    width?: UploadFileAggregatorSumToWidthResolver<TParent>;
    height?: UploadFileAggregatorSumToHeightResolver<TParent>;
    size?: UploadFileAggregatorSumToSizeResolver<TParent>;
  }
  
  export interface UploadFileAggregatorSumToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorSumToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorSumToSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorAvgTypeResolver<TParent = any> {
    width?: UploadFileAggregatorAvgToWidthResolver<TParent>;
    height?: UploadFileAggregatorAvgToHeightResolver<TParent>;
    size?: UploadFileAggregatorAvgToSizeResolver<TParent>;
  }
  
  export interface UploadFileAggregatorAvgToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorAvgToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorAvgToSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorMinTypeResolver<TParent = any> {
    width?: UploadFileAggregatorMinToWidthResolver<TParent>;
    height?: UploadFileAggregatorMinToHeightResolver<TParent>;
    size?: UploadFileAggregatorMinToSizeResolver<TParent>;
  }
  
  export interface UploadFileAggregatorMinToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorMinToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorMinToSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorMaxTypeResolver<TParent = any> {
    width?: UploadFileAggregatorMaxToWidthResolver<TParent>;
    height?: UploadFileAggregatorMaxToHeightResolver<TParent>;
    size?: UploadFileAggregatorMaxToSizeResolver<TParent>;
  }
  
  export interface UploadFileAggregatorMaxToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorMaxToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileAggregatorMaxToSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByTypeResolver<TParent = any> {
    id?: UploadFileGroupByToIdResolver<TParent>;
    created_at?: UploadFileGroupByToCreated_atResolver<TParent>;
    updated_at?: UploadFileGroupByToUpdated_atResolver<TParent>;
    name?: UploadFileGroupByToNameResolver<TParent>;
    alternativeText?: UploadFileGroupByToAlternativeTextResolver<TParent>;
    caption?: UploadFileGroupByToCaptionResolver<TParent>;
    width?: UploadFileGroupByToWidthResolver<TParent>;
    height?: UploadFileGroupByToHeightResolver<TParent>;
    formats?: UploadFileGroupByToFormatsResolver<TParent>;
    hash?: UploadFileGroupByToHashResolver<TParent>;
    ext?: UploadFileGroupByToExtResolver<TParent>;
    mime?: UploadFileGroupByToMimeResolver<TParent>;
    size?: UploadFileGroupByToSizeResolver<TParent>;
    url?: UploadFileGroupByToUrlResolver<TParent>;
    previewUrl?: UploadFileGroupByToPreviewUrlResolver<TParent>;
    provider?: UploadFileGroupByToProviderResolver<TParent>;
    provider_metadata?: UploadFileGroupByToProvider_metadataResolver<TParent>;
  }
  
  export interface UploadFileGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToAlternativeTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToCaptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToFormatsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToHashResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToExtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToMimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToPreviewUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileGroupByToProvider_metadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionIdTypeResolver<TParent = any> {
    key?: UploadFileConnectionIdToKeyResolver<TParent>;
    connection?: UploadFileConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionCreated_atTypeResolver<TParent = any> {
    key?: UploadFileConnectionCreated_atToKeyResolver<TParent>;
    connection?: UploadFileConnectionCreated_atToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionUpdated_atTypeResolver<TParent = any> {
    key?: UploadFileConnectionUpdated_atToKeyResolver<TParent>;
    connection?: UploadFileConnectionUpdated_atToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionNameTypeResolver<TParent = any> {
    key?: UploadFileConnectionNameToKeyResolver<TParent>;
    connection?: UploadFileConnectionNameToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionNameToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionNameToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionAlternativeTextTypeResolver<TParent = any> {
    key?: UploadFileConnectionAlternativeTextToKeyResolver<TParent>;
    connection?: UploadFileConnectionAlternativeTextToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionAlternativeTextToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionAlternativeTextToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionCaptionTypeResolver<TParent = any> {
    key?: UploadFileConnectionCaptionToKeyResolver<TParent>;
    connection?: UploadFileConnectionCaptionToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionCaptionToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionCaptionToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionWidthTypeResolver<TParent = any> {
    key?: UploadFileConnectionWidthToKeyResolver<TParent>;
    connection?: UploadFileConnectionWidthToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionWidthToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionWidthToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionHeightTypeResolver<TParent = any> {
    key?: UploadFileConnectionHeightToKeyResolver<TParent>;
    connection?: UploadFileConnectionHeightToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionHeightToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionHeightToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionFormatsTypeResolver<TParent = any> {
    key?: UploadFileConnectionFormatsToKeyResolver<TParent>;
    connection?: UploadFileConnectionFormatsToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionFormatsToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionFormatsToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionHashTypeResolver<TParent = any> {
    key?: UploadFileConnectionHashToKeyResolver<TParent>;
    connection?: UploadFileConnectionHashToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionHashToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionHashToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionExtTypeResolver<TParent = any> {
    key?: UploadFileConnectionExtToKeyResolver<TParent>;
    connection?: UploadFileConnectionExtToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionExtToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionExtToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionMimeTypeResolver<TParent = any> {
    key?: UploadFileConnectionMimeToKeyResolver<TParent>;
    connection?: UploadFileConnectionMimeToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionMimeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionMimeToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionSizeTypeResolver<TParent = any> {
    key?: UploadFileConnectionSizeToKeyResolver<TParent>;
    connection?: UploadFileConnectionSizeToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionSizeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionSizeToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionUrlTypeResolver<TParent = any> {
    key?: UploadFileConnectionUrlToKeyResolver<TParent>;
    connection?: UploadFileConnectionUrlToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionUrlToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionUrlToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionPreviewUrlTypeResolver<TParent = any> {
    key?: UploadFileConnectionPreviewUrlToKeyResolver<TParent>;
    connection?: UploadFileConnectionPreviewUrlToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionPreviewUrlToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionPreviewUrlToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionProviderTypeResolver<TParent = any> {
    key?: UploadFileConnectionProviderToKeyResolver<TParent>;
    connection?: UploadFileConnectionProviderToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionProviderToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionProviderToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionProvider_metadataTypeResolver<TParent = any> {
    key?: UploadFileConnectionProvider_metadataToKeyResolver<TParent>;
    connection?: UploadFileConnectionProvider_metadataToConnectionResolver<TParent>;
  }
  
  export interface UploadFileConnectionProvider_metadataToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UploadFileConnectionProvider_metadataToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteFilePayloadTypeResolver<TParent = any> {
    file?: deleteFilePayloadToFileResolver<TParent>;
  }
  
  export interface deleteFilePayloadToFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsPermissionTypeResolver<TParent = any> {
    id?: UsersPermissionsPermissionToIdResolver<TParent>;
    type?: UsersPermissionsPermissionToTypeResolver<TParent>;
    controller?: UsersPermissionsPermissionToControllerResolver<TParent>;
    action?: UsersPermissionsPermissionToActionResolver<TParent>;
    enabled?: UsersPermissionsPermissionToEnabledResolver<TParent>;
    policy?: UsersPermissionsPermissionToPolicyResolver<TParent>;
    role?: UsersPermissionsPermissionToRoleResolver<TParent>;
  }
  
  export interface UsersPermissionsPermissionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsPermissionToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsPermissionToControllerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsPermissionToActionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsPermissionToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsPermissionToPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsPermissionToRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleTypeResolver<TParent = any> {
    id?: UsersPermissionsRoleToIdResolver<TParent>;
    name?: UsersPermissionsRoleToNameResolver<TParent>;
    description?: UsersPermissionsRoleToDescriptionResolver<TParent>;
    type?: UsersPermissionsRoleToTypeResolver<TParent>;
    permissions?: UsersPermissionsRoleToPermissionsResolver<TParent>;
    users?: UsersPermissionsRoleToUsersResolver<TParent>;
  }
  
  export interface UsersPermissionsRoleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleToPermissionsArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface UsersPermissionsRoleToPermissionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: UsersPermissionsRoleToPermissionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleToUsersArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface UsersPermissionsRoleToUsersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: UsersPermissionsRoleToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleConnectionTypeResolver<TParent = any> {
    values?: UsersPermissionsRoleConnectionToValuesResolver<TParent>;
    groupBy?: UsersPermissionsRoleConnectionToGroupByResolver<TParent>;
    aggregate?: UsersPermissionsRoleConnectionToAggregateResolver<TParent>;
  }
  
  export interface UsersPermissionsRoleConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleAggregatorTypeResolver<TParent = any> {
    count?: UsersPermissionsRoleAggregatorToCountResolver<TParent>;
    totalCount?: UsersPermissionsRoleAggregatorToTotalCountResolver<TParent>;
  }
  
  export interface UsersPermissionsRoleAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleGroupByTypeResolver<TParent = any> {
    id?: UsersPermissionsRoleGroupByToIdResolver<TParent>;
    name?: UsersPermissionsRoleGroupByToNameResolver<TParent>;
    description?: UsersPermissionsRoleGroupByToDescriptionResolver<TParent>;
    type?: UsersPermissionsRoleGroupByToTypeResolver<TParent>;
  }
  
  export interface UsersPermissionsRoleGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleGroupByToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleGroupByToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleGroupByToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleConnectionIdTypeResolver<TParent = any> {
    key?: UsersPermissionsRoleConnectionIdToKeyResolver<TParent>;
    connection?: UsersPermissionsRoleConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsRoleConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleConnectionNameTypeResolver<TParent = any> {
    key?: UsersPermissionsRoleConnectionNameToKeyResolver<TParent>;
    connection?: UsersPermissionsRoleConnectionNameToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsRoleConnectionNameToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleConnectionNameToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleConnectionDescriptionTypeResolver<TParent = any> {
    key?: UsersPermissionsRoleConnectionDescriptionToKeyResolver<TParent>;
    connection?: UsersPermissionsRoleConnectionDescriptionToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsRoleConnectionDescriptionToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleConnectionDescriptionToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleConnectionTypeTypeResolver<TParent = any> {
    key?: UsersPermissionsRoleConnectionTypeToKeyResolver<TParent>;
    connection?: UsersPermissionsRoleConnectionTypeToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsRoleConnectionTypeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsRoleConnectionTypeToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface createRolePayloadTypeResolver<TParent = any> {
    role?: createRolePayloadToRoleResolver<TParent>;
  }
  
  export interface createRolePayloadToRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateRolePayloadTypeResolver<TParent = any> {
    role?: updateRolePayloadToRoleResolver<TParent>;
  }
  
  export interface updateRolePayloadToRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteRolePayloadTypeResolver<TParent = any> {
    role?: deleteRolePayloadToRoleResolver<TParent>;
  }
  
  export interface deleteRolePayloadToRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserTypeResolver<TParent = any> {
    id?: UsersPermissionsUserToIdResolver<TParent>;
    created_at?: UsersPermissionsUserToCreated_atResolver<TParent>;
    updated_at?: UsersPermissionsUserToUpdated_atResolver<TParent>;
    username?: UsersPermissionsUserToUsernameResolver<TParent>;
    email?: UsersPermissionsUserToEmailResolver<TParent>;
    provider?: UsersPermissionsUserToProviderResolver<TParent>;
    confirmed?: UsersPermissionsUserToConfirmedResolver<TParent>;
    blocked?: UsersPermissionsUserToBlockedResolver<TParent>;
    role?: UsersPermissionsUserToRoleResolver<TParent>;
    photo?: UsersPermissionsUserToPhotoResolver<TParent>;
    first_name?: UsersPermissionsUserToFirst_nameResolver<TParent>;
    last_name?: UsersPermissionsUserToLast_nameResolver<TParent>;
    nickname?: UsersPermissionsUserToNicknameResolver<TParent>;
    full_name_preview?: UsersPermissionsUserToFull_name_previewResolver<TParent>;
  }
  
  export interface UsersPermissionsUserToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToUsernameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToConfirmedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToBlockedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToPhotoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToFirst_nameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToLast_nameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToNicknameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserToFull_name_previewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionTypeResolver<TParent = any> {
    values?: UsersPermissionsUserConnectionToValuesResolver<TParent>;
    groupBy?: UsersPermissionsUserConnectionToGroupByResolver<TParent>;
    aggregate?: UsersPermissionsUserConnectionToAggregateResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionToGroupByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionToAggregateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserAggregatorTypeResolver<TParent = any> {
    count?: UsersPermissionsUserAggregatorToCountResolver<TParent>;
    totalCount?: UsersPermissionsUserAggregatorToTotalCountResolver<TParent>;
  }
  
  export interface UsersPermissionsUserAggregatorToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserAggregatorToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByTypeResolver<TParent = any> {
    id?: UsersPermissionsUserGroupByToIdResolver<TParent>;
    created_at?: UsersPermissionsUserGroupByToCreated_atResolver<TParent>;
    updated_at?: UsersPermissionsUserGroupByToUpdated_atResolver<TParent>;
    username?: UsersPermissionsUserGroupByToUsernameResolver<TParent>;
    email?: UsersPermissionsUserGroupByToEmailResolver<TParent>;
    provider?: UsersPermissionsUserGroupByToProviderResolver<TParent>;
    confirmed?: UsersPermissionsUserGroupByToConfirmedResolver<TParent>;
    blocked?: UsersPermissionsUserGroupByToBlockedResolver<TParent>;
    role?: UsersPermissionsUserGroupByToRoleResolver<TParent>;
    photo?: UsersPermissionsUserGroupByToPhotoResolver<TParent>;
    first_name?: UsersPermissionsUserGroupByToFirst_nameResolver<TParent>;
    last_name?: UsersPermissionsUserGroupByToLast_nameResolver<TParent>;
    nickname?: UsersPermissionsUserGroupByToNicknameResolver<TParent>;
    full_name_preview?: UsersPermissionsUserGroupByToFull_name_previewResolver<TParent>;
  }
  
  export interface UsersPermissionsUserGroupByToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToCreated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToUsernameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToConfirmedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToBlockedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToPhotoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToFirst_nameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToLast_nameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToNicknameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserGroupByToFull_name_previewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionIdTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionIdToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionIdToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionIdToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionIdToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionCreated_atTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionCreated_atToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionCreated_atToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionUpdated_atTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionUpdated_atToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionUpdated_atToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionUsernameTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionUsernameToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionUsernameToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionUsernameToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionUsernameToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionEmailTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionEmailToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionEmailToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionEmailToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionEmailToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionProviderTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionProviderToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionProviderToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionProviderToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionProviderToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionConfirmedTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionConfirmedToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionConfirmedToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionConfirmedToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionConfirmedToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionBlockedTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionBlockedToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionBlockedToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionBlockedToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionBlockedToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionRoleTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionRoleToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionRoleToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionRoleToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionRoleToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionPhotoTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionPhotoToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionPhotoToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionPhotoToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionPhotoToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionFirst_nameTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionFirst_nameToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionFirst_nameToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionFirst_nameToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionFirst_nameToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionLast_nameTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionLast_nameToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionLast_nameToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionLast_nameToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionLast_nameToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionNicknameTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionNicknameToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionNicknameToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionNicknameToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionNicknameToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionFull_name_previewTypeResolver<TParent = any> {
    key?: UsersPermissionsUserConnectionFull_name_previewToKeyResolver<TParent>;
    connection?: UsersPermissionsUserConnectionFull_name_previewToConnectionResolver<TParent>;
  }
  
  export interface UsersPermissionsUserConnectionFull_name_previewToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UsersPermissionsUserConnectionFull_name_previewToConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface createUserPayloadTypeResolver<TParent = any> {
    user?: createUserPayloadToUserResolver<TParent>;
  }
  
  export interface createUserPayloadToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface updateUserPayloadTypeResolver<TParent = any> {
    user?: updateUserPayloadToUserResolver<TParent>;
  }
  
  export interface updateUserPayloadToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deleteUserPayloadTypeResolver<TParent = any> {
    user?: deleteUserPayloadToUserResolver<TParent>;
  }
  
  export interface deleteUserPayloadToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsPageLinkTypeResolver<TParent = any> {
    id?: ComponentAtomsPageLinkToIdResolver<TParent>;
    page?: ComponentAtomsPageLinkToPageResolver<TParent>;
    label?: ComponentAtomsPageLinkToLabelResolver<TParent>;
  }
  
  export interface ComponentAtomsPageLinkToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsPageLinkToPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsPageLinkToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrRatingTypeResolver<TParent = any> {
    id?: ComponentAtomsProductAttrRatingToIdResolver<TParent>;
    rating?: ComponentAtomsProductAttrRatingToRatingResolver<TParent>;
    product_attribute?: ComponentAtomsProductAttrRatingToProduct_attributeResolver<TParent>;
    points?: ComponentAtomsProductAttrRatingToPointsResolver<TParent>;
    factor?: ComponentAtomsProductAttrRatingToFactorResolver<TParent>;
    enabled?: ComponentAtomsProductAttrRatingToEnabledResolver<TParent>;
    use_custom_formula?: ComponentAtomsProductAttrRatingToUse_custom_formulaResolver<TParent>;
    min?: ComponentAtomsProductAttrRatingToMinResolver<TParent>;
    max?: ComponentAtomsProductAttrRatingToMaxResolver<TParent>;
  }
  
  export interface ComponentAtomsProductAttrRatingToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrRatingToRatingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrRatingToProduct_attributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrRatingToPointsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrRatingToFactorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrRatingToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrRatingToUse_custom_formulaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrRatingToMinResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrRatingToMaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrTypeResolver<TParent = any> {
    id?: ComponentAtomsProductAttrToIdResolver<TParent>;
    factor?: ComponentAtomsProductAttrToFactorResolver<TParent>;
    label_preview?: ComponentAtomsProductAttrToLabel_previewResolver<TParent>;
    product_attribute?: ComponentAtomsProductAttrToProduct_attributeResolver<TParent>;
  }
  
  export interface ComponentAtomsProductAttrToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrToFactorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrToLabel_previewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductAttrToProduct_attributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductIssuesTypeResolver<TParent = any> {
    id?: ComponentAtomsProductIssuesToIdResolver<TParent>;
    amazon_link_invalid?: ComponentAtomsProductIssuesToAmazon_link_invalidResolver<TParent>;
    amazon_link_unavailable?: ComponentAtomsProductIssuesToAmazon_link_unavailableResolver<TParent>;
    ebay_link_invalid?: ComponentAtomsProductIssuesToEbay_link_invalidResolver<TParent>;
    aliexpress_link_invalid?: ComponentAtomsProductIssuesToAliexpress_link_invalidResolver<TParent>;
    idealo_link_invalid?: ComponentAtomsProductIssuesToIdealo_link_invalidResolver<TParent>;
  }
  
  export interface ComponentAtomsProductIssuesToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductIssuesToAmazon_link_invalidResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductIssuesToAmazon_link_unavailableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductIssuesToEbay_link_invalidResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductIssuesToAliexpress_link_invalidResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsProductIssuesToIdealo_link_invalidResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsSocialNetworkTypeResolver<TParent = any> {
    id?: ComponentAtomsSocialNetworkToIdResolver<TParent>;
    url?: ComponentAtomsSocialNetworkToUrlResolver<TParent>;
    type?: ComponentAtomsSocialNetworkToTypeResolver<TParent>;
  }
  
  export interface ComponentAtomsSocialNetworkToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsSocialNetworkToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsSocialNetworkToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsTranslateableLabelTypeResolver<TParent = any> {
    id?: ComponentAtomsTranslateableLabelToIdResolver<TParent>;
    label?: ComponentAtomsTranslateableLabelToLabelResolver<TParent>;
    language?: ComponentAtomsTranslateableLabelToLanguageResolver<TParent>;
  }
  
  export interface ComponentAtomsTranslateableLabelToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsTranslateableLabelToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsTranslateableLabelToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsUrlWithTypeTypeResolver<TParent = any> {
    id?: ComponentAtomsUrlWithTypeToIdResolver<TParent>;
    url?: ComponentAtomsUrlWithTypeToUrlResolver<TParent>;
    source?: ComponentAtomsUrlWithTypeToSourceResolver<TParent>;
    region?: ComponentAtomsUrlWithTypeToRegionResolver<TParent>;
    is_base?: ComponentAtomsUrlWithTypeToIs_baseResolver<TParent>;
    price?: ComponentAtomsUrlWithTypeToPriceResolver<TParent>;
    price_original?: ComponentAtomsUrlWithTypeToPrice_originalResolver<TParent>;
    discount_percent?: ComponentAtomsUrlWithTypeToDiscount_percentResolver<TParent>;
    quantity_available_percent?: ComponentAtomsUrlWithTypeToQuantity_available_percentResolver<TParent>;
  }
  
  export interface ComponentAtomsUrlWithTypeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsUrlWithTypeToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsUrlWithTypeToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsUrlWithTypeToRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsUrlWithTypeToIs_baseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsUrlWithTypeToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsUrlWithTypeToPrice_originalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsUrlWithTypeToDiscount_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentAtomsUrlWithTypeToQuantity_available_percentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentComponentsNaturalListTypeResolver<TParent = any> {
    id?: ComponentComponentsNaturalListToIdResolver<TParent>;
  }
  
  export interface ComponentComponentsNaturalListToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentEntryFieldsFooterFieldsTypeResolver<TParent = any> {
    id?: ComponentEntryFieldsFooterFieldsToIdResolver<TParent>;
    language?: ComponentEntryFieldsFooterFieldsToLanguageResolver<TParent>;
    footer_links?: ComponentEntryFieldsFooterFieldsToFooter_linksResolver<TParent>;
    footer_text?: ComponentEntryFieldsFooterFieldsToFooter_textResolver<TParent>;
    footer_footnote?: ComponentEntryFieldsFooterFieldsToFooter_footnoteResolver<TParent>;
  }
  
  export interface ComponentEntryFieldsFooterFieldsToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentEntryFieldsFooterFieldsToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentEntryFieldsFooterFieldsToFooter_linksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentEntryFieldsFooterFieldsToFooter_textResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentEntryFieldsFooterFieldsToFooter_footnoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentEntryFieldsPageFieldsTypeResolver<TParent = any> {
    id?: ComponentEntryFieldsPageFieldsToIdResolver<TParent>;
    language?: ComponentEntryFieldsPageFieldsToLanguageResolver<TParent>;
    title?: ComponentEntryFieldsPageFieldsToTitleResolver<TParent>;
    body?: ComponentEntryFieldsPageFieldsToBodyResolver<TParent>;
  }
  
  export interface ComponentEntryFieldsPageFieldsToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentEntryFieldsPageFieldsToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentEntryFieldsPageFieldsToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentEntryFieldsPageFieldsToBodyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentEntryFieldsSourceSelectorsTypeResolver<TParent = any> {
    id?: ComponentEntryFieldsSourceSelectorsToIdResolver<TParent>;
    product_detail?: ComponentEntryFieldsSourceSelectorsToProduct_detailResolver<TParent>;
  }
  
  export interface ComponentEntryFieldsSourceSelectorsToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ComponentEntryFieldsSourceSelectorsToProduct_detailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MorphTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'UsersPermissionsMe' | 'UsersPermissionsMeRole' | 'UsersPermissionsLoginPayload' | 'UserPermissionsPasswordPayload' | 'CategoryWithChild' | 'DealTypeLabelTranslation' | 'DealTypeNavIcon' | 'DealType' | 'ProductsByDeal' | 'TaskLogEntry' | 'Task' | 'ScheduledTask' | 'ScheduledTaskPayload' | 'ScheduledTaskListPayload' | 'OffersCategoryLabelTranslation' | 'OffersCategory' | 'EnvType' | 'PageData' | 'ProductCategory' | 'ProductsListPayload' | 'NaturalList' | 'ProductClicksDetails' | 'FixedProductsPayload' | 'GiftIdeasPayload' | 'Category' | 'CategoryConnection' | 'CategoryAggregator' | 'CategoryAggregatorSum' | 'CategoryAggregatorAvg' | 'CategoryAggregatorMin' | 'CategoryAggregatorMax' | 'CategoryGroupBy' | 'CategoryConnectionId' | 'CategoryConnectionCreated_at' | 'CategoryConnectionUpdated_at' | 'CategoryConnectionSlug' | 'CategoryConnectionUrl' | 'CategoryConnectionParent' | 'CategoryConnectionLanguage' | 'CategoryConnectionIcon' | 'CategoryConnectionOrder' | 'CategoryConnectionLabel_preview' | 'CategoryConnectionRegion' | 'CategoryConnectionSource' | 'CategoryConnectionLabel_translations_json' | 'CategoryConnectionChildren_count' | 'CategoryConnectionProducts_count' | 'CategoryConnectionDeal_category' | 'createCategoryPayload' | 'updateCategoryPayload' | 'deleteCategoryPayload' | 'ContactDetails' | 'updateContactDetailPayload' | 'deleteContactDetailPayload' | 'Currency' | 'CurrencyConnection' | 'CurrencyAggregator' | 'CurrencyGroupBy' | 'CurrencyConnectionId' | 'CurrencyConnectionCreated_at' | 'CurrencyConnectionUpdated_at' | 'CurrencyConnectionName' | 'CurrencyConnectionCode' | 'CurrencyConnectionSymbol' | 'CurrencyConnectionLabel_preview' | 'createCurrencyPayload' | 'updateCurrencyPayload' | 'deleteCurrencyPayload' | 'FooterSettings' | 'updateFooterSettingPayload' | 'deleteFooterSettingPayload' | 'Language' | 'LanguageConnection' | 'LanguageAggregator' | 'LanguageGroupBy' | 'LanguageConnectionId' | 'LanguageConnectionCreated_at' | 'LanguageConnectionUpdated_at' | 'LanguageConnectionCode' | 'LanguageConnectionName' | 'LanguageConnectionCountry_flag' | 'createLanguagePayload' | 'updateLanguagePayload' | 'deleteLanguagePayload' | 'Page' | 'PageConnection' | 'PageAggregator' | 'PageGroupBy' | 'PageConnectionId' | 'PageConnectionCreated_at' | 'PageConnectionUpdated_at' | 'PageConnectionSlug' | 'PageConnectionLanguage' | 'PageConnectionPublished_at' | 'createPagePayload' | 'updatePagePayload' | 'deletePagePayload' | 'ProductAttribute' | 'ProductAttributeConnection' | 'ProductAttributeAggregator' | 'ProductAttributeGroupBy' | 'ProductAttributeConnectionId' | 'ProductAttributeConnectionCreated_at' | 'ProductAttributeConnectionUpdated_at' | 'ProductAttributeConnectionName' | 'ProductAttributeConnectionCode' | 'ProductAttributeConnectionIs_common' | 'ProductAttributeConnectionData_type' | 'ProductAttributeConnectionCustom_formula' | 'ProductAttributeConnectionDisable_min' | 'ProductAttributeConnectionDisable_max' | 'ProductAttributeConnectionMin_label' | 'ProductAttributeConnectionMax_label' | 'ProductAttributeConnectionProduct_prop' | 'createProductAttributePayload' | 'updateProductAttributePayload' | 'deleteProductAttributePayload' | 'ProductChange' | 'ProductChangeConnection' | 'ProductChangeAggregator' | 'ProductChangeGroupBy' | 'ProductChangeConnectionId' | 'ProductChangeConnectionCreated_at' | 'ProductChangeConnectionUpdated_at' | 'ProductChangeConnectionState' | 'ProductChangeConnectionAdmin_user' | 'ProductChangeConnectionDate_time' | 'ProductChangeConnectionProduct' | 'ProductChangeConnectionChange_type' | 'createProductChangePayload' | 'updateProductChangePayload' | 'deleteProductChangePayload' | 'Product' | 'ProductConnection' | 'ProductAggregator' | 'ProductAggregatorSum' | 'ProductAggregatorAvg' | 'ProductAggregatorMin' | 'ProductAggregatorMax' | 'ProductGroupBy' | 'ProductConnectionId' | 'ProductConnectionCreated_at' | 'ProductConnectionUpdated_at' | 'ProductConnectionPosition' | 'ProductConnectionPrice' | 'ProductConnectionClicks_count' | 'ProductConnectionImage' | 'ProductConnectionRegion' | 'ProductConnectionSource' | 'ProductConnectionDetails_html' | 'ProductConnectionFinal_rating' | 'ProductConnectionAmazon_url' | 'ProductConnectionRelease_date' | 'ProductConnectionAdmin_user' | 'ProductConnectionCategory_temp' | 'ProductConnectionCategory' | 'ProductConnectionStatus' | 'ProductConnectionProduct_issues' | 'ProductConnectionQuantity_available_percent' | 'ProductConnectionDiscount_percent' | 'ProductConnectionPrice_original' | 'ProductConnectionScrape_batch_uid' | 'ProductConnectionDeal_quantity_available_percent' | 'ProductConnectionOffer_category' | 'ProductConnectionDeal_type' | 'ProductConnectionDeal_expiry' | 'ProductConnectionTitle' | 'createProductPayload' | 'updateProductPayload' | 'deleteProductPayload' | 'Region' | 'RegionConnection' | 'RegionAggregator' | 'RegionGroupBy' | 'RegionConnectionId' | 'RegionConnectionCreated_at' | 'RegionConnectionUpdated_at' | 'RegionConnectionName' | 'RegionConnectionCode' | 'RegionConnectionCurrency' | 'createRegionPayload' | 'updateRegionPayload' | 'deleteRegionPayload' | 'SocialNetwork' | 'updateSocialNetworkPayload' | 'deleteSocialNetworkPayload' | 'Source' | 'SourceConnection' | 'SourceAggregator' | 'SourceGroupBy' | 'SourceConnectionId' | 'SourceConnectionCreated_at' | 'SourceConnectionUpdated_at' | 'SourceConnectionName' | 'SourceConnectionButton_logo' | 'createSourcePayload' | 'updateSourcePayload' | 'deleteSourcePayload' | 'Tag' | 'TagConnection' | 'TagAggregator' | 'TagGroupBy' | 'TagConnectionId' | 'TagConnectionCreated_at' | 'TagConnectionUpdated_at' | 'TagConnectionSlug' | 'TagConnectionLanguage' | 'createTagPayload' | 'updateTagPayload' | 'deleteTagPayload' | 'UploadFile' | 'UploadFileConnection' | 'UploadFileAggregator' | 'UploadFileAggregatorSum' | 'UploadFileAggregatorAvg' | 'UploadFileAggregatorMin' | 'UploadFileAggregatorMax' | 'UploadFileGroupBy' | 'UploadFileConnectionId' | 'UploadFileConnectionCreated_at' | 'UploadFileConnectionUpdated_at' | 'UploadFileConnectionName' | 'UploadFileConnectionAlternativeText' | 'UploadFileConnectionCaption' | 'UploadFileConnectionWidth' | 'UploadFileConnectionHeight' | 'UploadFileConnectionFormats' | 'UploadFileConnectionHash' | 'UploadFileConnectionExt' | 'UploadFileConnectionMime' | 'UploadFileConnectionSize' | 'UploadFileConnectionUrl' | 'UploadFileConnectionPreviewUrl' | 'UploadFileConnectionProvider' | 'UploadFileConnectionProvider_metadata' | 'deleteFilePayload' | 'UsersPermissionsPermission' | 'UsersPermissionsRole' | 'UsersPermissionsRoleConnection' | 'UsersPermissionsRoleAggregator' | 'UsersPermissionsRoleGroupBy' | 'UsersPermissionsRoleConnectionId' | 'UsersPermissionsRoleConnectionName' | 'UsersPermissionsRoleConnectionDescription' | 'UsersPermissionsRoleConnectionType' | 'createRolePayload' | 'updateRolePayload' | 'deleteRolePayload' | 'UsersPermissionsUser' | 'UsersPermissionsUserConnection' | 'UsersPermissionsUserAggregator' | 'UsersPermissionsUserGroupBy' | 'UsersPermissionsUserConnectionId' | 'UsersPermissionsUserConnectionCreated_at' | 'UsersPermissionsUserConnectionUpdated_at' | 'UsersPermissionsUserConnectionUsername' | 'UsersPermissionsUserConnectionEmail' | 'UsersPermissionsUserConnectionProvider' | 'UsersPermissionsUserConnectionConfirmed' | 'UsersPermissionsUserConnectionBlocked' | 'UsersPermissionsUserConnectionRole' | 'UsersPermissionsUserConnectionPhoto' | 'UsersPermissionsUserConnectionFirst_name' | 'UsersPermissionsUserConnectionLast_name' | 'UsersPermissionsUserConnectionNickname' | 'UsersPermissionsUserConnectionFull_name_preview' | 'createUserPayload' | 'updateUserPayload' | 'deleteUserPayload' | 'ComponentAtomsPageLink' | 'ComponentAtomsProductAttrRating' | 'ComponentAtomsProductAttr' | 'ComponentAtomsProductIssues' | 'ComponentAtomsSocialNetwork' | 'ComponentAtomsTranslateableLabel' | 'ComponentAtomsUrlWithType' | 'ComponentComponentsNaturalList' | 'ComponentEntryFieldsFooterFields' | 'ComponentEntryFieldsPageFields' | 'ComponentEntryFieldsSourceSelectors' | Promise<'UsersPermissionsMe' | 'UsersPermissionsMeRole' | 'UsersPermissionsLoginPayload' | 'UserPermissionsPasswordPayload' | 'CategoryWithChild' | 'DealTypeLabelTranslation' | 'DealTypeNavIcon' | 'DealType' | 'ProductsByDeal' | 'TaskLogEntry' | 'Task' | 'ScheduledTask' | 'ScheduledTaskPayload' | 'ScheduledTaskListPayload' | 'OffersCategoryLabelTranslation' | 'OffersCategory' | 'EnvType' | 'PageData' | 'ProductCategory' | 'ProductsListPayload' | 'NaturalList' | 'ProductClicksDetails' | 'FixedProductsPayload' | 'GiftIdeasPayload' | 'Category' | 'CategoryConnection' | 'CategoryAggregator' | 'CategoryAggregatorSum' | 'CategoryAggregatorAvg' | 'CategoryAggregatorMin' | 'CategoryAggregatorMax' | 'CategoryGroupBy' | 'CategoryConnectionId' | 'CategoryConnectionCreated_at' | 'CategoryConnectionUpdated_at' | 'CategoryConnectionSlug' | 'CategoryConnectionUrl' | 'CategoryConnectionParent' | 'CategoryConnectionLanguage' | 'CategoryConnectionIcon' | 'CategoryConnectionOrder' | 'CategoryConnectionLabel_preview' | 'CategoryConnectionRegion' | 'CategoryConnectionSource' | 'CategoryConnectionLabel_translations_json' | 'CategoryConnectionChildren_count' | 'CategoryConnectionProducts_count' | 'CategoryConnectionDeal_category' | 'createCategoryPayload' | 'updateCategoryPayload' | 'deleteCategoryPayload' | 'ContactDetails' | 'updateContactDetailPayload' | 'deleteContactDetailPayload' | 'Currency' | 'CurrencyConnection' | 'CurrencyAggregator' | 'CurrencyGroupBy' | 'CurrencyConnectionId' | 'CurrencyConnectionCreated_at' | 'CurrencyConnectionUpdated_at' | 'CurrencyConnectionName' | 'CurrencyConnectionCode' | 'CurrencyConnectionSymbol' | 'CurrencyConnectionLabel_preview' | 'createCurrencyPayload' | 'updateCurrencyPayload' | 'deleteCurrencyPayload' | 'FooterSettings' | 'updateFooterSettingPayload' | 'deleteFooterSettingPayload' | 'Language' | 'LanguageConnection' | 'LanguageAggregator' | 'LanguageGroupBy' | 'LanguageConnectionId' | 'LanguageConnectionCreated_at' | 'LanguageConnectionUpdated_at' | 'LanguageConnectionCode' | 'LanguageConnectionName' | 'LanguageConnectionCountry_flag' | 'createLanguagePayload' | 'updateLanguagePayload' | 'deleteLanguagePayload' | 'Page' | 'PageConnection' | 'PageAggregator' | 'PageGroupBy' | 'PageConnectionId' | 'PageConnectionCreated_at' | 'PageConnectionUpdated_at' | 'PageConnectionSlug' | 'PageConnectionLanguage' | 'PageConnectionPublished_at' | 'createPagePayload' | 'updatePagePayload' | 'deletePagePayload' | 'ProductAttribute' | 'ProductAttributeConnection' | 'ProductAttributeAggregator' | 'ProductAttributeGroupBy' | 'ProductAttributeConnectionId' | 'ProductAttributeConnectionCreated_at' | 'ProductAttributeConnectionUpdated_at' | 'ProductAttributeConnectionName' | 'ProductAttributeConnectionCode' | 'ProductAttributeConnectionIs_common' | 'ProductAttributeConnectionData_type' | 'ProductAttributeConnectionCustom_formula' | 'ProductAttributeConnectionDisable_min' | 'ProductAttributeConnectionDisable_max' | 'ProductAttributeConnectionMin_label' | 'ProductAttributeConnectionMax_label' | 'ProductAttributeConnectionProduct_prop' | 'createProductAttributePayload' | 'updateProductAttributePayload' | 'deleteProductAttributePayload' | 'ProductChange' | 'ProductChangeConnection' | 'ProductChangeAggregator' | 'ProductChangeGroupBy' | 'ProductChangeConnectionId' | 'ProductChangeConnectionCreated_at' | 'ProductChangeConnectionUpdated_at' | 'ProductChangeConnectionState' | 'ProductChangeConnectionAdmin_user' | 'ProductChangeConnectionDate_time' | 'ProductChangeConnectionProduct' | 'ProductChangeConnectionChange_type' | 'createProductChangePayload' | 'updateProductChangePayload' | 'deleteProductChangePayload' | 'Product' | 'ProductConnection' | 'ProductAggregator' | 'ProductAggregatorSum' | 'ProductAggregatorAvg' | 'ProductAggregatorMin' | 'ProductAggregatorMax' | 'ProductGroupBy' | 'ProductConnectionId' | 'ProductConnectionCreated_at' | 'ProductConnectionUpdated_at' | 'ProductConnectionPosition' | 'ProductConnectionPrice' | 'ProductConnectionClicks_count' | 'ProductConnectionImage' | 'ProductConnectionRegion' | 'ProductConnectionSource' | 'ProductConnectionDetails_html' | 'ProductConnectionFinal_rating' | 'ProductConnectionAmazon_url' | 'ProductConnectionRelease_date' | 'ProductConnectionAdmin_user' | 'ProductConnectionCategory_temp' | 'ProductConnectionCategory' | 'ProductConnectionStatus' | 'ProductConnectionProduct_issues' | 'ProductConnectionQuantity_available_percent' | 'ProductConnectionDiscount_percent' | 'ProductConnectionPrice_original' | 'ProductConnectionScrape_batch_uid' | 'ProductConnectionDeal_quantity_available_percent' | 'ProductConnectionOffer_category' | 'ProductConnectionDeal_type' | 'ProductConnectionDeal_expiry' | 'ProductConnectionTitle' | 'createProductPayload' | 'updateProductPayload' | 'deleteProductPayload' | 'Region' | 'RegionConnection' | 'RegionAggregator' | 'RegionGroupBy' | 'RegionConnectionId' | 'RegionConnectionCreated_at' | 'RegionConnectionUpdated_at' | 'RegionConnectionName' | 'RegionConnectionCode' | 'RegionConnectionCurrency' | 'createRegionPayload' | 'updateRegionPayload' | 'deleteRegionPayload' | 'SocialNetwork' | 'updateSocialNetworkPayload' | 'deleteSocialNetworkPayload' | 'Source' | 'SourceConnection' | 'SourceAggregator' | 'SourceGroupBy' | 'SourceConnectionId' | 'SourceConnectionCreated_at' | 'SourceConnectionUpdated_at' | 'SourceConnectionName' | 'SourceConnectionButton_logo' | 'createSourcePayload' | 'updateSourcePayload' | 'deleteSourcePayload' | 'Tag' | 'TagConnection' | 'TagAggregator' | 'TagGroupBy' | 'TagConnectionId' | 'TagConnectionCreated_at' | 'TagConnectionUpdated_at' | 'TagConnectionSlug' | 'TagConnectionLanguage' | 'createTagPayload' | 'updateTagPayload' | 'deleteTagPayload' | 'UploadFile' | 'UploadFileConnection' | 'UploadFileAggregator' | 'UploadFileAggregatorSum' | 'UploadFileAggregatorAvg' | 'UploadFileAggregatorMin' | 'UploadFileAggregatorMax' | 'UploadFileGroupBy' | 'UploadFileConnectionId' | 'UploadFileConnectionCreated_at' | 'UploadFileConnectionUpdated_at' | 'UploadFileConnectionName' | 'UploadFileConnectionAlternativeText' | 'UploadFileConnectionCaption' | 'UploadFileConnectionWidth' | 'UploadFileConnectionHeight' | 'UploadFileConnectionFormats' | 'UploadFileConnectionHash' | 'UploadFileConnectionExt' | 'UploadFileConnectionMime' | 'UploadFileConnectionSize' | 'UploadFileConnectionUrl' | 'UploadFileConnectionPreviewUrl' | 'UploadFileConnectionProvider' | 'UploadFileConnectionProvider_metadata' | 'deleteFilePayload' | 'UsersPermissionsPermission' | 'UsersPermissionsRole' | 'UsersPermissionsRoleConnection' | 'UsersPermissionsRoleAggregator' | 'UsersPermissionsRoleGroupBy' | 'UsersPermissionsRoleConnectionId' | 'UsersPermissionsRoleConnectionName' | 'UsersPermissionsRoleConnectionDescription' | 'UsersPermissionsRoleConnectionType' | 'createRolePayload' | 'updateRolePayload' | 'deleteRolePayload' | 'UsersPermissionsUser' | 'UsersPermissionsUserConnection' | 'UsersPermissionsUserAggregator' | 'UsersPermissionsUserGroupBy' | 'UsersPermissionsUserConnectionId' | 'UsersPermissionsUserConnectionCreated_at' | 'UsersPermissionsUserConnectionUpdated_at' | 'UsersPermissionsUserConnectionUsername' | 'UsersPermissionsUserConnectionEmail' | 'UsersPermissionsUserConnectionProvider' | 'UsersPermissionsUserConnectionConfirmed' | 'UsersPermissionsUserConnectionBlocked' | 'UsersPermissionsUserConnectionRole' | 'UsersPermissionsUserConnectionPhoto' | 'UsersPermissionsUserConnectionFirst_name' | 'UsersPermissionsUserConnectionLast_name' | 'UsersPermissionsUserConnectionNickname' | 'UsersPermissionsUserConnectionFull_name_preview' | 'createUserPayload' | 'updateUserPayload' | 'deleteUserPayload' | 'ComponentAtomsPageLink' | 'ComponentAtomsProductAttrRating' | 'ComponentAtomsProductAttr' | 'ComponentAtomsProductIssues' | 'ComponentAtomsSocialNetwork' | 'ComponentAtomsTranslateableLabel' | 'ComponentAtomsUrlWithType' | 'ComponentComponentsNaturalList' | 'ComponentEntryFieldsFooterFields' | 'ComponentEntryFieldsPageFields' | 'ComponentEntryFieldsSourceSelectors'>;
  }
  export interface AdminUserTypeResolver<TParent = any> {
    id?: AdminUserToIdResolver<TParent>;
    username?: AdminUserToUsernameResolver<TParent>;
    firstname?: AdminUserToFirstnameResolver<TParent>;
    lastname?: AdminUserToLastnameResolver<TParent>;
  }
  
  export interface AdminUserToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdminUserToUsernameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdminUserToFirstnameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdminUserToLastnameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryTypeResolver<TParent = any> {
    category?: QueryToCategoryResolver<TParent>;
    categories?: QueryToCategoriesResolver<TParent>;
    categoriesConnection?: QueryToCategoriesConnectionResolver<TParent>;
    contactDetail?: QueryToContactDetailResolver<TParent>;
    currency?: QueryToCurrencyResolver<TParent>;
    currencies?: QueryToCurrenciesResolver<TParent>;
    currenciesConnection?: QueryToCurrenciesConnectionResolver<TParent>;
    footerSetting?: QueryToFooterSettingResolver<TParent>;
    language?: QueryToLanguageResolver<TParent>;
    languages?: QueryToLanguagesResolver<TParent>;
    languagesConnection?: QueryToLanguagesConnectionResolver<TParent>;
    page?: QueryToPageResolver<TParent>;
    pages?: QueryToPagesResolver<TParent>;
    pagesConnection?: QueryToPagesConnectionResolver<TParent>;
    productAttribute?: QueryToProductAttributeResolver<TParent>;
    productAttributes?: QueryToProductAttributesResolver<TParent>;
    productAttributesConnection?: QueryToProductAttributesConnectionResolver<TParent>;
    productChange?: QueryToProductChangeResolver<TParent>;
    productChanges?: QueryToProductChangesResolver<TParent>;
    productChangesConnection?: QueryToProductChangesConnectionResolver<TParent>;
    product?: QueryToProductResolver<TParent>;
    products?: QueryToProductsResolver<TParent>;
    productsConnection?: QueryToProductsConnectionResolver<TParent>;
    region?: QueryToRegionResolver<TParent>;
    regions?: QueryToRegionsResolver<TParent>;
    regionsConnection?: QueryToRegionsConnectionResolver<TParent>;
    socialNetwork?: QueryToSocialNetworkResolver<TParent>;
    source?: QueryToSourceResolver<TParent>;
    sources?: QueryToSourcesResolver<TParent>;
    sourcesConnection?: QueryToSourcesConnectionResolver<TParent>;
    tag?: QueryToTagResolver<TParent>;
    tags?: QueryToTagsResolver<TParent>;
    tagsConnection?: QueryToTagsConnectionResolver<TParent>;
    files?: QueryToFilesResolver<TParent>;
    filesConnection?: QueryToFilesConnectionResolver<TParent>;
    role?: QueryToRoleResolver<TParent>;
    roles?: QueryToRolesResolver<TParent>;
    rolesConnection?: QueryToRolesConnectionResolver<TParent>;
    user?: QueryToUserResolver<TParent>;
    users?: QueryToUsersResolver<TParent>;
    usersConnection?: QueryToUsersConnectionResolver<TParent>;
    me?: QueryToMeResolver<TParent>;
    categoryTree?: QueryToCategoryTreeResolver<TParent>;
    footerSettingsByLanguage?: QueryToFooterSettingsByLanguageResolver<TParent>;
    getTask?: QueryToGetTaskResolver<TParent>;
    scheduledTasksList?: QueryToScheduledTasksListResolver<TParent>;
    sheduledTasks?: QueryToSheduledTasksResolver<TParent>;
    sheduledTasksHook?: QueryToSheduledTasksHookResolver<TParent>;
    productsByDeals?: QueryToProductsByDealsResolver<TParent>;
    offersCategories?: QueryToOffersCategoriesResolver<TParent>;
    env?: QueryToEnvResolver<TParent>;
    pageBySlug?: QueryToPageBySlugResolver<TParent>;
    productDetails?: QueryToProductDetailsResolver<TParent>;
    productComparisonList?: QueryToProductComparisonListResolver<TParent>;
    categoryProducts?: QueryToCategoryProductsResolver<TParent>;
    productsList?: QueryToProductsListResolver<TParent>;
    giftIdeas?: QueryToGiftIdeasResolver<TParent>;
  }
  
  export interface QueryToCategoryArgs {
    id: string;
    publicationState?: PublicationState;
  }
  export interface QueryToCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToCategoriesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCategoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToCategoriesConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToCategoriesConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCategoriesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToContactDetailArgs {
    publicationState?: PublicationState;
  }
  export interface QueryToContactDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToContactDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToCurrencyArgs {
    id: string;
    publicationState?: PublicationState;
  }
  export interface QueryToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCurrencyArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToCurrenciesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToCurrenciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCurrenciesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToCurrenciesConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToCurrenciesConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCurrenciesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToFooterSettingArgs {
    publicationState?: PublicationState;
  }
  export interface QueryToFooterSettingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFooterSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToLanguageArgs {
    id: string;
    publicationState?: PublicationState;
  }
  export interface QueryToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToLanguageArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToLanguagesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToLanguagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToLanguagesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToLanguagesConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToLanguagesConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToLanguagesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToPageArgs {
    id: string;
    publicationState?: PublicationState;
  }
  export interface QueryToPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPageArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToPagesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToPagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPagesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToPagesConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToPagesConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPagesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductAttributeArgs {
    id: string;
    publicationState?: PublicationState;
  }
  export interface QueryToProductAttributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductAttributeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductAttributesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToProductAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductAttributesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductAttributesConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToProductAttributesConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductAttributesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductChangeArgs {
    id: string;
    publicationState?: PublicationState;
  }
  export interface QueryToProductChangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductChangeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductChangesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToProductChangesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductChangesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductChangesConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToProductChangesConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductChangesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductArgs {
    id: string;
    publicationState?: PublicationState;
  }
  export interface QueryToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductsArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductsConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToProductsConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductsConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToRegionArgs {
    id: string;
    publicationState?: PublicationState;
  }
  export interface QueryToRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRegionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToRegionsArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToRegionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRegionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToRegionsConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToRegionsConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRegionsConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToSocialNetworkArgs {
    publicationState?: PublicationState;
  }
  export interface QueryToSocialNetworkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSocialNetworkArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToSourceArgs {
    id: string;
    publicationState?: PublicationState;
  }
  export interface QueryToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSourceArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToSourcesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToSourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSourcesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToSourcesConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToSourcesConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSourcesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToTagArgs {
    id: string;
    publicationState?: PublicationState;
  }
  export interface QueryToTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTagArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToTagsArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToTagsConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToTagsConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTagsConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToFilesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFilesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToFilesConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToFilesConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFilesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToRoleArgs {
    id: string;
    publicationState?: PublicationState;
  }
  export interface QueryToRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToRolesArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToRolesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToRolesConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToRolesConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRolesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToUserArgs {
    id: string;
    publicationState?: PublicationState;
  }
  export interface QueryToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToUserArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToUsersArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
    publicationState?: PublicationState;
  }
  export interface QueryToUsersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToUsersConnectionArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: JSON;
  }
  export interface QueryToUsersConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToUsersConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToMeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToCategoryTreeArgs {
    language?: string;
    root?: string;
  }
  export interface QueryToCategoryTreeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCategoryTreeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToFooterSettingsByLanguageArgs {
    language?: string;
  }
  export interface QueryToFooterSettingsByLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFooterSettingsByLanguageArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToGetTaskArgs {
    id: string;
  }
  export interface QueryToGetTaskResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToGetTaskArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToScheduledTasksListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToSheduledTasksArgs {
    command?: string;
    id?: string;
  }
  export interface QueryToSheduledTasksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSheduledTasksArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToSheduledTasksHookArgs {
    hook: string;
  }
  export interface QueryToSheduledTasksHookResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSheduledTasksHookArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductsByDealsArgs {
    deal_type?: string;
    start?: number;
    offer_category?: string;
  }
  export interface QueryToProductsByDealsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductsByDealsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToOffersCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToEnvResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToPageBySlugArgs {
    slug: string;
    language?: string;
  }
  export interface QueryToPageBySlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPageBySlugArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductDetailsArgs {
    id: string;
    language?: string;
  }
  export interface QueryToProductDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductDetailsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductComparisonListArgs {
    language?: string;
    root?: string;
  }
  export interface QueryToProductComparisonListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductComparisonListArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToCategoryProductsArgs {
    language?: string;
    categories?: Array<string | null>;
    includeDescendants?: boolean;
  }
  export interface QueryToCategoryProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCategoryProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToProductsListArgs {
    sort?: string;
    limit?: number;
    start?: number;
    where?: ProductsListWhereParamInput;
  }
  export interface QueryToProductsListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductsListArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToGiftIdeasArgs {
    page?: number;
    tags?: Array<string | null>;
  }
  export interface QueryToGiftIdeasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToGiftIdeasArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationTypeResolver<TParent = any> {
    createCategory?: MutationToCreateCategoryResolver<TParent>;
    updateCategory?: MutationToUpdateCategoryResolver<TParent>;
    deleteCategory?: MutationToDeleteCategoryResolver<TParent>;
    updateContactDetail?: MutationToUpdateContactDetailResolver<TParent>;
    deleteContactDetail?: MutationToDeleteContactDetailResolver<TParent>;
    createCurrency?: MutationToCreateCurrencyResolver<TParent>;
    updateCurrency?: MutationToUpdateCurrencyResolver<TParent>;
    deleteCurrency?: MutationToDeleteCurrencyResolver<TParent>;
    updateFooterSetting?: MutationToUpdateFooterSettingResolver<TParent>;
    deleteFooterSetting?: MutationToDeleteFooterSettingResolver<TParent>;
    createLanguage?: MutationToCreateLanguageResolver<TParent>;
    updateLanguage?: MutationToUpdateLanguageResolver<TParent>;
    deleteLanguage?: MutationToDeleteLanguageResolver<TParent>;
    createPage?: MutationToCreatePageResolver<TParent>;
    updatePage?: MutationToUpdatePageResolver<TParent>;
    deletePage?: MutationToDeletePageResolver<TParent>;
    createProductAttribute?: MutationToCreateProductAttributeResolver<TParent>;
    updateProductAttribute?: MutationToUpdateProductAttributeResolver<TParent>;
    deleteProductAttribute?: MutationToDeleteProductAttributeResolver<TParent>;
    createProductChange?: MutationToCreateProductChangeResolver<TParent>;
    updateProductChange?: MutationToUpdateProductChangeResolver<TParent>;
    deleteProductChange?: MutationToDeleteProductChangeResolver<TParent>;
    createProduct?: MutationToCreateProductResolver<TParent>;
    updateProduct?: MutationToUpdateProductResolver<TParent>;
    deleteProduct?: MutationToDeleteProductResolver<TParent>;
    createRegion?: MutationToCreateRegionResolver<TParent>;
    updateRegion?: MutationToUpdateRegionResolver<TParent>;
    deleteRegion?: MutationToDeleteRegionResolver<TParent>;
    updateSocialNetwork?: MutationToUpdateSocialNetworkResolver<TParent>;
    deleteSocialNetwork?: MutationToDeleteSocialNetworkResolver<TParent>;
    createSource?: MutationToCreateSourceResolver<TParent>;
    updateSource?: MutationToUpdateSourceResolver<TParent>;
    deleteSource?: MutationToDeleteSourceResolver<TParent>;
    createTag?: MutationToCreateTagResolver<TParent>;
    updateTag?: MutationToUpdateTagResolver<TParent>;
    deleteTag?: MutationToDeleteTagResolver<TParent>;
    deleteFile?: MutationToDeleteFileResolver<TParent>;
    createRole?: MutationToCreateRoleResolver<TParent>;
    updateRole?: MutationToUpdateRoleResolver<TParent>;
    deleteRole?: MutationToDeleteRoleResolver<TParent>;
    createUser?: MutationToCreateUserResolver<TParent>;
    updateUser?: MutationToUpdateUserResolver<TParent>;
    deleteUser?: MutationToDeleteUserResolver<TParent>;
    upload?: MutationToUploadResolver<TParent>;
    multipleUpload?: MutationToMultipleUploadResolver<TParent>;
    updateFileInfo?: MutationToUpdateFileInfoResolver<TParent>;
    login?: MutationToLoginResolver<TParent>;
    register?: MutationToRegisterResolver<TParent>;
    forgotPassword?: MutationToForgotPasswordResolver<TParent>;
    resetPassword?: MutationToResetPasswordResolver<TParent>;
    emailConfirmation?: MutationToEmailConfirmationResolver<TParent>;
    updateCategories?: MutationToUpdateCategoriesResolver<TParent>;
    updateProductCounts?: MutationToUpdateProductCountsResolver<TParent>;
    triggerTask?: MutationToTriggerTaskResolver<TParent>;
    deleteProductsByDeals?: MutationToDeleteProductsByDealsResolver<TParent>;
    addProductsByDeals?: MutationToAddProductsByDealsResolver<TParent>;
    addProductClick?: MutationToAddProductClickResolver<TParent>;
    fixProducts?: MutationToFixProductsResolver<TParent>;
    updateProductLinks?: MutationToUpdateProductLinksResolver<TParent>;
  }
  
  export interface MutationToCreateCategoryArgs {
    input?: createCategoryInput;
  }
  export interface MutationToCreateCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateCategoryArgs {
    input?: updateCategoryInput;
  }
  export interface MutationToUpdateCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteCategoryArgs {
    input?: deleteCategoryInput;
  }
  export interface MutationToDeleteCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateContactDetailArgs {
    input?: updateContactDetailInput;
  }
  export interface MutationToUpdateContactDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateContactDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteContactDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCreateCurrencyArgs {
    input?: createCurrencyInput;
  }
  export interface MutationToCreateCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCurrencyArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateCurrencyArgs {
    input?: updateCurrencyInput;
  }
  export interface MutationToUpdateCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCurrencyArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteCurrencyArgs {
    input?: deleteCurrencyInput;
  }
  export interface MutationToDeleteCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCurrencyArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateFooterSettingArgs {
    input?: updateFooterSettingInput;
  }
  export interface MutationToUpdateFooterSettingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFooterSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteFooterSettingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCreateLanguageArgs {
    input?: createLanguageInput;
  }
  export interface MutationToCreateLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateLanguageArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateLanguageArgs {
    input?: updateLanguageInput;
  }
  export interface MutationToUpdateLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateLanguageArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteLanguageArgs {
    input?: deleteLanguageInput;
  }
  export interface MutationToDeleteLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteLanguageArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCreatePageArgs {
    input?: createPageInput;
  }
  export interface MutationToCreatePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePageArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdatePageArgs {
    input?: updatePageInput;
  }
  export interface MutationToUpdatePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePageArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeletePageArgs {
    input?: deletePageInput;
  }
  export interface MutationToDeletePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePageArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCreateProductAttributeArgs {
    input?: createProductAttributeInput;
  }
  export interface MutationToCreateProductAttributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProductAttributeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateProductAttributeArgs {
    input?: updateProductAttributeInput;
  }
  export interface MutationToUpdateProductAttributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProductAttributeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteProductAttributeArgs {
    input?: deleteProductAttributeInput;
  }
  export interface MutationToDeleteProductAttributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProductAttributeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCreateProductChangeArgs {
    input?: createProductChangeInput;
  }
  export interface MutationToCreateProductChangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProductChangeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateProductChangeArgs {
    input?: updateProductChangeInput;
  }
  export interface MutationToUpdateProductChangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProductChangeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteProductChangeArgs {
    input?: deleteProductChangeInput;
  }
  export interface MutationToDeleteProductChangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProductChangeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCreateProductArgs {
    input?: createProductInput;
  }
  export interface MutationToCreateProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProductArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateProductArgs {
    input?: updateProductInput;
  }
  export interface MutationToUpdateProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProductArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteProductArgs {
    input?: deleteProductInput;
  }
  export interface MutationToDeleteProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProductArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCreateRegionArgs {
    input?: createRegionInput;
  }
  export interface MutationToCreateRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateRegionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateRegionArgs {
    input?: updateRegionInput;
  }
  export interface MutationToUpdateRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateRegionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteRegionArgs {
    input?: deleteRegionInput;
  }
  export interface MutationToDeleteRegionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteRegionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateSocialNetworkArgs {
    input?: updateSocialNetworkInput;
  }
  export interface MutationToUpdateSocialNetworkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSocialNetworkArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteSocialNetworkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCreateSourceArgs {
    input?: createSourceInput;
  }
  export interface MutationToCreateSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSourceArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateSourceArgs {
    input?: updateSourceInput;
  }
  export interface MutationToUpdateSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSourceArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteSourceArgs {
    input?: deleteSourceInput;
  }
  export interface MutationToDeleteSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSourceArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCreateTagArgs {
    input?: createTagInput;
  }
  export interface MutationToCreateTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateTagArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateTagArgs {
    input?: updateTagInput;
  }
  export interface MutationToUpdateTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateTagArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteTagArgs {
    input?: deleteTagInput;
  }
  export interface MutationToDeleteTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteTagArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteFileArgs {
    input?: deleteFileInput;
  }
  export interface MutationToDeleteFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteFileArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCreateRoleArgs {
    input?: createRoleInput;
  }
  export interface MutationToCreateRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateRoleArgs {
    input?: updateRoleInput;
  }
  export interface MutationToUpdateRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteRoleArgs {
    input?: deleteRoleInput;
  }
  export interface MutationToDeleteRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCreateUserArgs {
    input?: createUserInput;
  }
  export interface MutationToCreateUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateUserArgs {
    input?: updateUserInput;
  }
  export interface MutationToUpdateUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteUserArgs {
    input?: deleteUserInput;
  }
  export interface MutationToDeleteUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteUserArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUploadArgs {
    refId?: string;
    ref?: string;
    field?: string;
    source?: string;
    info?: FileInfoInput;
    file: Upload;
  }
  export interface MutationToUploadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUploadArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMultipleUploadArgs {
    refId?: string;
    ref?: string;
    field?: string;
    source?: string;
    files: Array<Upload | null>;
  }
  export interface MutationToMultipleUploadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMultipleUploadArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateFileInfoArgs {
    id: string;
    info: FileInfoInput;
  }
  export interface MutationToUpdateFileInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFileInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToLoginArgs {
    input: UsersPermissionsLoginInput;
  }
  export interface MutationToLoginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToRegisterArgs {
    input: UsersPermissionsRegisterInput;
  }
  export interface MutationToRegisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToRegisterArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToForgotPasswordArgs {
    email: string;
  }
  export interface MutationToForgotPasswordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToForgotPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToResetPasswordArgs {
    password: string;
    passwordConfirmation: string;
    code: string;
  }
  export interface MutationToResetPasswordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToResetPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToEmailConfirmationArgs {
    confirmation: string;
  }
  export interface MutationToEmailConfirmationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToEmailConfirmationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateCategoriesArgs {
    categories?: Array<updateCategoryInput | null>;
  }
  export interface MutationToUpdateCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCategoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateProductCountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToTriggerTaskArgs {
    taskID?: string;
    action?: SCHEDULED_TASK_ACTION;
  }
  export interface MutationToTriggerTaskResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToTriggerTaskArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeleteProductsByDealsArgs {
    deal_type?: string;
  }
  export interface MutationToDeleteProductsByDealsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProductsByDealsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToAddProductsByDealsArgs {
    deal_type: string;
    products?: Array<ProductInput | null>;
  }
  export interface MutationToAddProductsByDealsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAddProductsByDealsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToAddProductClickArgs {
    id: string;
  }
  export interface MutationToAddProductClickResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAddProductClickArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFixProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUpdateProductLinksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
}